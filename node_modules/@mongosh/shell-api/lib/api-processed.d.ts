/// <reference types="node" />

import type { Agent } from 'https';
import { Binary } from 'bson';
import { BSONRegExp } from 'bson';
import { BSONSymbol } from 'bson';
import { BSONType } from 'bson';
import { calculateObjectSize } from 'bson';
import type { ClientRequest } from 'http';
import { Code } from 'bson';
import type { ConnectionOptions } from 'tls';
import { DBRef } from 'bson';
import { Decimal128 } from 'bson';
import type { DeserializeOptions } from 'bson';
import { Document as Document_2 } from 'bson';
import { Double } from 'bson';
import type { Duplex } from 'stream';
import { EJSONOptions } from 'bson';
import { EventEmitter } from 'events';
import type { IncomingMessage } from 'http';
import { Int32 } from 'bson';
import { Long } from 'bson';
import { MaxKey } from 'bson';
import { MinKey } from 'bson';
import { ObjectId } from 'bson';
import type { ObjectIdLike } from 'bson';
import { Readable } from 'stream';
import type { RequestOptions } from 'https';
import type { SerializeOptions } from 'bson';
import type { ServerResponse } from 'http';
import type { SrvRecord } from 'dns';
import type { TcpNetConnectOpts } from 'net';
import { Timestamp } from 'bson';
import type { TLSSocketOptions } from 'tls';
import { UUID } from 'bson';

/** @public */
declare type Abortable = {
  /**
   * @experimental
   * When provided, the corresponding `AbortController` can be used to abort an asynchronous action.
   *
   * The `signal.reason` value is used as the error thrown.
   *
   * @remarks
   * **NOTE:** If an abort signal aborts an operation while the driver is writing to the underlying
   * socket or reading the response from the server, the socket will be closed.
   * If signals are aborted at a high rate during socket read/writes this can lead to a high rate of connection reestablishment.
   *
   * We plan to mitigate this in a future release, please follow NODE-6062 (`timeoutMS` expiration suffers the same limitation).
   *
   * AbortSignals are likely a best fit for human interactive interruption (ex. ctrl-C) where the frequency
   * of cancellation is reasonably low. If a signal is programmatically aborted for 100s of operations you can empty
   * the driver's connection pool.
   *
   * @example
   * ```js
   * const controller = new AbortController();
   * const { signal } = controller;
   * process.on('SIGINT', () => controller.abort(new Error('^C pressed')));
   *
   * try {
   *   const res = await fetch('...', { signal });
   *   await collection.findOne(await res.json(), { signal });
   * catch (error) {
   *   if (error === signal.reason) {
   *     // signal abort error handling
   *   }
   * }
   * ```
   */
  signal?: AbortSignal | undefined;
};

/** @public */
declare abstract class AbstractCursor<TSchema = any, CursorEvents extends AbstractCursorEvents = AbstractCursorEvents> extends TypedEventEmitter<CursorEvents> implements AsyncDisposable_2 {
  /* Excluded from this release type: cursorId */
  /* Excluded from this release type: cursorSession */
  /* Excluded from this release type: selectedServer */
  /* Excluded from this release type: cursorNamespace */
  /* Excluded from this release type: documents */
  /* Excluded from this release type: cursorClient */
  /* Excluded from this release type: transform */
  /* Excluded from this release type: initialized */
  /* Excluded from this release type: isClosed */
  /* Excluded from this release type: isKilled */
  /* Excluded from this release type: cursorOptions */
  /* Excluded from this release type: timeoutContext */
  /** @event */
  static readonly CLOSE: "close";
  /* Excluded from this release type: deserializationOptions */
  protected signal: AbortSignal | undefined;
  private abortListener;
  /* Excluded from this release type: __constructor */
  /**
   * The cursor has no id until it receives a response from the initial cursor creating command.
   *
   * It is non-zero for as long as the database has an open cursor.
   *
   * The initiating command may receive a zero id if the entire result is in the `firstBatch`.
   */
  get id(): Long | undefined;
  /* Excluded from this release type: isDead */
  /* Excluded from this release type: client */
  /* Excluded from this release type: server */
  get namespace(): MongoDBNamespace;
  get readPreference(): ReadPreference;
  get readConcern(): ReadConcern | undefined;
  /* Excluded from this release type: session */
  /* Excluded from this release type: session */
  /**
   * The cursor is closed and all remaining locally buffered documents have been iterated.
   */
  get closed(): boolean;
  /**
   * A `killCursors` command was attempted on this cursor.
   * This is performed if the cursor id is non zero.
   */
  get killed(): boolean;
  get loadBalanced(): boolean;
  /* Excluded from this release type: [Symbol.asyncDispose] */
  /* Excluded from this release type: asyncDispose */
  /** Adds cursor to client's tracking so it will be closed by MongoClient.close() */
  private trackCursor;
  /** Returns current buffered documents length */
  bufferedCount(): number;
  /** Returns current buffered documents */
  readBufferedDocuments(number?: number): NonNullable<TSchema>[];
  [Symbol.asyncIterator](): AsyncGenerator<TSchema, void, void>;
  stream(options?: CursorStreamOptions): Readable & AsyncIterable<TSchema>;
  hasNext(): Promise<boolean>;
  /** Get the next available document from the cursor, returns null if no more documents are available. */
  next(): Promise<TSchema | null>;
  /**
   * Try to get the next available document from the cursor or `null` if an empty batch is returned
   */
  tryNext(): Promise<TSchema | null>;
  /**
   * Iterates over all the documents for this cursor using the iterator, callback pattern.
   *
   * If the iterator returns `false`, iteration will stop.
   *
   * @param iterator - The iteration callback.
   * @deprecated - Will be removed in a future release. Use for await...of instead.
   */
  forEach(iterator: (doc: TSchema) => boolean | void): Promise<void>;
  /**
   * Frees any client-side resources used by the cursor.
   */
  close(options?: {
    timeoutMS?: number;
  }): Promise<void>;
  /**
   * Returns an array of documents. The caller is responsible for making sure that there
   * is enough memory to store the results. Note that the array only contains partial
   * results when this cursor had been previously accessed. In that case,
   * cursor.rewind() can be used to reset the cursor.
   */
  toArray(): Promise<TSchema[]>;
  /**
   * Add a cursor flag to the cursor
   *
   * @param flag - The flag to set, must be one of following ['tailable', 'oplogReplay', 'noCursorTimeout', 'awaitData', 'partial' -.
   * @param value - The flag boolean value.
   */
  addCursorFlag(flag: CursorFlag, value: boolean): this;
  /**
   * Map all documents using the provided function
   * If there is a transform set on the cursor, that will be called first and the result passed to
   * this function's transform.
   *
   * @remarks
   *
   * **Note** Cursors use `null` internally to indicate that there are no more documents in the cursor. Providing a mapping
   * function that maps values to `null` will result in the cursor closing itself before it has finished iterating
   * all documents.  This will **not** result in a memory leak, just surprising behavior.  For example:
   *
   * ```typescript
   * const cursor = collection.find({});
   * cursor.map(() => null);
   *
   * const documents = await cursor.toArray();
   * // documents is always [], regardless of how many documents are in the collection.
   * ```
   *
   * Other falsey values are allowed:
   *
   * ```typescript
   * const cursor = collection.find({});
   * cursor.map(() => '');
   *
   * const documents = await cursor.toArray();
   * // documents is now an array of empty strings
   * ```
   *
   * **Note for Typescript Users:** adding a transform changes the return type of the iteration of this cursor,
   * it **does not** return a new instance of a cursor. This means when calling map,
   * you should always assign the result to a new variable in order to get a correctly typed cursor variable.
   * Take note of the following example:
   *
   * @example
   * ```typescript
   * const cursor: FindCursor<Document> = coll.find();
   * const mappedCursor: FindCursor<number> = cursor.map(doc => Object.keys(doc).length);
   * const keyCounts: number[] = await mappedCursor.toArray(); // cursor.toArray() still returns Document[]
   * ```
   * @param transform - The mapping transformation method.
   */
  map<T = any>(transform: (doc: TSchema) => T): AbstractCursor<T>;
  /**
   * Set the ReadPreference for the cursor.
   *
   * @param readPreference - The new read preference for the cursor.
   */
  withReadPreference(readPreference: ReadPreferenceLike): this;
  /**
   * Set the ReadPreference for the cursor.
   *
   * @param readPreference - The new read preference for the cursor.
   */
  withReadConcern(readConcern: ReadConcernLike): this;
  /**
   * Set a maxTimeMS on the cursor query, allowing for hard timeout limits on queries (Only supported on MongoDB 2.6 or higher)
   *
   * @param value - Number of milliseconds to wait before aborting the query.
   */
  maxTimeMS(value: number): this;
  /**
   * Set the batch size for the cursor.
   *
   * @param value - The number of documents to return per batch. See {@link https://www.mongodb.com/docs/manual/reference/command/find/|find command documentation}.
   */
  batchSize(value: number): this;
  /**
   * Rewind this cursor to its uninitialized state. Any options that are present on the cursor will
   * remain in effect. Iterating this cursor will cause new queries to be sent to the server, even
   * if the resultant data has already been retrieved by this cursor.
   */
  rewind(): void;
  /**
   * Returns a new uninitialized copy of this cursor, with options matching those that have been set on the current instance
   */
  abstract clone(): AbstractCursor<TSchema>;
  /* Excluded from this release type: _initialize */
  /* Excluded from this release type: getMore */
  /* Excluded from this release type: cursorInit */
  /* Excluded from this release type: fetchBatch */
  /* Excluded from this release type: cleanup */
  /* Excluded from this release type: hasEmittedClose */
  /* Excluded from this release type: emitClose */
  /* Excluded from this release type: transformDocument */
  /* Excluded from this release type: throwIfInitialized */
}
declare abstract class AbstractCursor_2<CursorType extends ServiceProviderAggregationCursor | ServiceProviderFindCursor | ServiceProviderRunCommandCursor> extends ShellApiWithMongoClass {
  _mongo: Mongo;
  _cursor: CursorType;
  _transform: ((doc: any) => any) | null;
  _currentIterationResult: CursorIterationResult | null;
  constructor(mongo: Mongo, cursor: CursorType);
  [asPrintable](): Promise<CursorIterationResult>;
  _it(): Promise<CursorIterationResult>;
  batchSize(size: number): this;
  close(): Promise<void>;
  forEach(f: (doc: Document_2) => void | boolean | Promise<void> | Promise<boolean>): Promise<void>;
  hasNext(): Promise<boolean>;
  tryNext(): Promise<Document_2 | null>;
  _tryNext(): Promise<Document_2 | null>;
  _canDelegateIterationToUnderlyingCursor(): boolean;
  [Symbol.asyncIterator](): AsyncGenerator<Document_2, void, void>;
  isClosed(): boolean;
  isExhausted(): boolean;
  itcount(): Promise<number>;
  toArray(): Promise<Document_2[]>;
  pretty(): this;
  map(f: (doc: Document_2) => Document_2): this;
  maxTimeMS(value: number): this;
  next(): Promise<Document_2 | null>;
  objsLeftInBatch(): number;
}

/** @public */
declare type AbstractCursorEvents = {
  [AbstractCursor.CLOSE](): void;
};

/** @public */
declare interface AbstractCursorOptions extends BSONSerializeOptions {
  session?: ClientSession;
  readPreference?: ReadPreferenceLike;
  readConcern?: ReadConcernLike;
  /**
   * Specifies the number of documents to return in each response from MongoDB
   */
  batchSize?: number;
  /**
   * When applicable `maxTimeMS` controls the amount of time the initial command
   * that constructs a cursor should take. (ex. find, aggregate, listCollections)
   */
  maxTimeMS?: number;
  /**
   * When applicable `maxAwaitTimeMS` controls the amount of time subsequent getMores
   * that a cursor uses to fetch more data should take. (ex. cursor.next())
   */
  maxAwaitTimeMS?: number;
  /**
   * Comment to apply to the operation.
   *
   * In server versions pre-4.4, 'comment' must be string.  A server
   * error will be thrown if any other type is provided.
   *
   * In server versions 4.4 and above, 'comment' can be any valid BSON type.
   */
  comment?: unknown;
  /**
   * By default, MongoDB will automatically close a cursor when the
   * client has exhausted all results in the cursor. However, for [capped collections](https://www.mongodb.com/docs/manual/core/capped-collections)
   * you may use a Tailable Cursor that remains open after the client exhausts
   * the results in the initial cursor.
   */
  tailable?: boolean;
  /**
   * If awaitData is set to true, when the cursor reaches the end of the capped collection,
   * MongoDB blocks the query thread for a period of time waiting for new data to arrive.
   * When new data is inserted into the capped collection, the blocked thread is signaled
   * to wake up and return the next batch to the client.
   */
  awaitData?: boolean;
  noCursorTimeout?: boolean;
  /** Specifies the time an operation will run until it throws a timeout error. See {@link AbstractCursorOptions.timeoutMode} for more details on how this option applies to cursors. */
  timeoutMS?: number;
  /**
   * @public
   * @experimental
   * Specifies how `timeoutMS` is applied to the cursor. Can be either `'cursorLifeTime'` or `'iteration'`
   * When set to `'iteration'`, the deadline specified by `timeoutMS` applies to each call of
   * `cursor.next()`.
   * When set to `'cursorLifetime'`, the deadline applies to the life of the entire cursor.
   *
   * Depending on the type of cursor being used, this option has different default values.
   * For non-tailable cursors, this value defaults to `'cursorLifetime'`
   * For tailable cursors, this value defaults to `'iteration'` since tailable cursors, by
   * definition can have an arbitrarily long lifetime.
   *
   * @example
   * ```ts
   * const cursor = collection.find({}, {timeoutMS: 100, timeoutMode: 'iteration'});
   * for await (const doc of cursor) {
   *  // process doc
   *  // This will throw a timeout error if any of the iterator's `next()` calls takes more than 100ms, but
   *  // will continue to iterate successfully otherwise, regardless of the number of batches.
   * }
   * ```
   *
   * @example
   * ```ts
   * const cursor = collection.find({}, { timeoutMS: 1000, timeoutMode: 'cursorLifetime' });
   * const docs = await cursor.toArray(); // This entire line will throw a timeout error if all batches are not fetched and returned within 1000ms.
   * ```
   */
  timeoutMode?: CursorTimeoutMode;
  /* Excluded from this release type: timeoutContext */
}

/** @public */
declare type AcceptedFields<TSchema, FieldType, AssignableType> = { readonly [key in KeysOfAType<TSchema, FieldType>]?: AssignableType };

/** @public */
declare type AddToSetOperators<Type> = {
  $each?: Array<Flatten<Type>>;
};

/**
 * The **Admin** class is an internal class that allows convenient access to
 * the admin functionality and commands for MongoDB.
 *
 * **ADMIN Cannot directly be instantiated**
 * @public
 *
 * @example
 * ```ts
 * import { MongoClient } from 'mongodb';
 *
 * const client = new MongoClient('mongodb://localhost:27017');
 * const admin = client.db().admin();
 * const dbInfo = await admin.listDatabases();
 * for (const db of dbInfo.databases) {
 *   console.log(db.name);
 * }
 * ```
 */
declare class Admin {
  /* Excluded from this release type: s */
  /* Excluded from this release type: __constructor */
  /**
   * Execute a command
   *
   * The driver will ensure the following fields are attached to the command sent to the server:
   * - `lsid` - sourced from an implicit session or options.session
   * - `$readPreference` - defaults to primary or can be configured by options.readPreference
   * - `$db` - sourced from the name of this database
   *
   * If the client has a serverApi setting:
   * - `apiVersion`
   * - `apiStrict`
   * - `apiDeprecationErrors`
   *
   * When in a transaction:
   * - `readConcern` - sourced from readConcern set on the TransactionOptions
   * - `writeConcern` - sourced from writeConcern set on the TransactionOptions
   *
   * Attaching any of the above fields to the command will have no effect as the driver will overwrite the value.
   *
   * @param command - The command to execute
   * @param options - Optional settings for the command
   */
  command(command: Document_2, options?: RunCommandOptions): Promise<Document_2>;
  /**
   * Retrieve the server build information
   *
   * @param options - Optional settings for the command
   */
  buildInfo(options?: CommandOperationOptions): Promise<Document_2>;
  /**
   * Retrieve the server build information
   *
   * @param options - Optional settings for the command
   */
  serverInfo(options?: CommandOperationOptions): Promise<Document_2>;
  /**
   * Retrieve this db's server status.
   *
   * @param options - Optional settings for the command
   */
  serverStatus(options?: CommandOperationOptions): Promise<Document_2>;
  /**
   * Ping the MongoDB server and retrieve results
   *
   * @param options - Optional settings for the command
   */
  ping(options?: CommandOperationOptions): Promise<Document_2>;
  /**
   * Remove a user from a database
   *
   * @param username - The username to remove
   * @param options - Optional settings for the command
   */
  removeUser(username: string, options?: RemoveUserOptions): Promise<boolean>;
  /**
   * Validate an existing collection
   *
   * @param collectionName - The name of the collection to validate.
   * @param options - Optional settings for the command
   */
  validateCollection(collectionName: string, options?: ValidateCollectionOptions): Promise<Document_2>;
  /**
   * List the available databases
   *
   * @param options - Optional settings for the command
   */
  listDatabases(options?: ListDatabasesOptions): Promise<ListDatabasesResult>;
  /**
   * Get ReplicaSet status
   *
   * @param options - Optional settings for the command
   */
  replSetGetStatus(options?: CommandOperationOptions): Promise<Document_2>;
}
declare interface Admin_2 {
  platform: ReplPlatform;
  initialDb: string;
  bsonLibrary: typeof bson;
  listDatabases(database: string, options?: ListDatabasesOptions): Promise<Document_2>;
  getNewConnection(uri: string, options: MongoClientOptions): Promise<any>;
  getURI(): string | undefined;
  getConnectionInfo(): Promise<ConnectionInfo_2>;
  authenticate(authDoc: ShellAuthOptions): Promise<{
    ok: number;
  }>;
  createCollection(dbName: string, collName: string, options: CreateCollectionOptions, dbOptions?: DbOptions): Promise<{
    ok: number;
  }>;
  getReadPreference(): ReadPreference;
  getReadConcern(): ReadConcern | undefined;
  getWriteConcern(): WriteConcern | undefined;
  resetConnectionOptions(options: MongoClientOptions): Promise<void>;
  startSession(options: ClientSessionOptions): ClientSession;
  getRawClient(): any;
  createClientEncryption?(options: ClientEncryptionOptions): ClientEncryption;
  getFleOptions?: () => AutoEncryptionOptions | undefined;
  createEncryptedCollection?(dbName: string, collName: string, options: CreateEncryptedCollectionOptions, libmongocrypt: ClientEncryption): Promise<{
    collection: Collection_2;
    encryptedFields: Document_2;
  }>;
}
declare type AgentWithInitialize = Agent & {
  initialize?(): Promise<void>;
  logger?: ProxyLogEmitter;
  readonly proxyOptions?: Readonly<DevtoolsProxyOptions>;
  createSocket(req: ClientRequest, options: TcpNetConnectOpts | ConnectionOptions, cb: (err: Error | null, s?: Duplex) => void): void;
} & Partial<EventEmitter>;

/** @public */
declare interface AggregateOptions extends Omit<CommandOperationOptions, 'explain'> {
  /** allowDiskUse lets the server know if it can use disk to store temporary results for the aggregation (requires mongodb 2.6 \>). */
  allowDiskUse?: boolean;
  /** The number of documents to return per batch. See [aggregation documentation](https://www.mongodb.com/docs/manual/reference/command/aggregate). */
  batchSize?: number;
  /** Allow driver to bypass schema validation. */
  bypassDocumentValidation?: boolean;
  /** Return the query as cursor, on 2.6 \> it returns as a real cursor on pre 2.6 it returns as an emulated cursor. */
  cursor?: Document_2;
  /**
   * Specifies a cumulative time limit in milliseconds for processing operations on the cursor. MongoDB interrupts the operation at the earliest following interrupt point.
   */
  maxTimeMS?: number;
  /** The maximum amount of time for the server to wait on new documents to satisfy a tailable cursor query. */
  maxAwaitTimeMS?: number;
  /** Specify collation. */
  collation?: CollationOptions;
  /** Add an index selection hint to an aggregation command */
  hint?: Hint;
  /** Map of parameter names and values that can be accessed using $$var (requires MongoDB 5.0). */
  let?: Document_2;
  out?: string;
  /**
   * Specifies the verbosity mode for the explain output.
   * @deprecated This API is deprecated in favor of `collection.aggregate().explain()`
   * or `db.aggregate().explain()`.
   */
  explain?: ExplainOptions['explain'];
  /* Excluded from this release type: timeoutMode */
}
declare abstract class AggregateOrFindCursor<CursorType extends ServiceProviderAggregationCursor | ServiceProviderFindCursor> extends AbstractCursor_2<CursorType> {
  projection(spec: Document_2): this;
  skip(value: number): this;
  sort(spec: Document_2): this;
  explain(verbosity?: ExplainVerbosityLike): Promise<any>;
}

/**
 * The **AggregationCursor** class is an internal class that embodies an aggregation cursor on MongoDB
 * allowing for iteration over the results returned from the underlying query. It supports
 * one by one document iteration, conversion to an array or can be iterated as a Node 4.X
 * or higher stream
 * @public
 */
declare class AggregationCursor<TSchema = any> extends ExplainableCursor<TSchema> {
  readonly pipeline: Document_2[];
  /* Excluded from this release type: aggregateOptions */
  /* Excluded from this release type: __constructor */
  clone(): AggregationCursor<TSchema>;
  /*
  Applies the first argument, a function, to each document visited by the cursor and collects the return values from successive application into an array.
  */
  map<T>(transform: (doc: TSchema) => T): AggregationCursor<T>;
  /* Excluded from this release type: _initialize */
  /** Execute the explain for the cursor */
  /*
  Provides information on the query plan for db.collection.aggregate() method.
  */
  explain(): Document_2;
  /*
  Provides information on the query plan for db.collection.aggregate() method.
  */
  explain(verbosity: ExplainVerbosityLike | ExplainCommandOptions): Document_2;
  /*
  Provides information on the query plan for db.collection.aggregate() method.
  */
  explain(options: {
    timeoutMS?: number;
  }): Document_2;
  /*
  Provides information on the query plan for db.collection.aggregate() method.
  */
  explain(verbosity: ExplainVerbosityLike | ExplainCommandOptions, options: {
    timeoutMS?: number;
  }): Document_2;
  /** Add a stage to the aggregation pipeline
   * @example
   * ```
   * const documents = await users.aggregate().addStage({ $match: { name: /Mike/ } }).toArray();
   * ```
   * @example
   * ```
   * const documents = await users.aggregate()
   *   .addStage<{ name: string }>({ $project: { name: true } })
   *   .toArray(); // type of documents is { name: string }[]
   * ```
   */
  addStage(stage: Document_2): this;
  addStage<T = Document_2>(stage: Document_2): AggregationCursor<T>;
  /** Add a group stage to the aggregation pipeline */
  group<T = TSchema>($group: Document_2): AggregationCursor<T>;
  /** Add a limit stage to the aggregation pipeline */
  limit($limit: number): this;
  /** Add a match stage to the aggregation pipeline */
  match($match: Document_2): this;
  /** Add an out stage to the aggregation pipeline */
  out($out: {
    db: string;
    coll: string;
  } | string): this;
  /**
   * Add a project stage to the aggregation pipeline
   *
   * @remarks
   * In order to strictly type this function you must provide an interface
   * that represents the effect of your projection on the result documents.
   *
   * By default chaining a projection to your cursor changes the returned type to the generic {@link Document} type.
   * You should specify a parameterized type to have assertions on your final results.
   *
   * @example
   * ```typescript
   * // Best way
   * const docs: AggregationCursor<{ a: number }> = cursor.project<{ a: number }>({ _id: 0, a: true });
   * // Flexible way
   * const docs: AggregationCursor<Document> = cursor.project({ _id: 0, a: true });
   * ```
   *
   * @remarks
   * In order to strictly type this function you must provide an interface
   * that represents the effect of your projection on the result documents.
   *
   * **Note for Typescript Users:** adding a transform changes the return type of the iteration of this cursor,
   * it **does not** return a new instance of a cursor. This means when calling project,
   * you should always assign the result to a new variable in order to get a correctly typed cursor variable.
   * Take note of the following example:
   *
   * @example
   * ```typescript
   * const cursor: AggregationCursor<{ a: number; b: string }> = coll.aggregate([]);
   * const projectCursor = cursor.project<{ a: number }>({ _id: 0, a: true });
   * const aPropOnlyArray: {a: number}[] = await projectCursor.toArray();
   *
   * // or always use chaining and save the final cursor
   *
   * const cursor = coll.aggregate().project<{ a: string }>({
   *   _id: 0,
   *   a: { $convert: { input: '$a', to: 'string' }
   * }});
   * ```
   */
  project<T extends Document_2 = Document_2>($project: Document_2): AggregationCursor<T>;
  /** Add a lookup stage to the aggregation pipeline */
  lookup($lookup: Document_2): this;
  /** Add a redact stage to the aggregation pipeline */
  redact($redact: Document_2): this;
  /** Add a skip stage to the aggregation pipeline */
  /*
  Call the cursor.skip() method on a cursor to control where MongoDB begins returning results. This approach may be useful in implementing paginated results.
  */
  skip($skip: number): this;
  /** Add a sort stage to the aggregation pipeline */
  /*
  Specifies the order in which the query returns matching documents. You must apply sort() to the cursor before retrieving any documents from the database.
  */
  sort($sort: Sort): this;
  /** Add a unwind stage to the aggregation pipeline */
  unwind($unwind: Document_2 | string): this;
  /** Add a geoNear stage to the aggregation pipeline */
  geoNear($geoNear: Document_2): this;
}
declare class AggregationCursor_2 extends AggregateOrFindCursor<ServiceProviderAggregationCursor> {
  constructor(mongo: Mongo, cursor: ServiceProviderAggregationCursor);
}

/**
 * It is possible to search using alternative types in mongodb e.g.
 * string types can be searched using a regex in mongo
 * array types can be searched using their element type
 * @public
 */
declare type AlternativeType<T> = T extends ReadonlyArray<infer U> ? T | RegExpOrString<U> : RegExpOrString<T>;
declare type AltNames = string[];

/** @public */
declare type AnyBulkWriteOperation<TSchema extends Document_2 = Document_2> = {
  insertOne: InsertOneModel<TSchema>;
} | {
  replaceOne: ReplaceOneModel<TSchema>;
} | {
  updateOne: UpdateOneModel<TSchema>;
} | {
  updateMany: UpdateManyModel<TSchema>;
} | {
  deleteOne: DeleteOneModel<TSchema>;
} | {
  deleteMany: DeleteManyModel<TSchema>;
};

/**
 * Used to represent any of the client bulk write models that can be passed as an array
 * to MongoClient#bulkWrite.
 * @public
 */
declare type AnyClientBulkWriteModel<TSchema extends Document_2> = ClientInsertOneModel<TSchema> | ClientReplaceOneModel<TSchema> | ClientUpdateOneModel<TSchema> | ClientUpdateManyModel<TSchema> | ClientDeleteOneModel<TSchema> | ClientDeleteManyModel<TSchema>;
declare interface ApiEvent {
  method: string;
  class: string;
  deprecated: boolean;
  isAsync: boolean;
  callDepth: number;
}
declare interface ApiEventArguments {
  pipeline?: any[];
  query?: object;
  options?: object;
  filter?: object;
}
declare interface ApiEventWithArguments {
  method: string;
  class?: string;
  db?: string;
  coll?: string;
  uri?: string;
  arguments?: ApiEventArguments;
}
declare interface ApiWarning {
  method: string;
  class: string;
  message: string;
}

/** @public */
declare type ArrayOperator<Type> = {
  $each?: Array<Flatten<Type>>;
  $slice?: number;
  $position?: number;
  $sort?: Sort;
};
declare const asPrintable: unique symbol;

/**
 * @public
 */
declare interface AsyncDisposable_2 {
  /* Excluded from this release type: [Symbol.asyncDispose] */
  /* Excluded from this release type: asyncDispose */
}

/** @public */
declare interface Auth {
  /** The username for auth */
  username?: string;
  /** The password for auth */
  password?: string;
}
declare type AuthDoc = {
  user: string;
  pwd: string;
  authDb?: string;
  mechanism?: string;
};

/** @public */
declare type AuthFlowType = 'auth-code' | 'device-auth';

/** @public */
declare const AuthMechanism: Readonly<{
  readonly MONGODB_AWS: "MONGODB-AWS";
  readonly MONGODB_CR: "MONGODB-CR";
  readonly MONGODB_DEFAULT: "DEFAULT";
  readonly MONGODB_GSSAPI: "GSSAPI";
  readonly MONGODB_PLAIN: "PLAIN";
  readonly MONGODB_SCRAM_SHA1: "SCRAM-SHA-1";
  readonly MONGODB_SCRAM_SHA256: "SCRAM-SHA-256";
  readonly MONGODB_X509: "MONGODB-X509";
  readonly MONGODB_OIDC: "MONGODB-OIDC";
}>;

/** @public */
declare type AuthMechanism = (typeof AuthMechanism)[keyof typeof AuthMechanism];

/** @public */
declare interface AuthMechanismProperties extends Document_2 {
  SERVICE_HOST?: string;
  SERVICE_NAME?: string;
  SERVICE_REALM?: string;
  CANONICALIZE_HOST_NAME?: GSSAPICanonicalizationValue;
  AWS_SESSION_TOKEN?: string;
  /** A user provided OIDC machine callback function. */
  OIDC_CALLBACK?: OIDCCallbackFunction;
  /** A user provided OIDC human interacted callback function. */
  OIDC_HUMAN_CALLBACK?: OIDCCallbackFunction;
  /** The OIDC environment. Note that 'test' is for internal use only. */
  ENVIRONMENT?: 'test' | 'azure' | 'gcp' | 'k8s';
  /** Allowed hosts that OIDC auth can connect to. */
  ALLOWED_HOSTS?: string[];
  /** The resource token for OIDC auth in Azure and GCP. */
  TOKEN_RESOURCE?: string;
  /**
   * A custom AWS credential provider to use. An example using the AWS SDK default provider chain:
   *
   * ```ts
   * const client = new MongoClient(process.env.MONGODB_URI, {
   *   authMechanismProperties: {
   *     AWS_CREDENTIAL_PROVIDER: fromNodeProviderChain()
   *   }
   * });
   * ```
   *
   * Using a custom function that returns AWS credentials:
   *
   * ```ts
   * const client = new MongoClient(process.env.MONGODB_URI, {
   *   authMechanismProperties: {
   *     AWS_CREDENTIAL_PROVIDER: async () => {
   *       return {
   *         accessKeyId: process.env.ACCESS_KEY_ID,
   *         secretAccessKey: process.env.SECRET_ACCESS_KEY
   *       }
   *     }
   *   }
   * });
   * ```
   */
  AWS_CREDENTIAL_PROVIDER?: AWSCredentialProvider;
}
declare interface AutocompleteParameters {
  topology: () => Topologies | undefined;
  apiVersionInfo: () => Required<ServerApi> | undefined;
  connectionInfo: () => ConnectionExtraInfo | undefined;
  getCollectionCompletionsForCurrentDb: (collName: string) => Promise<string[]>;
  getDatabaseCompletions: (dbName: string) => Promise<string[]>;
}

/** @public */
declare const AutoEncryptionLoggerLevel: Readonly<{
  readonly FatalError: 0;
  readonly Error: 1;
  readonly Warning: 2;
  readonly Info: 3;
  readonly Trace: 4;
}>;

/**
 * @public
 * The level of severity of the log message
 *
 * | Value | Level |
 * |-------|-------|
 * | 0 | Fatal Error |
 * | 1 | Error |
 * | 2 | Warning |
 * | 3 | Info |
 * | 4 | Trace |
 */
declare type AutoEncryptionLoggerLevel = (typeof AutoEncryptionLoggerLevel)[keyof typeof AutoEncryptionLoggerLevel];

/** @public */
declare interface AutoEncryptionOptions {
  /* Excluded from this release type: metadataClient */
  /** A `MongoClient` used to fetch keys from a key vault */
  keyVaultClient?: MongoClient;
  /** The namespace where keys are stored in the key vault */
  keyVaultNamespace?: string;
  /** Configuration options that are used by specific KMS providers during key generation, encryption, and decryption. */
  kmsProviders?: KMSProviders;
  /** Configuration options for custom credential providers. */
  credentialProviders?: CredentialProviders;
  /**
   * A map of namespaces to a local JSON schema for encryption
   *
   * **NOTE**: Supplying options.schemaMap provides more security than relying on JSON Schemas obtained from the server.
   * It protects against a malicious server advertising a false JSON Schema, which could trick the client into sending decrypted data that should be encrypted.
   * Schemas supplied in the schemaMap only apply to configuring automatic encryption for Client-Side Field Level Encryption.
   * Other validation rules in the JSON schema will not be enforced by the driver and will result in an error.
   */
  schemaMap?: Document_2;
  /** Supply a schema for the encrypted fields in the document  */
  encryptedFieldsMap?: Document_2;
  /** Allows the user to bypass auto encryption, maintaining implicit decryption */
  bypassAutoEncryption?: boolean;
  /** Allows users to bypass query analysis */
  bypassQueryAnalysis?: boolean;
  options?: {
    /** An optional hook to catch logging messages from the underlying encryption engine */
    logger?: (level: AutoEncryptionLoggerLevel, message: string) => void;
  };
  extraOptions?: {
    /**
     * A local process the driver communicates with to determine how to encrypt values in a command.
     * Defaults to "mongodb://%2Fvar%2Fmongocryptd.sock" if domain sockets are available or "mongodb://localhost:27020" otherwise
     */
    mongocryptdURI?: string;
    /** If true, autoEncryption will not attempt to spawn a mongocryptd before connecting  */
    mongocryptdBypassSpawn?: boolean;
    /** The path to the mongocryptd executable on the system */
    mongocryptdSpawnPath?: string;
    /** Command line arguments to use when auto-spawning a mongocryptd */
    mongocryptdSpawnArgs?: string[];
    /**
     * Full path to a MongoDB Crypt shared library to be used (instead of mongocryptd).
     *
     * This needs to be the path to the file itself, not a directory.
     * It can be an absolute or relative path. If the path is relative and
     * its first component is `$ORIGIN`, it will be replaced by the directory
     * containing the mongodb-client-encryption native addon file. Otherwise,
     * the path will be interpreted relative to the current working directory.
     *
     * Currently, loading different MongoDB Crypt shared library files from different
     * MongoClients in the same process is not supported.
     *
     * If this option is provided and no MongoDB Crypt shared library could be loaded
     * from the specified location, creating the MongoClient will fail.
     *
     * If this option is not provided and `cryptSharedLibRequired` is not specified,
     * the AutoEncrypter will attempt to spawn and/or use mongocryptd according
     * to the mongocryptd-specific `extraOptions` options.
     *
     * Specifying a path prevents mongocryptd from being used as a fallback.
     *
     * Requires the MongoDB Crypt shared library, available in MongoDB 6.0 or higher.
     */
    cryptSharedLibPath?: string;
    /**
     * If specified, never use mongocryptd and instead fail when the MongoDB Crypt
     * shared library could not be loaded.
     *
     * This is always true when `cryptSharedLibPath` is specified.
     *
     * Requires the MongoDB Crypt shared library, available in MongoDB 6.0 or higher.
     */
    cryptSharedLibRequired?: boolean;
    /* Excluded from this release type: cryptSharedLibSearchPaths */
  };
  proxyOptions?: ProxyOptions;
  /** The TLS options to use connecting to the KMS provider */
  tlsOptions?: CSFLEKMSTlsOptions;
}

/** @public **/
declare type AWSCredentialProvider = () => Promise<AWSCredentials>;

/**
 * @public
 * Copy of the AwsCredentialIdentityProvider interface from [`smithy/types`](https://socket.dev/npm/package/\@smithy/types/files/1.1.1/dist-types/identity/awsCredentialIdentity.d.ts),
 * the return type of the aws-sdk's `fromNodeProviderChain().provider()`.
 */
declare interface AWSCredentials {
  accessKeyId: string;
  secretAccessKey: string;
  sessionToken?: string;
  expiration?: Date;
}

/**
 * @public
 * Configuration options for making an AWS encryption key
 */
declare interface AWSEncryptionKeyOptions {
  /**
   * The AWS region of the KMS
   */
  region: string;
  /**
   * The Amazon Resource Name (ARN) to the AWS customer master key (CMK)
   */
  key: string;
  /**
   * An alternate host to send KMS requests to. May include port number.
   */
  endpoint?: string | undefined;
}

/** @public */
declare interface AWSKMSProviderConfiguration {
  /**
   * The access key used for the AWS KMS provider
   */
  accessKeyId: string;
  /**
   * The secret access key used for the AWS KMS provider
   */
  secretAccessKey: string;
  /**
   * An optional AWS session token that will be used as the
   * X-Amz-Security-Token header for AWS requests.
   */
  sessionToken?: string;
}

/**
 * @public
 * Configuration options for making an Azure encryption key
 */
declare interface AzureEncryptionKeyOptions {
  /**
   * Key name
   */
  keyName: string;
  /**
   * Key vault URL, typically `<name>.vault.azure.net`
   */
  keyVaultEndpoint: string;
  /**
   * Key version
   */
  keyVersion?: string | undefined;
}

/** @public */
declare type AzureKMSProviderConfiguration = {
  /**
   * The tenant ID identifies the organization for the account
   */
  tenantId: string;
  /**
   * The client ID to authenticate a registered application
   */
  clientId: string;
  /**
   * The client secret to authenticate a registered application
   */
  clientSecret: string;
  /**
   * If present, a host with optional port. E.g. "example.com" or "example.com:443".
   * This is optional, and only needed if customer is using a non-commercial Azure instance
   * (e.g. a government or China account, which use different URLs).
   * Defaults to "login.microsoftonline.com"
   */
  identityPlatformEndpoint?: string | undefined;
} | {
  /**
   * If present, an access token to authenticate with Azure.
   */
  accessToken: string;
};
declare interface BaseSocks5RequestMetadata {
  srcAddr: string;
  srcPort: number;
  dstAddr: string;
  dstPort: number;
}

/**
 * Keeps the state of a unordered batch so we can rewrite the results
 * correctly after command execution
 *
 * @public
 */
declare class Batch<T = Document_2> {
  originalZeroIndex: number;
  currentIndex: number;
  originalIndexes: number[];
  batchType: BatchType;
  operations: T[];
  size: number;
  sizeBytes: number;
  constructor(batchType: BatchType, originalZeroIndex: number);
}

/** @public */
declare const BatchType: Readonly<{
  readonly INSERT: 1;
  readonly UPDATE: 2;
  readonly DELETE: 3;
}>;

/** @public */
declare type BatchType = (typeof BatchType)[keyof typeof BatchType];

/** @public */
declare type BitwiseFilter = number /** numeric bit mask */ | Binary /** BinData bit mask */ | ReadonlyArray<number>;
declare const bson: {
  ObjectId: typeof ObjectId;
  DBRef: typeof DBRef;
  MaxKey: typeof MaxKey;
  MinKey: typeof MinKey;
  Timestamp: typeof Timestamp;
  BSONSymbol: typeof BSONSymbol;
  Code: typeof Code;
  Decimal128: typeof Decimal128;
  Int32: typeof Int32;
  Long: typeof Long;
  Binary: typeof Binary;
  calculateObjectSize: typeof calculateObjectSize;
  Double: typeof Double;
  EJSON: {
    parse: (text: string, options?: EJSONOptions) => any;
    stringify: (value: any, replacer?: (number | string)[] | ((this: any, key: string, value: any) => any) | EJSONOptions, space?: string | number, options?: EJSONOptions) => string;
    serialize: (value: any, options?: EJSONOptions) => Document_2;
    deserialize: (ejson: Document_2, options?: EJSONOptions) => any;
  };
  BSONRegExp: typeof BSONRegExp;
};

/**
 * BSON Serialization options.
 * @public
 */
declare interface BSONSerializeOptions extends Omit<SerializeOptions, 'index'>, Omit<DeserializeOptions, 'evalFunctions' | 'cacheFunctions' | 'cacheFunctionsCrc32' | 'allowObjectSmallerThanBufferSize' | 'index' | 'validation'> {
  /**
   * Enabling the raw option will return a [Node.js Buffer](https://nodejs.org/api/buffer.html)
   * which is allocated using [allocUnsafe API](https://nodejs.org/api/buffer.html#static-method-bufferallocunsafesize).
   * See this section from the [Node.js Docs here](https://nodejs.org/api/buffer.html#what-makes-bufferallocunsafe-and-bufferallocunsafeslow-unsafe)
   * for more detail about what "unsafe" refers to in this context.
   * If you need to maintain your own editable clone of the bytes returned for an extended life time of the process, it is recommended you allocate
   * your own buffer and clone the contents:
   *
   * @example
   * ```ts
   * const raw = await collection.findOne({}, { raw: true });
   * const myBuffer = Buffer.alloc(raw.byteLength);
   * myBuffer.set(raw, 0);
   * // Only save and use `myBuffer` beyond this point
   * ```
   *
   * @remarks
   * Please note there is a known limitation where this option cannot be used at the MongoClient level (see [NODE-3946](https://jira.mongodb.org/browse/NODE-3946)).
   * It does correctly work at `Db`, `Collection`, and per operation the same as other BSON options work.
   */
  raw?: boolean;
  /** Enable utf8 validation when deserializing BSON documents.  Defaults to true. */
  enableUtf8Validation?: boolean;
}

/** @public */
declare type BSONTypeAlias = keyof typeof BSONType;
declare class Bulk extends ShellApiWithMongoClass {
  _mongo: Mongo;
  _collection: CollectionWithSchema;
  _batchCounts: any;
  _executed: boolean;
  _serviceProviderBulkOp: OrderedBulkOperation | UnorderedBulkOperation;
  _ordered: boolean;
  constructor(collection: CollectionWithSchema, innerBulk: OrderedBulkOperation | UnorderedBulkOperation, ordered?: boolean);
  [asPrintable](): any;
  private _emitBulkApiCall;
  /*
  Executes the bulk operation.
  */
  execute(writeConcern?: WriteConcern): BulkWriteResult_2;
  /*
  Adds a find to the bulk operation.
  */
  find(query: Document_2): BulkFindOp;
  /*
  Adds an insert to the bulk operation.
  */
  insert(document: Document_2): Bulk;
  toJSON(): Record<'nInsertOps' | 'nUpdateOps' | 'nRemoveOps' | 'nBatches', number>;
  /*
  Returns as a string a JSON document that contains the number of operations and batches in the Bulk() object.
  */
  toString(): string;
  /*
  Returns the batches executed by the bulk write.
  */
  getOperations(): Pick<Batch, 'originalZeroIndex' | 'batchType' | 'operations'>[];
}
declare class BulkFindOp extends ShellApiWithMongoClass {
  _serviceProviderBulkFindOp: FindOperators;
  _parentBulk: Bulk;
  constructor(innerFind: FindOperators, parentBulk: Bulk);
  get _mongo(): Mongo;
  [asPrintable](): string;
  /*
  Adds collation options to the bulk operation.
  */
  collation(spec: CollationOptions): BulkFindOp;
  /*
  Adds an arrayFilter to the bulk operation.
  */
  arrayFilters(filters: Document_2[]): BulkFindOp;
  /*
  Adds an hint to the bulk operation.
  */
  hint(hintDoc: Document_2): BulkFindOp;
  /*
  Adds an delete to the bulk operation.
  */
  delete(): Bulk;
  /*
  Adds an deleteOne to the bulk operation.
  */
  deleteOne(): Bulk;
  /*
  Adds an remove to the bulk operation.
  */
  remove(): Bulk;
  /*
  Adds an removeOne to the bulk operation.
  */
  removeOne(): Bulk;
  /*
  Adds an replaceOne to the bulk operation.
  */
  replaceOne(replacement: Document_2): Bulk;
  /*
  Adds an updateOne to the bulk operation.
  */
  updateOne(update: Document_2 | Document_2[]): Bulk;
  /*
  Adds an update to the bulk operation.
  */
  update(update: Document_2 | Document_2[]): Bulk;
  /*
  Adds an upsert to the bulk operation updates for this find(...).
  */
  upsert(): BulkFindOp;
}

/** @public */
declare abstract class BulkOperationBase {
  private collection;
  isOrdered: boolean;
  /* Excluded from this release type: s */
  operationId?: number;
  /* Excluded from this release type: __constructor */
  /**
   * Add a single insert document to the bulk operation
   *
   * @example
   * ```ts
   * const bulkOp = collection.initializeOrderedBulkOp();
   *
   * // Adds three inserts to the bulkOp.
   * bulkOp
   *   .insert({ a: 1 })
   *   .insert({ b: 2 })
   *   .insert({ c: 3 });
   * await bulkOp.execute();
   * ```
   */
  insert(document: Document_2): BulkOperationBase;
  /**
   * Builds a find operation for an update/updateOne/delete/deleteOne/replaceOne.
   * Returns a builder object used to complete the definition of the operation.
   *
   * @example
   * ```ts
   * const bulkOp = collection.initializeOrderedBulkOp();
   *
   * // Add an updateOne to the bulkOp
   * bulkOp.find({ a: 1 }).updateOne({ $set: { b: 2 } });
   *
   * // Add an updateMany to the bulkOp
   * bulkOp.find({ c: 3 }).update({ $set: { d: 4 } });
   *
   * // Add an upsert
   * bulkOp.find({ e: 5 }).upsert().updateOne({ $set: { f: 6 } });
   *
   * // Add a deletion
   * bulkOp.find({ g: 7 }).deleteOne();
   *
   * // Add a multi deletion
   * bulkOp.find({ h: 8 }).delete();
   *
   * // Add a replaceOne
   * bulkOp.find({ i: 9 }).replaceOne({writeConcern: { j: 10 }});
   *
   * // Update using a pipeline (requires Mongodb 4.2 or higher)
   * bulk.find({ k: 11, y: { $exists: true }, z: { $exists: true } }).updateOne([
   *   { $set: { total: { $sum: [ '$y', '$z' ] } } }
   * ]);
   *
   * // All of the ops will now be executed
   * await bulkOp.execute();
   * ```
   */
  find(selector: Document_2): FindOperators;
  /** Specifies a raw operation to perform in the bulk write. */
  raw(op: AnyBulkWriteOperation): this;
  get length(): number;
  get bsonOptions(): BSONSerializeOptions;
  get writeConcern(): WriteConcern | undefined;
  get batches(): Batch[];
  execute(options?: BulkWriteOptions): Promise<BulkWriteResult>;
  /* Excluded from this release type: handleWriteError */
  abstract addToOperationsList(batchType: BatchType, document: Document_2 | UpdateStatement | DeleteStatement): this;
  private shouldForceServerObjectId;
}

/** @public */
declare interface BulkWriteOperationError {
  index: number;
  code: number;
  errmsg: string;
  errInfo: Document_2;
  op: Document_2 | UpdateStatement | DeleteStatement;
}

/** @public */
declare interface BulkWriteOptions extends CommandOperationOptions {
  /**
   * Allow driver to bypass schema validation.
   * @defaultValue `false` - documents will be validated by default
   **/
  bypassDocumentValidation?: boolean;
  /**
   * If true, when an insert fails, don't execute the remaining writes.
   * If false, continue with remaining inserts when one fails.
   * @defaultValue `true` - inserts are ordered by default
   */
  ordered?: boolean;
  /**
   * Force server to assign _id values instead of driver.
   * @defaultValue `false` - the driver generates `_id` fields by default
   **/
  forceServerObjectId?: boolean;
  /** Map of parameter names and values that can be accessed using $$var (requires MongoDB 5.0). */
  let?: Document_2;
  /* Excluded from this release type: timeoutContext */
}

/**
 * @public
 * The result of a bulk write.
 */
declare class BulkWriteResult {
  private readonly result;
  /** Number of documents inserted. */
  readonly insertedCount: number;
  /** Number of documents matched for update. */
  readonly matchedCount: number;
  /** Number of documents modified. */
  readonly modifiedCount: number;
  /** Number of documents deleted. */
  readonly deletedCount: number;
  /** Number of documents upserted. */
  readonly upsertedCount: number;
  /** Upserted document generated Id's, hash key is the index of the originating operation */
  readonly upsertedIds: {
    [key: number]: any;
  };
  /** Inserted document generated Id's, hash key is the index of the originating operation */
  readonly insertedIds: {
    [key: number]: any;
  };
  private static generateIdMap;
  /* Excluded from this release type: __constructor */
  /** Evaluates to true if the bulk operation correctly executes */
  get ok(): number;
  /* Excluded from this release type: getSuccessfullyInsertedIds */
  /** Returns the upserted id at the given index */
  getUpsertedIdAt(index: number): Document_2 | undefined;
  /** Returns raw internal result */
  getRawResponse(): Document_2;
  /** Returns true if the bulk operation contains a write error */
  hasWriteErrors(): boolean;
  /** Returns the number of write errors off the bulk operation */
  getWriteErrorCount(): number;
  /** Returns a specific write error object */
  getWriteErrorAt(index: number): WriteError | undefined;
  /** Retrieve all write errors */
  getWriteErrors(): WriteError[];
  /** Retrieve the write concern error if one exists */
  getWriteConcernError(): WriteConcernError | undefined;
  toString(): string;
  isOk(): boolean;
}
declare class BulkWriteResult_2 extends ShellApiValueClass {
  acknowledged: boolean;
  insertedCount: number;
  insertedIds: {
    [index: number]: ObjectId;
  };
  matchedCount: number;
  modifiedCount: number;
  deletedCount: number;
  upsertedCount: number;
  upsertedIds: {
    [index: number]: ObjectId;
  };
  constructor(acknowledged: boolean, insertedCount: number, insertedIds: {
    [index: number]: ObjectId;
  }, matchedCount: number, modifiedCount: number, deletedCount: number, upsertedCount: number, upsertedIds: {
    [index: number]: ObjectId;
  });
}

/** @public */
declare class CancellationToken extends TypedEventEmitter<{
  cancel(): void;
}> {
  constructor(...args: any[]);
}

/**
 * Creates a new Change Stream instance. Normally created using {@link Collection#watch|Collection.watch()}.
 * @public
 */
declare class ChangeStream<TSchema extends Document_2 = Document_2, TChange extends Document_2 = ChangeStreamDocument<TSchema>> extends TypedEventEmitter<ChangeStreamEvents<TSchema, TChange>> implements AsyncDisposable_2 {
  /* Excluded from this release type: [Symbol.asyncDispose] */
  /* Excluded from this release type: asyncDispose */
  pipeline: Document_2[];
  /**
   * @remarks WriteConcern can still be present on the options because
   * we inherit options from the client/db/collection.  The
   * key must be present on the options in order to delete it.
   * This allows typescript to delete the key but will
   * not allow a writeConcern to be assigned as a property on options.
   */
  options: ChangeStreamOptions & {
    writeConcern?: never;
  };
  parent: MongoClient | Db | Collection_2;
  namespace: MongoDBNamespace;
  type: symbol;
  /* Excluded from this release type: cursor */
  streamOptions?: CursorStreamOptions;
  /* Excluded from this release type: cursorStream */
  /* Excluded from this release type: isClosed */
  /* Excluded from this release type: mode */
  /** @event */
  static readonly RESPONSE: "response";
  /** @event */
  static readonly MORE: "more";
  /** @event */
  static readonly INIT: "init";
  /** @event */
  static readonly CLOSE: "close";
  /**
   * Fired for each new matching change in the specified namespace. Attaching a `change`
   * event listener to a Change Stream will switch the stream into flowing mode. Data will
   * then be passed as soon as it is available.
   * @event
   */
  static readonly CHANGE: "change";
  /** @event */
  static readonly END: "end";
  /** @event */
  static readonly ERROR: "error";
  /**
   * Emitted each time the change stream stores a new resume token.
   * @event
   */
  static readonly RESUME_TOKEN_CHANGED: "resumeTokenChanged";
  private timeoutContext?;
  /**
   * Note that this property is here to uniquely identify a ChangeStream instance as the owner of
   * the {@link CursorTimeoutContext} instance (see {@link ChangeStream._createChangeStreamCursor}) to ensure
   * that {@link AbstractCursor.close} does not mutate the timeoutContext.
   */
  private contextOwner;
  /* Excluded from this release type: __constructor */
  /** The cached resume token that is used to resume after the most recently returned change. */
  get resumeToken(): ResumeToken;
  /** Check if there is any document still available in the Change Stream */
  hasNext(): Promise<boolean>;
  /** Get the next available document from the Change Stream. */
  next(): Promise<TChange>;
  /**
   * Try to get the next available document from the Change Stream's cursor or `null` if an empty batch is returned
   */
  tryNext(): Promise<TChange | null>;
  [Symbol.asyncIterator](): AsyncGenerator<TChange, void, void>;
  /** Is the cursor closed */
  get closed(): boolean;
  /**
   * Frees the internal resources used by the change stream.
   */
  close(): Promise<void>;
  /**
   * Return a modified Readable stream including a possible transform method.
   *
   * NOTE: When using a Stream to process change stream events, the stream will
   * NOT automatically resume in the case a resumable error is encountered.
   *
   * @throws MongoChangeStreamError if the underlying cursor or the change stream is closed
   */
  stream(options?: CursorStreamOptions): Readable & AsyncIterable<TChange>;
  /* Excluded from this release type: _setIsEmitter */
  /* Excluded from this release type: _setIsIterator */
  /* Excluded from this release type: _createChangeStreamCursor */
  /* Excluded from this release type: _closeEmitterModeWithError */
  /* Excluded from this release type: _streamEvents */
  /* Excluded from this release type: _endStream */
  /* Excluded from this release type: _processChange */
  /* Excluded from this release type: _processErrorStreamMode */
  /* Excluded from this release type: _processErrorIteratorMode */
  private _resume;
}

/**
 * Only present when the `showExpandedEvents` flag is enabled.
 * @public
 * @see https://www.mongodb.com/docs/manual/reference/change-events/modify/#mongodb-data-modify
 */
declare interface ChangeStreamCollModDocument extends ChangeStreamDocumentCommon, ChangeStreamDocumentCollectionUUID {
  /** Describes the type of operation represented in this change notification */
  operationType: 'modify';
}

/**
 * @public
 * @see https://www.mongodb.com/docs/manual/reference/change-events/create/#mongodb-data-create
 */
declare interface ChangeStreamCreateDocument extends ChangeStreamDocumentCommon, ChangeStreamDocumentCollectionUUID {
  /** Describes the type of operation represented in this change notification */
  operationType: 'create';
  /**
   * The type of the newly created object.
   *
   * @sinceServerVersion 8.1.0
   */
  nsType?: 'collection' | 'timeseries' | 'view';
}

/**
 * Only present when the `showExpandedEvents` flag is enabled.
 * @public
 * @see https://www.mongodb.com/docs/manual/reference/change-events/createIndexes/#mongodb-data-createIndexes
 */
declare interface ChangeStreamCreateIndexDocument extends ChangeStreamDocumentCommon, ChangeStreamDocumentCollectionUUID, ChangeStreamDocumentOperationDescription {
  /** Describes the type of operation represented in this change notification */
  operationType: 'createIndexes';
}
declare class ChangeStreamCursor extends ShellApiWithMongoClass {
  _mongo: Mongo;
  _cursor: ServiceProviderChangeStream<Document_2>;
  _currentIterationResult: CursorIterationResult | null;
  _on: string;
  constructor(cursor: ServiceProviderChangeStream<Document_2>, on: string, mongo: Mongo);
  _it(): Promise<CursorIterationResult>;
  [asPrintable](): string;
  /*
  Instructs the server to close a cursor and free associated server resources.
  */
  close(): void;
  /*
  WARNING: on change streams this method will block unless the cursor is closed. Use tryNext to check if there are any documents in the batch. This is a breaking change
  */
  hasNext(): boolean;
  /*
  If there is a document in the change stream, it will be returned. Otherwise returns null.
  */
  tryNext(): Document_2 | null;
  [Symbol.asyncIterator](): AsyncGenerator<Document_2, void, unknown>;
  /*
  Returns true if the cursor is closed
  */
  isClosed(): boolean;
  /*
  This method is deprecated because because after closing a cursor, the remaining documents in the batch are no longer accessible. If you want to see if the cursor is closed use cursor.isClosed. If you want to see if there are documents left in the batch, use cursor.tryNext. This is a breaking change
  */
  isExhausted(): never;
  /*
  Returns the number of documents in the current batch. NOTE: this method exhausts the cursor batch
  */
  itcount(): number;
  /*
  WARNING: on change streams this method will block unless the cursor is closed. Use tryNext to get the next document in the batch. This is a breaking change
  */
  next(): Document_2;
  /*
  Returns the ResumeToken of the change stream
  */
  getResumeToken(): ResumeToken;
  map(): ChangeStreamCursor;
  forEach(): Promise<void>;
  toArray(): Promise<Document_2[]>;
  objsLeftInBatch(): void;
  pretty(): ChangeStreamCursor;
}

/**
 * @public
 * @see https://www.mongodb.com/docs/manual/reference/change-events/#delete-event
 */
declare interface ChangeStreamDeleteDocument<TSchema extends Document_2 = Document_2> extends ChangeStreamDocumentCommon, ChangeStreamDocumentKey<TSchema>, ChangeStreamDocumentCollectionUUID {
  /** Describes the type of operation represented in this change notification */
  operationType: 'delete';
  /** Namespace the delete event occurred on */
  ns: ChangeStreamNameSpace;
  /**
   * Contains the pre-image of the modified or deleted document if the
   * pre-image is available for the change event and either 'required' or
   * 'whenAvailable' was specified for the 'fullDocumentBeforeChange' option
   * when creating the change stream. If 'whenAvailable' was specified but the
   * pre-image is unavailable, this will be explicitly set to null.
   */
  fullDocumentBeforeChange?: TSchema;
}

/** @public */
declare type ChangeStreamDocument<TSchema extends Document_2 = Document_2> = ChangeStreamInsertDocument<TSchema> | ChangeStreamUpdateDocument<TSchema> | ChangeStreamReplaceDocument<TSchema> | ChangeStreamDeleteDocument<TSchema> | ChangeStreamDropDocument | ChangeStreamRenameDocument | ChangeStreamDropDatabaseDocument | ChangeStreamInvalidateDocument | ChangeStreamCreateIndexDocument | ChangeStreamCreateDocument | ChangeStreamCollModDocument | ChangeStreamDropIndexDocument | ChangeStreamShardCollectionDocument | ChangeStreamReshardCollectionDocument | ChangeStreamRefineCollectionShardKeyDocument;

/** @public */
declare interface ChangeStreamDocumentCollectionUUID {
  /**
   * The UUID (Binary subtype 4) of the collection that the operation was performed on.
   *
   * Only present when the `showExpandedEvents` flag is enabled.
   *
   * **NOTE:** collectionUUID will be converted to a NodeJS Buffer if the promoteBuffers
   *    flag is enabled.
   *
   * @sinceServerVersion 6.1.0
   */
  collectionUUID: Binary;
}

/** @public */
declare interface ChangeStreamDocumentCommon {
  /**
   * The id functions as an opaque token for use when resuming an interrupted
   * change stream.
   */
  _id: ResumeToken;
  /**
   * The timestamp from the oplog entry associated with the event.
   * For events that happened as part of a multi-document transaction, the associated change stream
   * notifications will have the same clusterTime value, namely the time when the transaction was committed.
   * On a sharded cluster, events that occur on different shards can have the same clusterTime but be
   * associated with different transactions or even not be associated with any transaction.
   * To identify events for a single transaction, you can use the combination of lsid and txnNumber in the change stream event document.
   */
  clusterTime?: Timestamp;
  /**
   * The transaction number.
   * Only present if the operation is part of a multi-document transaction.
   *
   * **NOTE:** txnNumber can be a Long if promoteLongs is set to false
   */
  txnNumber?: number;
  /**
   * The identifier for the session associated with the transaction.
   * Only present if the operation is part of a multi-document transaction.
   */
  lsid?: ServerSessionId;
  /**
   * When the change stream's backing aggregation pipeline contains the $changeStreamSplitLargeEvent
   * stage, events larger than 16MB will be split into multiple events and contain the
   * following information about which fragment the current event is.
   */
  splitEvent?: ChangeStreamSplitEvent;
}

/** @public */
declare interface ChangeStreamDocumentKey<TSchema extends Document_2 = Document_2> {
  /**
   * For unsharded collections this contains a single field `_id`.
   * For sharded collections, this will contain all the components of the shard key
   */
  documentKey: {
    _id: InferIdType<TSchema>;
    [shardKey: string]: any;
  };
}

/** @public */
declare interface ChangeStreamDocumentOperationDescription {
  /**
   * An description of the operation.
   *
   * Only present when the `showExpandedEvents` flag is enabled.
   *
   * @sinceServerVersion 6.1.0
   */
  operationDescription?: Document_2;
}

/**
 * @public
 * @see https://www.mongodb.com/docs/manual/reference/change-events/#dropdatabase-event
 */
declare interface ChangeStreamDropDatabaseDocument extends ChangeStreamDocumentCommon {
  /** Describes the type of operation represented in this change notification */
  operationType: 'dropDatabase';
  /** The database dropped */
  ns: {
    db: string;
  };
}

/**
 * @public
 * @see https://www.mongodb.com/docs/manual/reference/change-events/#drop-event
 */
declare interface ChangeStreamDropDocument extends ChangeStreamDocumentCommon, ChangeStreamDocumentCollectionUUID {
  /** Describes the type of operation represented in this change notification */
  operationType: 'drop';
  /** Namespace the drop event occurred on */
  ns: ChangeStreamNameSpace;
}

/**
 * Only present when the `showExpandedEvents` flag is enabled.
 * @public
 * @see https://www.mongodb.com/docs/manual/reference/change-events/dropIndexes/#mongodb-data-dropIndexes
 */
declare interface ChangeStreamDropIndexDocument extends ChangeStreamDocumentCommon, ChangeStreamDocumentCollectionUUID, ChangeStreamDocumentOperationDescription {
  /** Describes the type of operation represented in this change notification */
  operationType: 'dropIndexes';
}

/** @public */
declare type ChangeStreamEvents<TSchema extends Document_2 = Document_2, TChange extends Document_2 = ChangeStreamDocument<TSchema>> = {
  resumeTokenChanged(token: ResumeToken): void;
  init(response: any): void;
  more(response?: any): void;
  response(): void;
  end(): void;
  error(error: Error): void;
  change(change: TChange): void;
  /**
   * @remarks Note that the `close` event is currently emitted whenever the internal `ChangeStreamCursor`
   * instance is closed, which can occur multiple times for a given `ChangeStream` instance.
   *
   * TODO(NODE-6434): address this issue in NODE-6434
   */
  close(): void;
};

/**
 * @public
 * @see https://www.mongodb.com/docs/manual/reference/change-events/#insert-event
 */
declare interface ChangeStreamInsertDocument<TSchema extends Document_2 = Document_2> extends ChangeStreamDocumentCommon, ChangeStreamDocumentKey<TSchema>, ChangeStreamDocumentCollectionUUID {
  /** Describes the type of operation represented in this change notification */
  operationType: 'insert';
  /** This key will contain the document being inserted */
  fullDocument: TSchema;
  /** Namespace the insert event occurred on */
  ns: ChangeStreamNameSpace;
}

/**
 * @public
 * @see https://www.mongodb.com/docs/manual/reference/change-events/#invalidate-event
 */
declare interface ChangeStreamInvalidateDocument extends ChangeStreamDocumentCommon {
  /** Describes the type of operation represented in this change notification */
  operationType: 'invalidate';
}

/** @public */
declare interface ChangeStreamNameSpace {
  db: string;
  coll: string;
}

/**
 * Options that can be passed to a ChangeStream. Note that startAfter, resumeAfter, and startAtOperationTime are all mutually exclusive, and the server will error if more than one is specified.
 * @public
 */
declare interface ChangeStreamOptions extends Omit<AggregateOptions, 'writeConcern'> {
  /**
   * Allowed values: 'updateLookup', 'whenAvailable', 'required'.
   *
   * When set to 'updateLookup', the change notification for partial updates
   * will include both a delta describing the changes to the document as well
   * as a copy of the entire document that was changed from some time after
   * the change occurred.
   *
   * When set to 'whenAvailable', configures the change stream to return the
   * post-image of the modified document for replace and update change events
   * if the post-image for this event is available.
   *
   * When set to 'required', the same behavior as 'whenAvailable' except that
   * an error is raised if the post-image is not available.
   */
  fullDocument?: string;
  /**
   * Allowed values: 'whenAvailable', 'required', 'off'.
   *
   * The default is to not send a value, which is equivalent to 'off'.
   *
   * When set to 'whenAvailable', configures the change stream to return the
   * pre-image of the modified document for replace, update, and delete change
   * events if it is available.
   *
   * When set to 'required', the same behavior as 'whenAvailable' except that
   * an error is raised if the pre-image is not available.
   */
  fullDocumentBeforeChange?: string;
  /** The maximum amount of time for the server to wait on new documents to satisfy a change stream query. */
  maxAwaitTimeMS?: number;
  /**
   * Allows you to start a changeStream after a specified event.
   * @see https://www.mongodb.com/docs/manual/changeStreams/#resumeafter-for-change-streams
   */
  resumeAfter?: ResumeToken;
  /**
   * Similar to resumeAfter, but will allow you to start after an invalidated event.
   * @see https://www.mongodb.com/docs/manual/changeStreams/#startafter-for-change-streams
   */
  startAfter?: ResumeToken;
  /** Will start the changeStream after the specified operationTime. */
  startAtOperationTime?: OperationTime;
  /**
   * The number of documents to return per batch.
   * @see https://www.mongodb.com/docs/manual/reference/command/aggregate
   */
  batchSize?: number;
  /**
   * When enabled, configures the change stream to include extra change events.
   *
   * - createIndexes
   * - dropIndexes
   * - modify
   * - create
   * - shardCollection
   * - reshardCollection
   * - refineCollectionShardKey
   */
  showExpandedEvents?: boolean;
}

/**
 * @public
 * @see https://www.mongodb.com/docs/manual/reference/change-events/refineCollectionShardKey/#mongodb-data-refineCollectionShardKey
 */
declare interface ChangeStreamRefineCollectionShardKeyDocument extends ChangeStreamDocumentCommon, ChangeStreamDocumentCollectionUUID, ChangeStreamDocumentOperationDescription {
  /** Describes the type of operation represented in this change notification */
  operationType: 'refineCollectionShardKey';
}

/**
 * @public
 * @see https://www.mongodb.com/docs/manual/reference/change-events/#rename-event
 */
declare interface ChangeStreamRenameDocument extends ChangeStreamDocumentCommon, ChangeStreamDocumentCollectionUUID {
  /** Describes the type of operation represented in this change notification */
  operationType: 'rename';
  /** The new name for the `ns.coll` collection */
  to: {
    db: string;
    coll: string;
  };
  /** The "from" namespace that the rename occurred on */
  ns: ChangeStreamNameSpace;
}

/**
 * @public
 * @see https://www.mongodb.com/docs/manual/reference/change-events/#replace-event
 */
declare interface ChangeStreamReplaceDocument<TSchema extends Document_2 = Document_2> extends ChangeStreamDocumentCommon, ChangeStreamDocumentKey<TSchema> {
  /** Describes the type of operation represented in this change notification */
  operationType: 'replace';
  /** The fullDocument of a replace event represents the document after the insert of the replacement document */
  fullDocument: TSchema;
  /** Namespace the replace event occurred on */
  ns: ChangeStreamNameSpace;
  /**
   * Contains the pre-image of the modified or deleted document if the
   * pre-image is available for the change event and either 'required' or
   * 'whenAvailable' was specified for the 'fullDocumentBeforeChange' option
   * when creating the change stream. If 'whenAvailable' was specified but the
   * pre-image is unavailable, this will be explicitly set to null.
   */
  fullDocumentBeforeChange?: TSchema;
}

/**
 * @public
 * @see https://www.mongodb.com/docs/manual/reference/change-events/reshardCollection/#mongodb-data-reshardCollection
 */
declare interface ChangeStreamReshardCollectionDocument extends ChangeStreamDocumentCommon, ChangeStreamDocumentCollectionUUID, ChangeStreamDocumentOperationDescription {
  /** Describes the type of operation represented in this change notification */
  operationType: 'reshardCollection';
}

/**
 * @public
 * @see https://www.mongodb.com/docs/manual/reference/change-events/shardCollection/#mongodb-data-shardCollection
 */
declare interface ChangeStreamShardCollectionDocument extends ChangeStreamDocumentCommon, ChangeStreamDocumentCollectionUUID, ChangeStreamDocumentOperationDescription {
  /** Describes the type of operation represented in this change notification */
  operationType: 'shardCollection';
}

/** @public */
declare interface ChangeStreamSplitEvent {
  /** Which fragment of the change this is. */
  fragment: number;
  /** The total number of fragments. */
  of: number;
}

/**
 * @public
 * @see https://www.mongodb.com/docs/manual/reference/change-events/#update-event
 */
declare interface ChangeStreamUpdateDocument<TSchema extends Document_2 = Document_2> extends ChangeStreamDocumentCommon, ChangeStreamDocumentKey<TSchema>, ChangeStreamDocumentCollectionUUID {
  /** Describes the type of operation represented in this change notification */
  operationType: 'update';
  /**
   * This is only set if `fullDocument` is set to `'updateLookup'`
   * Contains the point-in-time post-image of the modified document if the
   * post-image is available and either 'required' or 'whenAvailable' was
   * specified for the 'fullDocument' option when creating the change stream.
   */
  fullDocument?: TSchema;
  /** Contains a description of updated and removed fields in this operation */
  updateDescription: UpdateDescription<TSchema>;
  /** Namespace the update event occurred on */
  ns: ChangeStreamNameSpace;
  /**
   * Contains the pre-image of the modified or deleted document if the
   * pre-image is available for the change event and either 'required' or
   * 'whenAvailable' was specified for the 'fullDocumentBeforeChange' option
   * when creating the change stream. If 'whenAvailable' was specified but the
   * pre-image is unavailable, this will be explicitly set to null.
   */
  fullDocumentBeforeChange?: TSchema;
}
declare interface CheckMetadataConsistencyOptions {
  cursor?: {
    batchSize: number;
  };
  checkIndexes?: 1;
}

/**
 * A mapping of namespace strings to collections schemas.
 * @public
 *
 * @example
 * ```ts
 * type MongoDBSchemas = {
 *   'db.books': Book;
 *   'db.authors': Author;
 * }
 *
 * const model: ClientBulkWriteModel<MongoDBSchemas> = {
 *   namespace: 'db.books'
 *   name: 'insertOne',
 *   document: { title: 'Practical MongoDB Aggregations', authorName: 3 } // error `authorName` cannot be number
 * };
 * ```
 *
 * The type of the `namespace` field narrows other parts of the BulkWriteModel to use the correct schema for type assertions.
 *
 */
declare type ClientBulkWriteModel<SchemaMap extends Record<string, Document_2> = Record<string, Document_2>> = { [Namespace in keyof SchemaMap]: AnyClientBulkWriteModel<SchemaMap[Namespace]> & {
  namespace: Namespace;
} }[keyof SchemaMap];

/** @public */
declare interface ClientBulkWriteOptions extends CommandOperationOptions {
  /**
   * If true, when an insert fails, don't execute the remaining writes.
   * If false, continue with remaining inserts when one fails.
   * @defaultValue `true` - inserts are ordered by default
   */
  ordered?: boolean;
  /**
   * Allow driver to bypass schema validation.
   * @defaultValue `false` - documents will be validated by default
   **/
  bypassDocumentValidation?: boolean;
  /** Map of parameter names and values that can be accessed using $$var (requires MongoDB 5.0). */
  let?: Document_2;
  /**
   * Whether detailed results for each successful operation should be included in the returned
   * BulkWriteResult.
   */
  verboseResults?: boolean;
}

/** @public */
declare interface ClientBulkWriteResult {
  /**
   * Whether the bulk write was acknowledged.
   */
  readonly acknowledged: boolean;
  /**
   * The total number of documents inserted across all insert operations.
   */
  readonly insertedCount: number;
  /**
   * The total number of documents upserted across all update operations.
   */
  readonly upsertedCount: number;
  /**
   * The total number of documents matched across all update operations.
   */
  readonly matchedCount: number;
  /**
   * The total number of documents modified across all update operations.
   */
  readonly modifiedCount: number;
  /**
   * The total number of documents deleted across all delete operations.
   */
  readonly deletedCount: number;
  /**
   * The results of each individual insert operation that was successfully performed.
   */
  readonly insertResults?: ReadonlyMap<number, ClientInsertOneResult>;
  /**
   * The results of each individual update operation that was successfully performed.
   */
  readonly updateResults?: ReadonlyMap<number, ClientUpdateResult>;
  /**
   * The results of each individual delete operation that was successfully performed.
   */
  readonly deleteResults?: ReadonlyMap<number, ClientDeleteResult>;
}
declare class ClientBulkWriteResult_2 extends ShellApiValueClass {
  acknowledged: boolean;
  insertedCount: number;
  matchedCount: number;
  modifiedCount: number;
  deletedCount: number;
  upsertedCount: number;
  insertResults?: ReadonlyMap<number, ClientInsertResult>;
  updateResults?: ReadonlyMap<number, ClientUpdateResult_2>;
  deleteResults?: ReadonlyMap<number, ClientDeleteResult_2>;
  constructor({
    acknowledged,
    insertedCount,
    matchedCount,
    modifiedCount,
    deletedCount,
    upsertedCount,
    insertResults,
    updateResults,
    deleteResults
  }: {
    acknowledged: boolean;
    insertedCount: number;
    matchedCount: number;
    modifiedCount: number;
    deletedCount: number;
    upsertedCount: number;
    insertResults?: ReadonlyMap<number, ClientInsertResult>;
    updateResults?: ReadonlyMap<number, ClientUpdateResult_2>;
    deleteResults?: ReadonlyMap<number, ClientDeleteResult_2>;
  });
}

/** @public */
declare interface ClientDeleteManyModel<TSchema> extends ClientWriteModel {
  name: 'deleteMany';
  /**
   * The filter used to determine if a document should be deleted.
   * For a deleteMany operation, all matches are removed.
   */
  filter: Filter<TSchema>;
  /** Specifies a collation. */
  collation?: CollationOptions;
  /** The index to use. If specified, then the query system will only consider plans using the hinted index. */
  hint?: Hint;
}

/** @public */
declare interface ClientDeleteOneModel<TSchema> extends ClientWriteModel {
  name: 'deleteOne';
  /**
   * The filter used to determine if a document should be deleted.
   * For a deleteOne operation, the first match is removed.
   */
  filter: Filter<TSchema>;
  /** Specifies a collation. */
  collation?: CollationOptions;
  /** The index to use. If specified, then the query system will only consider plans using the hinted index. */
  hint?: Hint;
}

/** @public */
declare interface ClientDeleteResult {
  /**
   * The number of documents that were deleted.
   */
  deletedCount: number;
}
declare type ClientDeleteResult_2 = {
  deletedCount: number;
};

/**
 * @public
 * The public interface for explicit in-use encryption
 */
declare class ClientEncryption {
  /* Excluded from this release type: _client */
  /* Excluded from this release type: _keyVaultNamespace */
  /* Excluded from this release type: _keyVaultClient */
  /* Excluded from this release type: _proxyOptions */
  /* Excluded from this release type: _tlsOptions */
  /* Excluded from this release type: _kmsProviders */
  /* Excluded from this release type: _timeoutMS */
  /* Excluded from this release type: _mongoCrypt */
  /* Excluded from this release type: _credentialProviders */
  /* Excluded from this release type: getMongoCrypt */
  /**
   * Create a new encryption instance
   *
   * @example
   * ```ts
   * new ClientEncryption(mongoClient, {
   *   keyVaultNamespace: 'client.encryption',
   *   kmsProviders: {
   *     local: {
   *       key: masterKey // The master key used for encryption/decryption. A 96-byte long Buffer
   *     }
   *   }
   * });
   * ```
   *
   * @example
   * ```ts
   * new ClientEncryption(mongoClient, {
   *   keyVaultNamespace: 'client.encryption',
   *   kmsProviders: {
   *     aws: {
   *       accessKeyId: AWS_ACCESS_KEY,
   *       secretAccessKey: AWS_SECRET_KEY
   *     }
   *   }
   * });
   * ```
   */
  constructor(client: MongoClient, options: ClientEncryptionOptions);
  /**
   * Creates a data key used for explicit encryption and inserts it into the key vault namespace
   *
   * @example
   * ```ts
   * // Using async/await to create a local key
   * const dataKeyId = await clientEncryption.createDataKey('local');
   * ```
   *
   * @example
   * ```ts
   * // Using async/await to create an aws key
   * const dataKeyId = await clientEncryption.createDataKey('aws', {
   *   masterKey: {
   *     region: 'us-east-1',
   *     key: 'xxxxxxxxxxxxxx' // CMK ARN here
   *   }
   * });
   * ```
   *
   * @example
   * ```ts
   * // Using async/await to create an aws key with a keyAltName
   * const dataKeyId = await clientEncryption.createDataKey('aws', {
   *   masterKey: {
   *     region: 'us-east-1',
   *     key: 'xxxxxxxxxxxxxx' // CMK ARN here
   *   },
   *   keyAltNames: [ 'mySpecialKey' ]
   * });
   * ```
   */
  createDataKey(provider: ClientEncryptionDataKeyProvider, options?: ClientEncryptionCreateDataKeyProviderOptions): Promise<UUID>;
  /**
   * Searches the keyvault for any data keys matching the provided filter.  If there are matches, rewrapManyDataKey then attempts to re-wrap the data keys using the provided options.
   *
   * If no matches are found, then no bulk write is performed.
   *
   * @example
   * ```ts
   * // rewrapping all data data keys (using a filter that matches all documents)
   * const filter = {};
   *
   * const result = await clientEncryption.rewrapManyDataKey(filter);
   * if (result.bulkWriteResult != null) {
   *  // keys were re-wrapped, results will be available in the bulkWrite object.
   * }
   * ```
   *
   * @example
   * ```ts
   * // attempting to rewrap all data keys with no matches
   * const filter = { _id: new Binary() } // assume _id matches no documents in the database
   * const result = await clientEncryption.rewrapManyDataKey(filter);
   *
   * if (result.bulkWriteResult == null) {
   *  // no keys matched, `bulkWriteResult` does not exist on the result object
   * }
   * ```
   */
  rewrapManyDataKey(filter: Filter<DataKey>, options: ClientEncryptionRewrapManyDataKeyProviderOptions): Promise<{
    bulkWriteResult?: BulkWriteResult;
  }>;
  /**
   * Deletes the key with the provided id from the keyvault, if it exists.
   *
   * @example
   * ```ts
   * // delete a key by _id
   * const id = new Binary(); // id is a bson binary subtype 4 object
   * const { deletedCount } = await clientEncryption.deleteKey(id);
   *
   * if (deletedCount != null && deletedCount > 0) {
   *   // successful deletion
   * }
   * ```
   *
   */
  deleteKey(_id: Binary): Promise<DeleteResult>;
  /**
   * Finds all the keys currently stored in the keyvault.
   *
   * This method will not throw.
   *
   * @returns a FindCursor over all keys in the keyvault.
   * @example
   * ```ts
   * // fetching all keys
   * const keys = await clientEncryption.getKeys().toArray();
   * ```
   */
  getKeys(): FindCursor<DataKey>;
  /**
   * Finds a key in the keyvault with the specified _id.
   *
   * Returns a promise that either resolves to a {@link DataKey} if a document matches the key or null if no documents
   * match the id.  The promise rejects with an error if an error is thrown.
   * @example
   * ```ts
   * // getting a key by id
   * const id = new Binary(); // id is a bson binary subtype 4 object
   * const key = await clientEncryption.getKey(id);
   * if (!key) {
   *  // key is null if there was no matching key
   * }
   * ```
   */
  getKey(_id: Binary): Promise<DataKey | null>;
  /**
   * Finds a key in the keyvault which has the specified keyAltName.
   *
   * @param keyAltName - a keyAltName to search for a key
   * @returns Returns a promise that either resolves to a {@link DataKey} if a document matches the key or null if no documents
   * match the keyAltName.  The promise rejects with an error if an error is thrown.
   * @example
   * ```ts
   * // get a key by alt name
   * const keyAltName = 'keyAltName';
   * const key = await clientEncryption.getKeyByAltName(keyAltName);
   * if (!key) {
   *  // key is null if there is no matching key
   * }
   * ```
   */
  getKeyByAltName(keyAltName: string): Promise<WithId<DataKey> | null>;
  /**
   * Adds a keyAltName to a key identified by the provided _id.
   *
   * This method resolves to/returns the *old* key value (prior to adding the new altKeyName).
   *
   * @param _id - The id of the document to update.
   * @param keyAltName - a keyAltName to search for a key
   * @returns Returns a promise that either resolves to a {@link DataKey} if a document matches the key or null if no documents
   * match the id.  The promise rejects with an error if an error is thrown.
   * @example
   * ```ts
   * // adding an keyAltName to a data key
   * const id = new Binary();  // id is a bson binary subtype 4 object
   * const keyAltName = 'keyAltName';
   * const oldKey = await clientEncryption.addKeyAltName(id, keyAltName);
   * if (!oldKey) {
   *  // null is returned if there is no matching document with an id matching the supplied id
   * }
   * ```
   */
  addKeyAltName(_id: Binary, keyAltName: string): Promise<WithId<DataKey> | null>;
  /**
   * Adds a keyAltName to a key identified by the provided _id.
   *
   * This method resolves to/returns the *old* key value (prior to removing the new altKeyName).
   *
   * If the removed keyAltName is the last keyAltName for that key, the `altKeyNames` property is unset from the document.
   *
   * @param _id - The id of the document to update.
   * @param keyAltName - a keyAltName to search for a key
   * @returns Returns a promise that either resolves to a {@link DataKey} if a document matches the key or null if no documents
   * match the id.  The promise rejects with an error if an error is thrown.
   * @example
   * ```ts
   * // removing a key alt name from a data key
   * const id = new Binary();  // id is a bson binary subtype 4 object
   * const keyAltName = 'keyAltName';
   * const oldKey = await clientEncryption.removeKeyAltName(id, keyAltName);
   *
   * if (!oldKey) {
   *  // null is returned if there is no matching document with an id matching the supplied id
   * }
   * ```
   */
  removeKeyAltName(_id: Binary, keyAltName: string): Promise<WithId<DataKey> | null>;
  /**
   * A convenience method for creating an encrypted collection.
   * This method will create data keys for any encryptedFields that do not have a `keyId` defined
   * and then create a new collection with the full set of encryptedFields.
   *
   * @param db - A Node.js driver Db object with which to create the collection
   * @param name - The name of the collection to be created
   * @param options - Options for createDataKey and for createCollection
   * @returns created collection and generated encryptedFields
   * @throws MongoCryptCreateDataKeyError - If part way through the process a createDataKey invocation fails, an error will be rejected that has the partial `encryptedFields` that were created.
   * @throws MongoCryptCreateEncryptedCollectionError - If creating the collection fails, an error will be rejected that has the entire `encryptedFields` that were created.
   */
  /*
  Creates a new collection with a list of encrypted fields each with unique and auto-created data encryption keys (DEKs). This method should be invoked on a connection instantiated with queryable encryption options.
  */
  createEncryptedCollection<TSchema extends Document_2 = Document_2>(db: Db, name: string, options: {
    provider: ClientEncryptionDataKeyProvider;
    createCollectionOptions: Omit<CreateCollectionOptions, 'encryptedFields'> & {
      encryptedFields: Document_2;
    };
    masterKey?: AWSEncryptionKeyOptions | AzureEncryptionKeyOptions | GCPEncryptionKeyOptions;
  }): {
    collection: Collection_2<TSchema>;
    encryptedFields: Document_2;
  };
  /**
   * Explicitly encrypt a provided value. Note that either `options.keyId` or `options.keyAltName` must
   * be specified. Specifying both `options.keyId` and `options.keyAltName` is considered an error.
   *
   * @param value - The value that you wish to serialize. Must be of a type that can be serialized into BSON
   * @param options -
   * @returns a Promise that either resolves with the encrypted value, or rejects with an error.
   *
   * @example
   * ```ts
   * // Encryption with async/await api
   * async function encryptMyData(value) {
   *   const keyId = await clientEncryption.createDataKey('local');
   *   return clientEncryption.encrypt(value, { keyId, algorithm: 'AEAD_AES_256_CBC_HMAC_SHA_512-Deterministic' });
   * }
   * ```
   *
   * @example
   * ```ts
   * // Encryption using a keyAltName
   * async function encryptMyData(value) {
   *   await clientEncryption.createDataKey('local', { keyAltNames: 'mySpecialKey' });
   *   return clientEncryption.encrypt(value, { keyAltName: 'mySpecialKey', algorithm: 'AEAD_AES_256_CBC_HMAC_SHA_512-Deterministic' });
   * }
   * ```
   */
  /*
  Encrypts the value using the specified encryptionKeyId and encryptionAlgorithm. encrypt supports explicit (manual) encryption of field values.
  */
  encrypt(value: unknown, options: ClientEncryptionEncryptOptions): Binary;
  /**
   * Encrypts a Match Expression or Aggregate Expression to query a range index.
   *
   * Only supported when queryType is "range" and algorithm is "Range".
   *
   * @param expression - a BSON document of one of the following forms:
   *  1. A Match Expression of this form:
   *      `{$and: [{<field>: {$gt: <value1>}}, {<field>: {$lt: <value2> }}]}`
   *  2. An Aggregate Expression of this form:
   *      `{$and: [{$gt: [<fieldpath>, <value1>]}, {$lt: [<fieldpath>, <value2>]}]}`
   *
   *    `$gt` may also be `$gte`. `$lt` may also be `$lte`.
   *
   * @param options -
   * @returns Returns a Promise that either resolves with the encrypted value or rejects with an error.
   */
  /*
  Encrypts an MQL expression using the specified encryptionKeyId and encryptionAlgorithm.
  */
  encryptExpression(expression: Document_2, options: ClientEncryptionEncryptOptions): Binary;
  /**
   * Explicitly decrypt a provided encrypted value
   *
   * @param value - An encrypted value
   * @returns a Promise that either resolves with the decrypted value, or rejects with an error
   *
   * @example
   * ```ts
   * // Decrypting value with async/await API
   * async function decryptMyValue(value) {
   *   return clientEncryption.decrypt(value);
   * }
   * ```
   */
  /*
  decrypts the encryptionValue if the current database connection was configured with access to the Key Management Service (KMS) and key vault used to encrypt encryptionValue.
  */
  decrypt<T = any>(value: Binary): T;
  /* Excluded from this release type: askForKMSCredentials */
  static get libmongocryptVersion(): string;
  /* Excluded from this release type: _encrypt */
}
declare class ClientEncryption_2 extends ShellApiWithMongoClass {
  _mongo: Mongo;
  _libmongocrypt: ClientEncryption;
  constructor(mongo: Mongo);
  [asPrintable](): string;
  encrypt(keyId: Binary, value: any, algorithmOrEncryptionOptions: ClientEncryptionEncryptOptions['algorithm'] | ClientEncryptionEncryptOptions): Promise<Binary>;
  decrypt(encryptedValue: Binary): Promise<any>;
  encryptExpression(keyId: Binary, value: Document_2, options: ClientEncryptionEncryptOptions): Promise<Binary>;
  createEncryptedCollection(dbName: string, collName: string, options: CreateEncryptedCollectionOptions): Promise<{
    collection: CollectionWithSchema;
    encryptedFields: Document_2;
  }>;
}

/**
 * @public
 * Options to provide when creating a new data key.
 */
declare interface ClientEncryptionCreateDataKeyProviderOptions {
  /**
   * Identifies a new KMS-specific key used to encrypt the new data key
   */
  masterKey?: AWSEncryptionKeyOptions | AzureEncryptionKeyOptions | GCPEncryptionKeyOptions | KMIPEncryptionKeyOptions | undefined;
  /**
   * An optional list of string alternate names used to reference a key.
   * If a key is created with alternate names, then encryption may refer to the key by the unique alternate name instead of by _id.
   */
  keyAltNames?: string[] | undefined;
  /** @experimental */
  keyMaterial?: Buffer | Binary;
  /* Excluded from this release type: timeoutContext */
}

/**
 * @public
 *
 * A data key provider.  Allowed values:
 *
 * - aws, gcp, local, kmip or azure
 * - (`mongodb-client-encryption>=6.0.1` only) a named key, in the form of:
 *    `aws:<name>`, `gcp:<name>`, `local:<name>`, `kmip:<name>`, `azure:<name>`
 *  where `name` is an alphanumeric string, underscores allowed.
 */
declare type ClientEncryptionDataKeyProvider = keyof KMSProviders;

/**
 * @public
 * Options to provide when encrypting data.
 */
declare interface ClientEncryptionEncryptOptions {
  /**
   * The algorithm to use for encryption.
   */
  algorithm: 'AEAD_AES_256_CBC_HMAC_SHA_512-Deterministic' | 'AEAD_AES_256_CBC_HMAC_SHA_512-Random' | 'Indexed' | 'Unindexed' | 'Range';
  /**
   * The id of the Binary dataKey to use for encryption
   */
  keyId?: Binary;
  /**
   * A unique string name corresponding to an already existing dataKey.
   */
  keyAltName?: string;
  /** The contention factor. */
  contentionFactor?: bigint | number;
  /**
   * The query type.
   */
  queryType?: 'equality' | 'range';
  /** The index options for a Queryable Encryption field supporting "range" queries.*/
  rangeOptions?: RangeOptions;
}

/**
 * @public
 * Additional settings to provide when creating a new `ClientEncryption` instance.
 */
declare interface ClientEncryptionOptions {
  /**
   * The namespace of the key vault, used to store encryption keys
   */
  keyVaultNamespace: string;
  /**
   * A MongoClient used to fetch keys from a key vault. Defaults to client.
   */
  keyVaultClient?: MongoClient | undefined;
  /**
   * Options for specific KMS providers to use
   */
  kmsProviders?: KMSProviders;
  /**
   * Options for user provided custom credential providers.
   */
  credentialProviders?: CredentialProviders;
  /**
   * Options for specifying a Socks5 proxy to use for connecting to the KMS.
   */
  proxyOptions?: ProxyOptions;
  /**
   * TLS options for kms providers to use.
   */
  tlsOptions?: CSFLEKMSTlsOptions;
  /**
   * @experimental
   *
   * The timeout setting to be used for all the operations on ClientEncryption.
   *
   * When provided, `timeoutMS` is used as the timeout for each operation executed on
   * the ClientEncryption object.  For example:
   *
   * ```typescript
   * const clientEncryption = new ClientEncryption(client, {
   *  timeoutMS: 1_000
   *  kmsProviders: { local: { key: '<KEY>' } }
   * });
   *
   * // `1_000` is used as the timeout for createDataKey call
   * await clientEncryption.createDataKey('local');
   * ```
   *
   * If `timeoutMS` is configured on the provided client, the client's `timeoutMS` value
   * will be used unless `timeoutMS` is also provided as a client encryption option.
   *
   * ```typescript
   * const client = new MongoClient('<uri>', { timeoutMS: 2_000 });
   *
   * // timeoutMS is set to 1_000 on clientEncryption
   * const clientEncryption = new ClientEncryption(client, {
   *  timeoutMS: 1_000
   *  kmsProviders: { local: { key: '<KEY>' } }
   * });
   * ```
   */
  timeoutMS?: number;
}

/**
 * @public
 * @experimental
 */
declare interface ClientEncryptionRewrapManyDataKeyProviderOptions {
  provider: ClientEncryptionDataKeyProvider;
  masterKey?: AWSEncryptionKeyOptions | AzureEncryptionKeyOptions | GCPEncryptionKeyOptions | KMIPEncryptionKeyOptions | undefined;
}

/**
 * @public
 *
 * TLS options to use when connecting. The spec specifically calls out which insecure
 * tls options are not allowed:
 *
 *  - tlsAllowInvalidCertificates
 *  - tlsAllowInvalidHostnames
 *  - tlsInsecure
 *
 * These options are not included in the type, and are ignored if provided.
 */
declare type ClientEncryptionTlsOptions = Pick<MongoClientOptions, 'tlsCAFile' | 'tlsCertificateKeyFile' | 'tlsCertificateKeyFilePassword'>;

/** @public */
declare interface ClientInsertOneModel<TSchema> extends ClientWriteModel {
  name: 'insertOne';
  /** The document to insert. */
  document: OptionalId<TSchema>;
}

/** @public */
declare interface ClientInsertOneResult {
  /**
   * The _id of the inserted document.
   */
  insertedId: any;
}
declare type ClientInsertResult = {
  insertedId: any;
};

/**
 * @public
 * @see https://github.com/mongodb/specifications/blob/master/source/mongodb-handshake/handshake.md#hello-command
 */
declare interface ClientMetadata {
  driver: {
    name: string;
    version: string;
  };
  os: {
    type: string;
    name?: NodeJS.Platform;
    architecture?: string;
    version?: string;
  };
  platform: string;
  application?: {
    name: string;
  };
  /** FaaS environment information */
  env?: {
    name: 'aws.lambda' | 'gcp.func' | 'azure.func' | 'vercel';
    timeout_sec?: Int32;
    memory_mb?: Int32;
    region?: string;
    url?: string;
  };
}

/** @public */
declare interface ClientReplaceOneModel<TSchema> extends ClientWriteModel {
  name: 'replaceOne';
  /**
   * The filter used to determine if a document should be replaced.
   * For a replaceOne operation, the first match is replaced.
   */
  filter: Filter<TSchema>;
  /** The document with which to replace the matched document. */
  replacement: WithoutId<TSchema>;
  /** Specifies a collation. */
  collation?: CollationOptions;
  /** The index to use. If specified, then the query system will only consider plans using the hinted index. */
  hint?: Hint;
  /** When true, creates a new document if no document matches the query. */
  upsert?: boolean;
}

/**
 * A class representing a client session on the server
 *
 * NOTE: not meant to be instantiated directly.
 * @public
 */
declare class ClientSession extends TypedEventEmitter<ClientSessionEvents> implements AsyncDisposable_2 {
  /* Excluded from this release type: client */
  /* Excluded from this release type: sessionPool */
  hasEnded: boolean;
  clientOptions: MongoOptions;
  supports: {
    causalConsistency: boolean;
  };
  clusterTime?: ClusterTime;
  operationTime?: Timestamp;
  explicit: boolean;
  /* Excluded from this release type: owner */
  defaultTransactionOptions: TransactionOptions;
  transaction: Transaction;
  /* Excluded from this release type: commitAttempted */
  readonly snapshotEnabled: boolean;
  /* Excluded from this release type: _serverSession */
  /* Excluded from this release type: snapshotTime */
  /* Excluded from this release type: pinnedConnection */
  /* Excluded from this release type: txnNumberIncrement */
  /**
   * @experimental
   * Specifies the time an operation in a given `ClientSession` will run until it throws a timeout error
   */
  timeoutMS?: number;
  /* Excluded from this release type: timeoutContext */
  /* Excluded from this release type: __constructor */
  /** The server id associated with this session */
  get id(): ServerSessionId | undefined;
  get serverSession(): ServerSession;
  get loadBalanced(): boolean;
  /* Excluded from this release type: pin */
  /* Excluded from this release type: unpin */
  get isPinned(): boolean;
  /**
   * Frees any client-side resources held by the current session.  If a session is in a transaction,
   * the transaction is aborted.
   *
   * Does not end the session on the server.
   *
   * @param options - Optional settings. Currently reserved for future use
   */
  endSession(options?: EndSessionOptions): Promise<void>;
  /* Excluded from this release type: [Symbol.asyncDispose] */
  /* Excluded from this release type: asyncDispose */
  /**
   * Advances the operationTime for a ClientSession.
   *
   * @param operationTime - the `BSON.Timestamp` of the operation type it is desired to advance to
   */
  advanceOperationTime(operationTime: Timestamp): void;
  /**
   * Advances the clusterTime for a ClientSession to the provided clusterTime of another ClientSession
   *
   * @param clusterTime - the $clusterTime returned by the server from another session in the form of a document containing the `BSON.Timestamp` clusterTime and signature
   */
  advanceClusterTime(clusterTime: ClusterTime): void;
  /**
   * Used to determine if this session equals another
   *
   * @param session - The session to compare to
   */
  equals(session: ClientSession): boolean;
  /**
   * Increment the transaction number on the internal ServerSession
   *
   * @privateRemarks
   * This helper increments a value stored on the client session that will be
   * added to the serverSession's txnNumber upon applying it to a command.
   * This is because the serverSession is lazily acquired after a connection is obtained
   */
  incrementTransactionNumber(): void;
  /** @returns whether this session is currently in a transaction or not */
  inTransaction(): boolean;
  /**
   * Starts a new transaction with the given options.
   *
   * @remarks
   * **IMPORTANT**: Running operations in parallel is not supported during a transaction. The use of `Promise.all`,
   * `Promise.allSettled`, `Promise.race`, etc to parallelize operations inside a transaction is
   * undefined behaviour.
   *
   * @param options - Options for the transaction
   */
  startTransaction(options?: TransactionOptions): void;
  /**
   * Commits the currently active transaction in this session.
   *
   * @param options - Optional options, can be used to override `defaultTimeoutMS`.
   */
  commitTransaction(options?: {
    timeoutMS?: number;
  }): Promise<void>;
  /**
   * Aborts the currently active transaction in this session.
   *
   * @param options - Optional options, can be used to override `defaultTimeoutMS`.
   */
  abortTransaction(options?: {
    timeoutMS?: number;
  }): Promise<void>;
  /* Excluded from this release type: abortTransaction */
  /**
   * This is here to ensure that ClientSession is never serialized to BSON.
   */
  toBSON(): never;
  /**
   * Starts a transaction and runs a provided function, ensuring the commitTransaction is always attempted when all operations run in the function have completed.
   *
   * **IMPORTANT:** This method requires the function passed in to return a Promise. That promise must be made by `await`-ing all operations in such a way that rejections are propagated to the returned promise.
   *
   * **IMPORTANT:** Running operations in parallel is not supported during a transaction. The use of `Promise.all`,
   * `Promise.allSettled`, `Promise.race`, etc to parallelize operations inside a transaction is
   * undefined behaviour.
   *
   * **IMPORTANT:** When running an operation inside a `withTransaction` callback, if it is not
   * provided the explicit session in its options, it will not be part of the transaction and it will not respect timeoutMS.
   *
   *
   * @remarks
   * - If all operations successfully complete and the `commitTransaction` operation is successful, then the provided function will return the result of the provided function.
   * - If the transaction is unable to complete or an error is thrown from within the provided function, then the provided function will throw an error.
   *   - If the transaction is manually aborted within the provided function it will not throw.
   * - If the driver needs to attempt to retry the operations, the provided function may be called multiple times.
   *
   * Checkout a descriptive example here:
   * @see https://www.mongodb.com/blog/post/quick-start-nodejs--mongodb--how-to-implement-transactions
   *
   * If a command inside withTransaction fails:
   * - It may cause the transaction on the server to be aborted.
   * - This situation is normally handled transparently by the driver.
   * - However, if the application catches such an error and does not rethrow it, the driver will not be able to determine whether the transaction was aborted or not.
   * - The driver will then retry the transaction indefinitely.
   *
   * To avoid this situation, the application must not silently handle errors within the provided function.
   * If the application needs to handle errors within, it must await all operations such that if an operation is rejected it becomes the rejection of the callback function passed into withTransaction.
   *
   * @param fn - callback to run within a transaction
   * @param options - optional settings for the transaction
   * @returns A raw command response or undefined
   */
  withTransaction<T = any>(fn: WithTransactionCallback<T>, options?: TransactionOptions & {
    /**
     * Configures a timeoutMS expiry for the entire withTransactionCallback.
     *
     * @remarks
     * - The remaining timeout will not be applied to callback operations that do not use the ClientSession.
     * - Overriding timeoutMS for operations executed using the explicit session inside the provided callback will result in a client-side error.
     */
    timeoutMS?: number;
  }): Promise<T>;
}

/** @public */
declare type ClientSessionEvents = {
  ended(session: ClientSession): void;
};

/** @public */
declare interface ClientSessionOptions {
  /** Whether causal consistency should be enabled on this session */
  causalConsistency?: boolean;
  /** Whether all read operations should be read from the same snapshot for this session (NOTE: not compatible with `causalConsistency=true`) */
  snapshot?: boolean;
  /** The default TransactionOptions to use for transactions started on this session. */
  defaultTransactionOptions?: TransactionOptions;
  /**
   * @public
   * @experimental
   * An overriding timeoutMS value to use for a client-side timeout.
   * If not provided the session uses the timeoutMS specified on the MongoClient.
   */
  defaultTimeoutMS?: number;
  /* Excluded from this release type: owner */
  /* Excluded from this release type: explicit */
  /* Excluded from this release type: initialClusterTime */
}
declare interface ClientSideFieldLevelEncryptionOptions {
  keyVaultClient?: Mongo;
  keyVaultNamespace: string;
  kmsProviders: KMSProviders;
  schemaMap?: Document_2;
  bypassAutoEncryption?: boolean;
  explicitEncryptionOnly?: boolean;
  tlsOptions?: { [k in keyof KMSProviders]?: ClientEncryptionTlsOptions };
  encryptedFieldsMap?: Document_2;
  bypassQueryAnalysis?: boolean;
}

/** @public */
declare interface ClientUpdateManyModel<TSchema> extends ClientWriteModel {
  name: 'updateMany';
  /**
   * The filter used to determine if a document should be updated.
   * For an updateMany operation, all matches are updated.
   */
  filter: Filter<TSchema>;
  /**
   * The modifications to apply. The value can be either:
   * UpdateFilter<Document> - A document that contains update operator expressions,
   * Document[] - an aggregation pipeline.
   */
  update: UpdateFilter<TSchema> | Document_2[];
  /** A set of filters specifying to which array elements an update should apply. */
  arrayFilters?: Document_2[];
  /** Specifies a collation. */
  collation?: CollationOptions;
  /** The index to use. If specified, then the query system will only consider plans using the hinted index. */
  hint?: Hint;
  /** When true, creates a new document if no document matches the query. */
  upsert?: boolean;
}

/** @public */
declare interface ClientUpdateOneModel<TSchema> extends ClientWriteModel {
  name: 'updateOne';
  /**
   * The filter used to determine if a document should be updated.
   * For an updateOne operation, the first match is updated.
   */
  filter: Filter<TSchema>;
  /**
   * The modifications to apply. The value can be either:
   * UpdateFilter<Document> - A document that contains update operator expressions,
   * Document[] - an aggregation pipeline.
   */
  update: UpdateFilter<TSchema> | Document_2[];
  /** A set of filters specifying to which array elements an update should apply. */
  arrayFilters?: Document_2[];
  /** Specifies a collation. */
  collation?: CollationOptions;
  /** The index to use. If specified, then the query system will only consider plans using the hinted index. */
  hint?: Hint;
  /** When true, creates a new document if no document matches the query. */
  upsert?: boolean;
}

/** @public */
declare interface ClientUpdateResult {
  /**
   * The number of documents that matched the filter.
   */
  matchedCount: number;
  /**
   * The number of documents that were modified.
   */
  modifiedCount: number;
  /**
   * The _id field of the upserted document if an upsert occurred.
   *
   * It MUST be possible to discern between a BSON Null upserted ID value and this field being
   * unset. If necessary, drivers MAY add a didUpsert boolean field to differentiate between
   * these two cases.
   */
  upsertedId?: any;
  /**
   * Determines if the upsert did include an _id, which includes the case of the _id being null.
   */
  didUpsert: boolean;
}
declare type ClientUpdateResult_2 = {
  matchedCount: number;
  modifiedCount: number;
  upsertedId?: any;
  didUpsert: boolean;
};

/** @public */
declare interface ClientWriteModel {
  /**
   * The namespace for the write.
   *
   * A namespace is a combination of the database name and the name of the collection: `<database-name>.<collection>`.
   * All documents belong to a namespace.
   *
   * @see https://www.mongodb.com/docs/manual/reference/limits/#std-label-faq-dev-namespace
   */
  namespace: string;
}
declare interface Closable {
  close(force: boolean): Promise<void>;
  suspend(): Promise<() => Promise<void>>;
}

/** @public
 * Configuration options for clustered collections
 * @see https://www.mongodb.com/docs/manual/core/clustered-collections/
 */
declare interface ClusteredCollectionOptions extends Document_2 {
  name?: string;
  key: Document_2;
  unique: boolean;
}

/**
 * @public
 * Gossiped in component for the cluster time tracking the state of user databases
 * across the cluster. It may optionally include a signature identifying the process that
 * generated such a value.
 */
declare interface ClusterTime {
  clusterTime: Timestamp;
  /** Used to validate the identity of a request or response's ClusterTime. */
  signature?: {
    hash: Binary;
    keyId: Long;
  };
}

/** @public */
declare interface CollationOptions {
  locale: string;
  caseLevel?: boolean;
  caseFirst?: string;
  strength?: number;
  numericOrdering?: boolean;
  alternate?: string;
  maxVariable?: string;
  backwards?: boolean;
  normalization?: boolean;
}
declare class Collection<M extends GenericServerSideSchema = GenericServerSideSchema, D extends GenericDatabaseSchema = M[keyof M], C extends GenericCollectionSchema = D[keyof D], N extends StringKey<D> = StringKey<D>> extends ShellApiWithMongoClass {
  _mongo: Mongo<M>;
  _database: DatabaseWithSchema<M, D>;
  _name: N;
  constructor(mongo: Mongo<M>, database: DatabaseWithSchema<M, D> | Database<M, D>, name: N);
  [namespaceInfo](): Namespace;
  [asPrintable](): string;
  private _emitCollectionApiCall;
  /*
  Calculates aggregate values for the data in a collection or a view.
  */
  aggregate(pipeline: Document_2[], options: AggregateOptions & {
    explain: ExplainVerbosityLike;
  }): Document_2;
  /*
  Calculates aggregate values for the data in a collection or a view.
  */
  aggregate(pipeline: Document_2[], options?: AggregateOptions): AggregationCursor_2;
  /*
  Calculates aggregate values for the data in a collection or a view.
  */
  aggregate(...stages: Document_2[]): AggregationCursor_2;
  /*
  Performs multiple write operations with controls for order of execution.
  */
  bulkWrite(operations: AnyBulkWriteOperation[], options?: BulkWriteOptions): BulkWriteResult_2;
  /*
  Returns the count of documents that would match a find() query for the collection or view.
  */
  count(query?: {}, options?: CountOptions): number;
  /*
  Returns the count of documents that match the query for a collection or view.
  */
  countDocuments(query?: Document_2, options?: CountDocumentsOptions): number;
  /*
  Removes all documents that match the filter from a collection.
  */
  deleteMany(filter: Document_2, options?: DeleteOptions): DeleteResult_2 | Document_2;
  /*
  Removes a single document from a collection.
  */
  deleteOne(filter: Document_2, options?: DeleteOptions): DeleteResult_2 | Document_2;
  /*
  Finds the distinct values for a specified field across a single collection or view and returns the results in an array.
  */
  distinct(field: string): Document_2;
  /*
  Finds the distinct values for a specified field across a single collection or view and returns the results in an array.
  */
  distinct(field: string, query: Document_2): Document_2;
  /*
  Finds the distinct values for a specified field across a single collection or view and returns the results in an array.
  */
  distinct(field: string, query: Document_2, options: DistinctOptions): Document_2;
  /*
  Returns the count of all documents in a collection or view.
  */
  estimatedDocumentCount(options?: EstimatedDocumentCountOptions): number;
  /*
  Selects documents in a collection or view.
  */
  find(query?: Document_2, projection?: Document_2, options?: FindOptions): Cursor;
  /*
  Modifies and returns a single document.
  */
  findAndModify(options: FindAndModifyMethodShellOptions): Document_2 | null;
  /*
  Selects documents in a collection or view.
  */
  findOne(query?: Document_2, projection?: Document_2, options?: FindOptions): C['schema'] | null;
  /*
  Renames a collection.
  */
  renameCollection(newName: string, dropTarget?: boolean): Document_2;
  /*
  Deletes a single document based on the filter and sort criteria, returning the deleted document.
  */
  findOneAndDelete(filter: Document_2, options?: FindOneAndDeleteOptions): Document_2 | null;
  /*
  Modifies and replaces a single document based on the filter and sort criteria.
  */
  findOneAndReplace(filter: Document_2, replacement: Document_2, options?: FindAndModifyShellOptions<FindOneAndReplaceOptions>): Document_2;
  /*
  Updates a single document based on the filter and sort criteria.
  */
  findOneAndUpdate(filter: Document_2, update: Document_2 | Document_2[], options?: FindAndModifyShellOptions<FindOneAndUpdateOptions>): Document_2;
  /*
  Inserts a document or documents into a collection.
  */
  insert(docs: Document_2 | Document_2[], options?: BulkWriteOptions): InsertManyResult_2;
  /*
  Inserts multiple documents into a collection.
  */
  insertMany(docs: Document_2[], options?: BulkWriteOptions): InsertManyResult_2;
  /*
  Inserts a document into a collection.
  */
  insertOne(doc: Document_2, options?: InsertOneOptions): InsertOneResult_2;
  /*
  Checks if a collection is capped
  */
  isCapped(): boolean;
  /*
  Removes documents from a collection.
  */
  remove(query: Document_2, options?: boolean | RemoveShellOptions): DeleteResult_2 | Document_2;
  /*
  Replaces a single document within the collection based on the filter.
  */
  replaceOne(filter: Document_2, replacement: Document_2, options?: ReplaceOptions): UpdateResult_2;
  /*
  Modifies an existing document or documents in a collection.
  */
  update(filter: Document_2, update: Document_2, options?: UpdateOptions & {
    multi?: boolean;
  }): UpdateResult_2 | Document_2;
  /*
  Updates all documents that match the specified filter for a collection.
  */
  updateMany(filter: Document_2, update: Document_2, options?: UpdateOptions): UpdateResult_2 | Document_2;
  /*
  Updates a single document within the collection based on the filter.
  */
  updateOne(filter: Document_2, update: Document_2, options?: UpdateOptions): UpdateResult_2 | Document_2;
  /*
  Compacts structured encryption data
  */
  compactStructuredEncryptionData(): Document_2;
  /*
  calls {convertToCapped:'coll', size:maxBytes}} command
  */
  convertToCapped(size: number): Document_2;
  _createIndexes(keyPatterns: Document_2[], options?: CreateIndexesOptions, commitQuorum?: number | string): Promise<string[]>;
  /*
  Creates one or more indexes on a collection
  */
  createIndexes(keyPatterns: Document_2[], options?: CreateIndexesOptions, commitQuorum?: number | string): string[];
  /*
  Creates one index on a collection
  */
  createIndex(keys: Document_2, options?: CreateIndexesOptions, commitQuorum?: number | string): string;
  /*
  Creates one index on a collection
  */
  ensureIndex(keys: Document_2, options?: CreateIndexesOptions, commitQuorum?: number | string): Document_2;
  /*
  Returns an array that holds a list of documents that identify and describe the existing indexes on the collection.
  */
  getIndexes(): Document_2[];
  /*
  Alias for getIndexes. Returns an array that holds a list of documents that identify and describe the existing indexes on the collection.
  */
  getIndexSpecs(): Document_2[];
  /*
  Alias for getIndexes. Returns an array that holds a list of documents that identify and describe the existing indexes on the collection.
  */
  getIndices(): Document_2[];
  /*
  Return an array of key patterns for indexes defined on collection
  */
  getIndexKeys(): Document_2[];
  /*
  Drops the specified index or indexes (except the index on the _id field) from a collection.
  */
  dropIndexes(indexes?: string | string[] | Document_2 | Document_2[]): Document_2;
  /*
  Drops or removes the specified index from a collection.
  */
  dropIndex(index: string | Document_2): Document_2;
  _getSingleStorageStatValue(key: string): Promise<number>;
  /*
  Reports the total size used by the indexes on a collection.
  */
  totalIndexSize(...args: any[]): number;
  /*
  Rebuilds all existing indexes on a collection.
  */
  reIndex(): Document_2;
  /*
  Get current database.
  */
  getDB(): DatabaseWithSchema<M, D>;
  /*
  Returns the Mongo object.
  */
  getMongo(): Mongo<M>;
  /*
  This method provides a wrapper around the size output of the collStats (i.e. db.collection.stats()) command.
  */
  dataSize(): number;
  /*
  The total amount of storage allocated to this collection for document storage.
  */
  storageSize(): number;
  /*
  The total size in bytes of the data in the collection plus the size of every index on the collection.
  */
  totalSize(): number;
  /*
  Removes a collection or view from the database.
  */
  drop(options?: DropCollectionOptions): boolean;
  /*
  Returns collection infos if the collection exists or null otherwise.
  */
  exists(): Document_2;
  /*
  Returns the name of the collection prefixed with the database name.
  */
  getFullName(): string;
  /*
  Returns the name of the collection.
  */
  getName(): N;
  /*
  Runs a db command with the given name where the first param is the collection name.
  */
  runCommand(commandName: string | Document_2, options?: RunCommandOptions): Document_2;
  /*
  Returns information on the query plan.
  */
  explain(verbosity?: ExplainVerbosityLike): Explainable;
  _getLegacyCollStats(scale: number): Promise<Document_2>;
  _aggregateAndScaleCollStats(collStats: Document_2[], scale: number): Promise<Document_2>;
  _getAggregatedCollStats(scale: number): Promise<Document_2>;
  /*
  Returns statistics about the collection.
  */
  stats(originalOptions?: Document_2 | number): Document_2;
  /*
  returns the $latencyStats aggregation for the collection. Takes an options document with an optional boolean 'histograms' field.
  */
  latencyStats(options?: Document_2): Document_2[];
  /*
  Initializes an ordered bulk command. Returns an instance of Bulk
  */
  initializeOrderedBulkOp(): Bulk;
  /*
  Initializes an unordered bulk command. Returns an instance of Bulk
  */
  initializeUnorderedBulkOp(): Bulk;
  /*
  Returns an interface to access the query plan cache for a collection. The interface provides methods to view and clear the query plan cache.
  */
  getPlanCache(): PlanCache;
  /*
  Calls the mapReduce command
  */
  mapReduce(map: Function | string, reduce: Function | string, optionsOrOutString: MapReduceShellOptions): Document_2;
  /*
  Calls the validate command. Default full value is false
  */
  validate(options?: boolean | Document_2): Document_2;
  /*
  Calls the getShardVersion command
  */
  getShardVersion(): Document_2;
  _getShardedCollectionInfo(config: DatabaseWithSchema<M, D>, collStats: Document_2[]): Promise<Document_2>;
  /*
  Prints the data distribution statistics for a sharded collection.
  */
  getShardDistribution(): CommandResult<GetShardDistributionResult>;
  /*
  Opens a change stream cursor on the collection
  */
  watch(pipeline?: Document_2[] | ChangeStreamOptions, options?: ChangeStreamOptions): ChangeStreamCursor;
  /*
  Hides an existing index from the query planner.
  */
  hideIndex(index: string | Document_2): Document_2;
  /*
  Unhides an existing index from the query planner.
  */
  unhideIndex(index: string | Document_2): Document_2;
  /*
  Returns metrics for evaluating a shard key. That is, ‘key’ can be a candidate shard key for an unsharded or sharded collection, or the current shard key for a sharded collection.
  */
  analyzeShardKey(key: Document_2, options?: Document_2): Document_2;
  /*
  Starts or stops collecting metrics about reads and writes against an unsharded or sharded collection.
  */
  configureQueryAnalyzer(options: Document_2): Document_2;
  /*
  Returns a cursor with information about metadata inconsistencies
  */
  checkMetadataConsistency(options?: CheckMetadataConsistencyOptions): RunCommandCursor_2;
  /*
  Returns an array that holds a list of documents that identify and describe the existing search indexes on the collection.
  */
  getSearchIndexes(indexName?: string | Document_2, options?: Document_2): Document_2[];
  /*
  Creates one search indexes on a collection
  */
  createSearchIndex(name: string, definition: SearchIndexDefinition): string;
  /*
  Creates one search indexes on a collection
  */
  createSearchIndex(name: string, type: 'search' | 'vectorSearch', definition: SearchIndexDefinition): string;
  /*
  Creates one search indexes on a collection
  */
  createSearchIndex(definition: SearchIndexDefinition, type?: 'search' | 'vectorSearch'): string;
  /*
  Creates one search indexes on a collection
  */
  createSearchIndex(description: SearchIndexDescription): string;
  /*
  Creates one or more search indexes on a collection
  */
  createSearchIndexes(specs: SearchIndexDescription[]): string[];
  /*
  Drops or removes the specified search index from a collection.
  */
  dropSearchIndex(indexName: string): void;
  /*
  Updates the sepecified search index.
  */
  updateSearchIndex(indexName: string, definition: Document_2): void;
}

/**
 * The **Collection** class is an internal class that embodies a MongoDB collection
 * allowing for insert/find/update/delete and other command operation on that MongoDB collection.
 *
 * **COLLECTION Cannot directly be instantiated**
 * @public
 *
 * @example
 * ```ts
 * import { MongoClient } from 'mongodb';
 *
 * interface Pet {
 *   name: string;
 *   kind: 'dog' | 'cat' | 'fish';
 * }
 *
 * const client = new MongoClient('mongodb://localhost:27017');
 * const pets = client.db().collection<Pet>('pets');
 *
 * const petCursor = pets.find();
 *
 * for await (const pet of petCursor) {
 *   console.log(`${pet.name} is a ${pet.kind}!`);
 * }
 * ```
 */
declare class Collection_2<TSchema extends Document_2 = Document_2> {
  /* Excluded from this release type: s */
  /* Excluded from this release type: client */
  /* Excluded from this release type: __constructor */
  /**
   * The name of the database this collection belongs to
   */
  get dbName(): string;
  /**
   * The name of this collection
   */
  get collectionName(): string;
  /**
   * The namespace of this collection, in the format `${this.dbName}.${this.collectionName}`
   */
  get namespace(): string;
  /* Excluded from this release type: fullNamespace */
  /**
   * The current readConcern of the collection. If not explicitly defined for
   * this collection, will be inherited from the parent DB
   */
  get readConcern(): ReadConcern | undefined;
  /**
   * The current readPreference of the collection. If not explicitly defined for
   * this collection, will be inherited from the parent DB
   */
  get readPreference(): ReadPreference | undefined;
  get bsonOptions(): BSONSerializeOptions;
  /**
   * The current writeConcern of the collection. If not explicitly defined for
   * this collection, will be inherited from the parent DB
   */
  get writeConcern(): WriteConcern | undefined;
  /** The current index hint for the collection */
  get hint(): Hint | undefined;
  set hint(v: Hint | undefined);
  get timeoutMS(): number | undefined;
  /**
   * Inserts a single document into MongoDB. If documents passed in do not contain the **_id** field,
   * one will be added to each of the documents missing it by the driver, mutating the document. This behavior
   * can be overridden by setting the **forceServerObjectId** flag.
   *
   * @param doc - The document to insert
   * @param options - Optional settings for the command
   */
  insertOne(doc: OptionalUnlessRequiredId<TSchema>, options?: InsertOneOptions): Promise<InsertOneResult<TSchema>>;
  /**
   * Inserts an array of documents into MongoDB. If documents passed in do not contain the **_id** field,
   * one will be added to each of the documents missing it by the driver, mutating the document. This behavior
   * can be overridden by setting the **forceServerObjectId** flag.
   *
   * @param docs - The documents to insert
   * @param options - Optional settings for the command
   */
  insertMany(docs: ReadonlyArray<OptionalUnlessRequiredId<TSchema>>, options?: BulkWriteOptions): Promise<InsertManyResult<TSchema>>;
  /**
   * Perform a bulkWrite operation without a fluent API
   *
   * Legal operation types are
   * - `insertOne`
   * - `replaceOne`
   * - `updateOne`
   * - `updateMany`
   * - `deleteOne`
   * - `deleteMany`
   *
   * If documents passed in do not contain the **_id** field,
   * one will be added to each of the documents missing it by the driver, mutating the document. This behavior
   * can be overridden by setting the **forceServerObjectId** flag.
   *
   * @param operations - Bulk operations to perform
   * @param options - Optional settings for the command
   * @throws MongoDriverError if operations is not an array
   */
  bulkWrite(operations: ReadonlyArray<AnyBulkWriteOperation<TSchema>>, options?: BulkWriteOptions): Promise<BulkWriteResult>;
  /**
   * Update a single document in a collection
   *
   * The value of `update` can be either:
   * - UpdateFilter<TSchema> - A document that contains update operator expressions,
   * - Document[] - an aggregation pipeline.
   *
   * @param filter - The filter used to select the document to update
   * @param update - The modifications to apply
   * @param options - Optional settings for the command
   */
  updateOne(filter: Filter<TSchema>, update: UpdateFilter<TSchema> | Document_2[], options?: UpdateOptions): Promise<UpdateResult<TSchema>>;
  /**
   * Replace a document in a collection with another document
   *
   * @param filter - The filter used to select the document to replace
   * @param replacement - The Document that replaces the matching document
   * @param options - Optional settings for the command
   */
  replaceOne(filter: Filter<TSchema>, replacement: WithoutId<TSchema>, options?: ReplaceOptions): Promise<UpdateResult<TSchema>>;
  /**
   * Update multiple documents in a collection
   *
   * The value of `update` can be either:
   * - UpdateFilter<TSchema> - A document that contains update operator expressions,
   * - Document[] - an aggregation pipeline.
   *
   * @param filter - The filter used to select the document to update
   * @param update - The modifications to apply
   * @param options - Optional settings for the command
   */
  updateMany(filter: Filter<TSchema>, update: UpdateFilter<TSchema> | Document_2[], options?: UpdateOptions): Promise<UpdateResult<TSchema>>;
  /**
   * Delete a document from a collection
   *
   * @param filter - The filter used to select the document to remove
   * @param options - Optional settings for the command
   */
  deleteOne(filter?: Filter<TSchema>, options?: DeleteOptions): Promise<DeleteResult>;
  /**
   * Delete multiple documents from a collection
   *
   * @param filter - The filter used to select the documents to remove
   * @param options - Optional settings for the command
   */
  deleteMany(filter?: Filter<TSchema>, options?: DeleteOptions): Promise<DeleteResult>;
  /**
   * Rename the collection.
   *
   * @remarks
   * This operation does not inherit options from the Db or MongoClient.
   *
   * @param newName - New name of of the collection.
   * @param options - Optional settings for the command
   */
  rename(newName: string, options?: RenameOptions): Promise<Collection_2>;
  /**
   * Drop the collection from the database, removing it permanently. New accesses will create a new collection.
   *
   * @param options - Optional settings for the command
   */
  drop(options?: DropCollectionOptions): Promise<boolean>;
  /**
   * Fetches the first document that matches the filter
   *
   * @param filter - Query for find Operation
   * @param options - Optional settings for the command
   */
  findOne(): Promise<WithId<TSchema> | null>;
  findOne(filter: Filter<TSchema>): Promise<WithId<TSchema> | null>;
  findOne(filter: Filter<TSchema>, options: Omit<FindOptions, 'timeoutMode'> & Abortable): Promise<WithId<TSchema> | null>;
  findOne<T = TSchema>(): Promise<T | null>;
  findOne<T = TSchema>(filter: Filter<TSchema>): Promise<T | null>;
  findOne<T = TSchema>(filter: Filter<TSchema>, options?: Omit<FindOptions, 'timeoutMode'> & Abortable): Promise<T | null>;
  /**
   * Creates a cursor for a filter that can be used to iterate over results from MongoDB
   *
   * @param filter - The filter predicate. If unspecified, then all documents in the collection will match the predicate
   */
  find(): FindCursor<WithId<TSchema>>;
  find(filter: Filter<TSchema>, options?: FindOptions & Abortable): FindCursor<WithId<TSchema>>;
  find<T extends Document_2>(filter: Filter<TSchema>, options?: FindOptions & Abortable): FindCursor<T>;
  /**
   * Returns the options of the collection.
   *
   * @param options - Optional settings for the command
   */
  options(options?: OperationOptions): Promise<Document_2>;
  /**
   * Returns if the collection is a capped collection
   *
   * @param options - Optional settings for the command
   */
  isCapped(options?: OperationOptions): Promise<boolean>;
  /**
   * Creates an index on the db and collection collection.
   *
   * @param indexSpec - The field name or index specification to create an index for
   * @param options - Optional settings for the command
   *
   * @example
   * ```ts
   * const collection = client.db('foo').collection('bar');
   *
   * await collection.createIndex({ a: 1, b: -1 });
   *
   * // Alternate syntax for { c: 1, d: -1 } that ensures order of indexes
   * await collection.createIndex([ [c, 1], [d, -1] ]);
   *
   * // Equivalent to { e: 1 }
   * await collection.createIndex('e');
   *
   * // Equivalent to { f: 1, g: 1 }
   * await collection.createIndex(['f', 'g'])
   *
   * // Equivalent to { h: 1, i: -1 }
   * await collection.createIndex([ { h: 1 }, { i: -1 } ]);
   *
   * // Equivalent to { j: 1, k: -1, l: 2d }
   * await collection.createIndex(['j', ['k', -1], { l: '2d' }])
   * ```
   */
  createIndex(indexSpec: IndexSpecification, options?: CreateIndexesOptions): Promise<string>;
  /**
   * Creates multiple indexes in the collection, this method is only supported for
   * MongoDB 2.6 or higher. Earlier version of MongoDB will throw a command not supported
   * error.
   *
   * **Note**: Unlike {@link Collection#createIndex| createIndex}, this function takes in raw index specifications.
   * Index specifications are defined {@link https://www.mongodb.com/docs/manual/reference/command/createIndexes/| here}.
   *
   * @param indexSpecs - An array of index specifications to be created
   * @param options - Optional settings for the command
   *
   * @example
   * ```ts
   * const collection = client.db('foo').collection('bar');
   * await collection.createIndexes([
   *   // Simple index on field fizz
   *   {
   *     key: { fizz: 1 },
   *   }
   *   // wildcard index
   *   {
   *     key: { '$**': 1 }
   *   },
   *   // named index on darmok and jalad
   *   {
   *     key: { darmok: 1, jalad: -1 }
   *     name: 'tanagra'
   *   }
   * ]);
   * ```
   */
  createIndexes(indexSpecs: IndexDescription[], options?: CreateIndexesOptions): Promise<string[]>;
  /**
   * Drops an index from this collection.
   *
   * @param indexName - Name of the index to drop.
   * @param options - Optional settings for the command
   */
  dropIndex(indexName: string, options?: DropIndexesOptions): Promise<Document_2>;
  /**
   * Drops all indexes from this collection.
   *
   * @param options - Optional settings for the command
   */
  dropIndexes(options?: DropIndexesOptions): Promise<boolean>;
  /**
   * Get the list of all indexes information for the collection.
   *
   * @param options - Optional settings for the command
   */
  listIndexes(options?: ListIndexesOptions): ListIndexesCursor;
  /**
   * Checks if one or more indexes exist on the collection, fails on first non-existing index
   *
   * @param indexes - One or more index names to check.
   * @param options - Optional settings for the command
   */
  indexExists(indexes: string | string[], options?: ListIndexesOptions): Promise<boolean>;
  /**
   * Retrieves this collections index info.
   *
   * @param options - Optional settings for the command
   */
  indexInformation(options: IndexInformationOptions & {
    full: true;
  }): Promise<IndexDescriptionInfo[]>;
  indexInformation(options: IndexInformationOptions & {
    full?: false;
  }): Promise<IndexDescriptionCompact>;
  indexInformation(options: IndexInformationOptions): Promise<IndexDescriptionCompact | IndexDescriptionInfo[]>;
  indexInformation(): Promise<IndexDescriptionCompact>;
  /**
   * Gets an estimate of the count of documents in a collection using collection metadata.
   * This will always run a count command on all server versions.
   *
   * due to an oversight in versions 5.0.0-5.0.8 of MongoDB, the count command,
   * which estimatedDocumentCount uses in its implementation, was not included in v1 of
   * the Stable API, and so users of the Stable API with estimatedDocumentCount are
   * recommended to upgrade their server version to 5.0.9+ or set apiStrict: false to avoid
   * encountering errors.
   *
   * @see {@link https://www.mongodb.com/docs/manual/reference/command/count/#behavior|Count: Behavior}
   * @param options - Optional settings for the command
   */
  estimatedDocumentCount(options?: EstimatedDocumentCountOptions): Promise<number>;
  /**
   * Gets the number of documents matching the filter.
   * For a fast count of the total documents in a collection see {@link Collection#estimatedDocumentCount| estimatedDocumentCount}.
   *
   * Due to countDocuments using the $match aggregation pipeline stage, certain query operators cannot be used in countDocuments. This includes the $where and $near query operators, among others. Details can be found in the documentation for the $match aggregation pipeline stage.
   *
   * **Note**: When migrating from {@link Collection#count| count} to {@link Collection#countDocuments| countDocuments}
   * the following query operators must be replaced:
   *
   * | Operator | Replacement |
   * | -------- | ----------- |
   * | `$where`   | [`$expr`][1] |
   * | `$near`    | [`$geoWithin`][2] with [`$center`][3] |
   * | `$nearSphere` | [`$geoWithin`][2] with [`$centerSphere`][4] |
   *
   * [1]: https://www.mongodb.com/docs/manual/reference/operator/query/expr/
   * [2]: https://www.mongodb.com/docs/manual/reference/operator/query/geoWithin/
   * [3]: https://www.mongodb.com/docs/manual/reference/operator/query/center/#op._S_center
   * [4]: https://www.mongodb.com/docs/manual/reference/operator/query/centerSphere/#op._S_centerSphere
   *
   * @param filter - The filter for the count
   * @param options - Optional settings for the command
   *
   * @see https://www.mongodb.com/docs/manual/reference/operator/query/expr/
   * @see https://www.mongodb.com/docs/manual/reference/operator/query/geoWithin/
   * @see https://www.mongodb.com/docs/manual/reference/operator/query/center/#op._S_center
   * @see https://www.mongodb.com/docs/manual/reference/operator/query/centerSphere/#op._S_centerSphere
   */
  countDocuments(filter?: Filter<TSchema>, options?: CountDocumentsOptions & Abortable): Promise<number>;
  /**
   * The distinct command returns a list of distinct values for the given key across a collection.
   *
   * @param key - Field of the document to find distinct values for
   * @param filter - The filter for filtering the set of documents to which we apply the distinct filter.
   * @param options - Optional settings for the command
   */
  distinct<Key extends keyof WithId<TSchema>>(key: Key): Promise<Array<Flatten<WithId<TSchema>[Key]>>>;
  distinct<Key extends keyof WithId<TSchema>>(key: Key, filter: Filter<TSchema>): Promise<Array<Flatten<WithId<TSchema>[Key]>>>;
  distinct<Key extends keyof WithId<TSchema>>(key: Key, filter: Filter<TSchema>, options: DistinctOptions): Promise<Array<Flatten<WithId<TSchema>[Key]>>>;
  distinct(key: string): Promise<any[]>;
  distinct(key: string, filter: Filter<TSchema>): Promise<any[]>;
  distinct(key: string, filter: Filter<TSchema>, options: DistinctOptions): Promise<any[]>;
  /**
   * Retrieve all the indexes on the collection.
   *
   * @param options - Optional settings for the command
   */
  indexes(options: IndexInformationOptions & {
    full?: true;
  }): Promise<IndexDescriptionInfo[]>;
  indexes(options: IndexInformationOptions & {
    full: false;
  }): Promise<IndexDescriptionCompact>;
  indexes(options: IndexInformationOptions): Promise<IndexDescriptionCompact | IndexDescriptionInfo[]>;
  indexes(options?: ListIndexesOptions): Promise<IndexDescriptionInfo[]>;
  /**
   * Find a document and delete it in one atomic operation. Requires a write lock for the duration of the operation.
   *
   * @param filter - The filter used to select the document to remove
   * @param options - Optional settings for the command
   */
  findOneAndDelete(filter: Filter<TSchema>, options: FindOneAndDeleteOptions & {
    includeResultMetadata: true;
  }): Promise<ModifyResult<TSchema>>;
  findOneAndDelete(filter: Filter<TSchema>, options: FindOneAndDeleteOptions & {
    includeResultMetadata: false;
  }): Promise<WithId<TSchema> | null>;
  findOneAndDelete(filter: Filter<TSchema>, options: FindOneAndDeleteOptions): Promise<WithId<TSchema> | null>;
  findOneAndDelete(filter: Filter<TSchema>): Promise<WithId<TSchema> | null>;
  /**
   * Find a document and replace it in one atomic operation. Requires a write lock for the duration of the operation.
   *
   * @param filter - The filter used to select the document to replace
   * @param replacement - The Document that replaces the matching document
   * @param options - Optional settings for the command
   */
  findOneAndReplace(filter: Filter<TSchema>, replacement: WithoutId<TSchema>, options: FindOneAndReplaceOptions & {
    includeResultMetadata: true;
  }): Promise<ModifyResult<TSchema>>;
  findOneAndReplace(filter: Filter<TSchema>, replacement: WithoutId<TSchema>, options: FindOneAndReplaceOptions & {
    includeResultMetadata: false;
  }): Promise<WithId<TSchema> | null>;
  findOneAndReplace(filter: Filter<TSchema>, replacement: WithoutId<TSchema>, options: FindOneAndReplaceOptions): Promise<WithId<TSchema> | null>;
  findOneAndReplace(filter: Filter<TSchema>, replacement: WithoutId<TSchema>): Promise<WithId<TSchema> | null>;
  /**
   * Find a document and update it in one atomic operation. Requires a write lock for the duration of the operation.
   *
   * The value of `update` can be either:
   * - UpdateFilter<TSchema> - A document that contains update operator expressions,
   * - Document[] - an aggregation pipeline consisting of the following stages:
   *   - $addFields and its alias $set
   *   - $project and its alias $unset
   *   - $replaceRoot and its alias $replaceWith.
   * See the [findAndModify command documentation](https://www.mongodb.com/docs/manual/reference/command/findAndModify) for details.
   *
   * @param filter - The filter used to select the document to update
   * @param update - The modifications to apply
   * @param options - Optional settings for the command
   */
  findOneAndUpdate(filter: Filter<TSchema>, update: UpdateFilter<TSchema> | Document_2[], options: FindOneAndUpdateOptions & {
    includeResultMetadata: true;
  }): Promise<ModifyResult<TSchema>>;
  findOneAndUpdate(filter: Filter<TSchema>, update: UpdateFilter<TSchema> | Document_2[], options: FindOneAndUpdateOptions & {
    includeResultMetadata: false;
  }): Promise<WithId<TSchema> | null>;
  findOneAndUpdate(filter: Filter<TSchema>, update: UpdateFilter<TSchema> | Document_2[], options: FindOneAndUpdateOptions): Promise<WithId<TSchema> | null>;
  findOneAndUpdate(filter: Filter<TSchema>, update: UpdateFilter<TSchema> | Document_2[]): Promise<WithId<TSchema> | null>;
  /**
   * Execute an aggregation framework pipeline against the collection, needs MongoDB \>= 2.2
   *
   * @param pipeline - An array of aggregation pipelines to execute
   * @param options - Optional settings for the command
   */
  aggregate<T extends Document_2 = Document_2>(pipeline?: Document_2[], options?: AggregateOptions & Abortable): AggregationCursor<T>;
  /**
   * Create a new Change Stream, watching for new changes (insertions, updates, replacements, deletions, and invalidations) in this collection.
   *
   * @remarks
   * watch() accepts two generic arguments for distinct use cases:
   * - The first is to override the schema that may be defined for this specific collection
   * - The second is to override the shape of the change stream document entirely, if it is not provided the type will default to ChangeStreamDocument of the first argument
   * @example
   * By just providing the first argument I can type the change to be `ChangeStreamDocument<{ _id: number }>`
   * ```ts
   * collection.watch<{ _id: number }>()
   *   .on('change', change => console.log(change._id.toFixed(4)));
   * ```
   *
   * @example
   * Passing a second argument provides a way to reflect the type changes caused by an advanced pipeline.
   * Here, we are using a pipeline to have MongoDB filter for insert changes only and add a comment.
   * No need start from scratch on the ChangeStreamInsertDocument type!
   * By using an intersection we can save time and ensure defaults remain the same type!
   * ```ts
   * collection
   *   .watch<Schema, ChangeStreamInsertDocument<Schema> & { comment: string }>([
   *     { $addFields: { comment: 'big changes' } },
   *     { $match: { operationType: 'insert' } }
   *   ])
   *   .on('change', change => {
   *     change.comment.startsWith('big');
   *     change.operationType === 'insert';
   *     // No need to narrow in code because the generics did that for us!
   *     expectType<Schema>(change.fullDocument);
   *   });
   * ```
   *
   * @remarks
   * When `timeoutMS` is configured for a change stream, it will have different behaviour depending
   * on whether the change stream is in iterator mode or emitter mode. In both cases, a change
   * stream will time out if it does not receive a change event within `timeoutMS` of the last change
   * event.
   *
   * Note that if a change stream is consistently timing out when watching a collection, database or
   * client that is being changed, then this may be due to the server timing out before it can finish
   * processing the existing oplog. To address this, restart the change stream with a higher
   * `timeoutMS`.
   *
   * If the change stream times out the initial aggregate operation to establish the change stream on
   * the server, then the client will close the change stream. If the getMore calls to the server
   * time out, then the change stream will be left open, but will throw a MongoOperationTimeoutError
   * when in iterator mode and emit an error event that returns a MongoOperationTimeoutError in
   * emitter mode.
   *
   * To determine whether or not the change stream is still open following a timeout, check the
   * {@link ChangeStream.closed} getter.
   *
   * @example
   * In iterator mode, if a next() call throws a timeout error, it will attempt to resume the change stream.
   * The next call can just be retried after this succeeds.
   * ```ts
   * const changeStream = collection.watch([], { timeoutMS: 100 });
   * try {
   *     await changeStream.next();
   * } catch (e) {
   *     if (e instanceof MongoOperationTimeoutError && !changeStream.closed) {
   *       await changeStream.next();
   *     }
   *     throw e;
   * }
   * ```
   *
   * @example
   * In emitter mode, if the change stream goes `timeoutMS` without emitting a change event, it will
   * emit an error event that returns a MongoOperationTimeoutError, but will not close the change
   * stream unless the resume attempt fails. There is no need to re-establish change listeners as
   * this will automatically continue emitting change events once the resume attempt completes.
   *
   * ```ts
   * const changeStream = collection.watch([], { timeoutMS: 100 });
   * changeStream.on('change', console.log);
   * changeStream.on('error', e => {
   *     if (e instanceof MongoOperationTimeoutError && !changeStream.closed) {
   *         // do nothing
   *     } else {
   *         changeStream.close();
   *     }
   * });
   * ```
   *
   * @param pipeline - An array of {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation-pipeline/|aggregation pipeline stages} through which to pass change stream documents. This allows for filtering (using $match) and manipulating the change stream documents.
   * @param options - Optional settings for the command
   * @typeParam TLocal - Type of the data being detected by the change stream
   * @typeParam TChange - Type of the whole change stream document emitted
   */
  watch<TLocal extends Document_2 = TSchema, TChange extends Document_2 = ChangeStreamDocument<TLocal>>(pipeline?: Document_2[], options?: ChangeStreamOptions): ChangeStream<TLocal, TChange>;
  /**
   * Initiate an Out of order batch write operation. All operations will be buffered into insert/update/remove commands executed out of order.
   *
   * @throws MongoNotConnectedError
   * @remarks
   * **NOTE:** MongoClient must be connected prior to calling this method due to a known limitation in this legacy implementation.
   * However, `collection.bulkWrite()` provides an equivalent API that does not require prior connecting.
   */
  initializeUnorderedBulkOp(options?: BulkWriteOptions): UnorderedBulkOperation;
  /**
   * Initiate an In order bulk write operation. Operations will be serially executed in the order they are added, creating a new operation for each switch in types.
   *
   * @throws MongoNotConnectedError
   * @remarks
   * **NOTE:** MongoClient must be connected prior to calling this method due to a known limitation in this legacy implementation.
   * However, `collection.bulkWrite()` provides an equivalent API that does not require prior connecting.
   */
  initializeOrderedBulkOp(options?: BulkWriteOptions): OrderedBulkOperation;
  /**
   * An estimated count of matching documents in the db to a filter.
   *
   * **NOTE:** This method has been deprecated, since it does not provide an accurate count of the documents
   * in a collection. To obtain an accurate count of documents in the collection, use {@link Collection#countDocuments| countDocuments}.
   * To obtain an estimated count of all documents in the collection, use {@link Collection#estimatedDocumentCount| estimatedDocumentCount}.
   *
   * @deprecated use {@link Collection#countDocuments| countDocuments} or {@link Collection#estimatedDocumentCount| estimatedDocumentCount} instead
   *
   * @param filter - The filter for the count.
   * @param options - Optional settings for the command
   */
  count(filter?: Filter<TSchema>, options?: CountOptions): Promise<number>;
  /**
   * Returns all search indexes for the current collection.
   *
   * @param options - The options for the list indexes operation.
   *
   * @remarks Only available when used against a 7.0+ Atlas cluster.
   */
  listSearchIndexes(options?: ListSearchIndexesOptions): ListSearchIndexesCursor;
  /**
   * Returns all search indexes for the current collection.
   *
   * @param name - The name of the index to search for.  Only indexes with matching index names will be returned.
   * @param options - The options for the list indexes operation.
   *
   * @remarks Only available when used against a 7.0+ Atlas cluster.
   */
  listSearchIndexes(name: string, options?: ListSearchIndexesOptions): ListSearchIndexesCursor;
  /**
   * Creates a single search index for the collection.
   *
   * @param description - The index description for the new search index.
   * @returns A promise that resolves to the name of the new search index.
   *
   * @remarks Only available when used against a 7.0+ Atlas cluster.
   */
  createSearchIndex(description: SearchIndexDescription): Promise<string>;
  /**
   * Creates multiple search indexes for the current collection.
   *
   * @param descriptions - An array of `SearchIndexDescription`s for the new search indexes.
   * @returns A promise that resolves to an array of the newly created search index names.
   *
   * @remarks Only available when used against a 7.0+ Atlas cluster.
   * @returns
   */
  createSearchIndexes(descriptions: SearchIndexDescription[]): Promise<string[]>;
  /**
   * Deletes a search index by index name.
   *
   * @param name - The name of the search index to be deleted.
   *
   * @remarks Only available when used against a 7.0+ Atlas cluster.
   */
  dropSearchIndex(name: string): Promise<void>;
  /**
   * Updates a search index by replacing the existing index definition with the provided definition.
   *
   * @param name - The name of the search index to update.
   * @param definition - The new search index definition.
   *
   * @remarks Only available when used against a 7.0+ Atlas cluster.
   */
  updateSearchIndex(name: string, definition: Document_2): Promise<void>;
}

/** @public */
declare interface CollectionInfo extends Document_2 {
  name: string;
  type?: string;
  options?: Document_2;
  info?: {
    readOnly?: false;
    uuid?: Binary;
  };
  idIndex?: Document_2;
}
declare type CollectionNamesWithTypes = {
  name: string;
  badge: string;
};

/** @public */
declare interface CollectionOptions extends BSONSerializeOptions, WriteConcernOptions {
  /** Specify a read concern for the collection. (only MongoDB 3.2 or higher supported) */
  readConcern?: ReadConcernLike;
  /** The preferred read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED, ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST). */
  readPreference?: ReadPreferenceLike;
  /**
   * @experimental
   * Specifies the time an operation will run until it throws a timeout error
   */
  timeoutMS?: number;
}
export declare type CollectionWithSchema<M extends GenericServerSideSchema = GenericServerSideSchema, D extends GenericDatabaseSchema = M[keyof M], C extends GenericCollectionSchema = D[keyof D], N extends StringKey<D> = StringKey<D>> = Collection<M, D, C, N> & { [k in StringKey<D> as k extends `${N}.${infer S}` ? S : never]: Collection<M, D, D[k], k> };

/**
 * An event indicating the failure of a given command
 * @public
 * @category Event
 */
declare class CommandFailedEvent {
  address: string;
  /** Driver generated connection id */
  connectionId?: string | number;
  /**
   * Server generated connection id
   * Distinct from the connection id and is returned by the hello or legacy hello response as "connectionId" from the server on 4.2+.
   */
  serverConnectionId: bigint | null;
  requestId: number;
  duration: number;
  commandName: string;
  failure: Error;
  serviceId?: ObjectId;
  /* Excluded from this release type: name */
  /* Excluded from this release type: __constructor */
  get hasServiceId(): boolean;
}

/** @public */
declare interface CommandOperationOptions extends OperationOptions, WriteConcernOptions, ExplainOptions {
  /** Specify a read concern and level for the collection. (only MongoDB 3.2 or higher supported) */
  readConcern?: ReadConcernLike;
  /** Collation */
  collation?: CollationOptions;
  /**
   * maxTimeMS is a server-side time limit in milliseconds for processing an operation.
   */
  maxTimeMS?: number;
  /**
   * Comment to apply to the operation.
   *
   * In server versions pre-4.4, 'comment' must be string.  A server
   * error will be thrown if any other type is provided.
   *
   * In server versions 4.4 and above, 'comment' can be any valid BSON type.
   */
  comment?: unknown;
  /** Should retry failed writes */
  retryWrites?: boolean;
  dbName?: string;
  authdb?: string;
  noResponse?: boolean;
}
declare class CommandResult<T = unknown> extends ShellApiValueClass {
  value: T;
  type: string;
  constructor(type: string, value: T);
  [asPrintable](): T;
  toJSON(): T;
}

/**
 * An event indicating the start of a given command
 * @public
 * @category Event
 */
declare class CommandStartedEvent {
  commandObj?: Document_2;
  requestId: number;
  databaseName: string;
  commandName: string;
  command: Document_2;
  address: string;
  /** Driver generated connection id */
  connectionId?: string | number;
  /**
   * Server generated connection id
   * Distinct from the connection id and is returned by the hello or legacy hello response as "connectionId"
   * from the server on 4.2+.
   */
  serverConnectionId: bigint | null;
  serviceId?: ObjectId;
  /* Excluded from this release type: name */
  /* Excluded from this release type: __constructor */
  get hasServiceId(): boolean;
}

/**
 * An event indicating the success of a given command
 * @public
 * @category Event
 */
declare class CommandSucceededEvent {
  address: string;
  /** Driver generated connection id */
  connectionId?: string | number;
  /**
   * Server generated connection id
   * Distinct from the connection id and is returned by the hello or legacy hello response as "connectionId" from the server on 4.2+.
   */
  serverConnectionId: bigint | null;
  requestId: number;
  duration: number;
  commandName: string;
  reply: unknown;
  serviceId?: ObjectId;
  /* Excluded from this release type: name */
  /* Excluded from this release type: __constructor */
  get hasServiceId(): boolean;
}

/** @public */
declare type CommonEvents = 'newListener' | 'removeListener';

/** @public */
declare const Compressor: Readonly<{
  readonly none: 0;
  readonly snappy: 1;
  readonly zlib: 2;
  readonly zstd: 3;
}>;

/** @public */
declare type Compressor = (typeof Compressor)[CompressorName];

/** @public */
declare type CompressorName = keyof typeof Compressor;

/** @public */
declare type Condition<T> = AlternativeType<T> | FilterOperators<AlternativeType<T>>;
declare interface ConfigProvider<T> {
  getConfig<K extends keyof T>(key: K): Promise<T[K] | undefined> | T[K] | undefined;
  setConfig<K extends keyof T>(key: K, value: T[K]): Promise<'success' | 'ignored'> | 'success' | 'ignored';
  resetConfig<K extends keyof T>(key: K): Promise<'success' | 'ignored'> | 'success' | 'ignored';
  validateConfig<K extends keyof T>(key: K, value: T[K]): Promise<string | null>;
  listConfigOptions(): string[] | undefined | Promise<string[]>;
}
declare interface ConnectAttemptFinishedEvent {
  cryptSharedLibVersionInfo?: {
    version: bigint;
    versionStr: string;
  } | null;
}
declare interface ConnectAttemptInitializedEvent {
  uri: string;
  driver: {
    name: string;
    version: string;
  };
  devtoolsConnectVersion: string;
  host: string;
}
declare interface ConnectDnsResolutionDetail {
  query: 'TXT' | 'SRV';
  hostname: string;
  error?: string;
  wasNativelyLookedUp?: boolean;
  durationMs: number;
}
declare interface ConnectEvent {
  is_atlas?: boolean;
  resolved_hostname?: string;
  is_localhost?: boolean;
  is_do_url?: boolean;
  server_version?: string;
  server_os?: string;
  server_arch?: string;
  is_enterprise?: boolean;
  auth_type?: string;
  is_data_federation?: boolean;
  is_stream?: boolean;
  dl_version?: string;
  atlas_version?: string;
  is_genuine?: boolean;
  non_genuine_server_name?: string;
  api_version?: string;
  api_strict?: boolean;
  api_deprecation_errors?: boolean;
  node_version?: string;
  uri?: string;
  is_local_atlas?: boolean;
  is_atlas_url?: boolean;
}
declare type ConnectEventArgs<K extends keyof ConnectEventMap> = ConnectEventMap[K] extends ((...args: infer P) => any) ? P : never;
declare interface ConnectEventMap extends MongoDBOIDCLogEventsMap, ProxyEventMap {
  'devtools-connect:connect-attempt-initialized': (ev: ConnectAttemptInitializedEvent) => void;
  'devtools-connect:connect-heartbeat-failure': (ev: ConnectHeartbeatFailureEvent) => void;
  'devtools-connect:connect-heartbeat-succeeded': (ev: ConnectHeartbeatSucceededEvent) => void;
  'devtools-connect:connect-fail-early': () => void;
  'devtools-connect:connect-attempt-finished': (ev: ConnectAttemptFinishedEvent) => void;
  'devtools-connect:resolve-srv-error': (ev: ConnectResolveSrvErrorEvent) => void;
  'devtools-connect:resolve-srv-succeeded': (ev: ConnectResolveSrvSucceededEvent) => void;
  'devtools-connect:missing-optional-dependency': (ev: ConnectMissingOptionalDependencyEvent) => void;
  'devtools-connect:used-system-ca': (ev: ConnectUsedSystemCAEvent) => void;
  'devtools-connect:retry-after-tls-error': (ev: ConnectRetryAfterTLSErrorEvent) => void;
}
declare interface ConnectHeartbeatFailureEvent {
  connectionId: string;
  failure: Error;
  isFailFast: boolean;
  isKnownServer: boolean;
}
declare interface ConnectHeartbeatSucceededEvent {
  connectionId: string;
}

/**
 * An event published when a connection is checked into the connection pool
 * @public
 * @category Event
 */
declare class ConnectionCheckedInEvent extends ConnectionPoolMonitoringEvent {
  /** The id of the connection */
  connectionId: number | '<monitor>';
  /* Excluded from this release type: name */
  /* Excluded from this release type: __constructor */
}

/**
 * An event published when a connection is checked out of the connection pool
 * @public
 * @category Event
 */
declare class ConnectionCheckedOutEvent extends ConnectionPoolMonitoringEvent {
  /** The id of the connection */
  connectionId: number | '<monitor>';
  /* Excluded from this release type: name */
  /**
   * The time it took to check out the connection.
   * More specifically, the time elapsed between
   * emitting a `ConnectionCheckOutStartedEvent`
   * and emitting this event as part of the same checking out.
   *
   */
  durationMS: number;
  /* Excluded from this release type: __constructor */
}

/**
 * An event published when a request to check a connection out fails
 * @public
 * @category Event
 */
declare class ConnectionCheckOutFailedEvent extends ConnectionPoolMonitoringEvent {
  /** The reason the attempt to check out failed */
  reason: string;
  /* Excluded from this release type: error */
  /* Excluded from this release type: name */
  /**
   * The time it took to check out the connection.
   * More specifically, the time elapsed between
   * emitting a `ConnectionCheckOutStartedEvent`
   * and emitting this event as part of the same check out.
   */
  durationMS: number;
  /* Excluded from this release type: __constructor */
}

/**
 * An event published when a request to check a connection out begins
 * @public
 * @category Event
 */
declare class ConnectionCheckOutStartedEvent extends ConnectionPoolMonitoringEvent {
  /* Excluded from this release type: name */
  /* Excluded from this release type: __constructor */
}

/**
 * An event published when a connection is closed
 * @public
 * @category Event
 */
declare class ConnectionClosedEvent extends ConnectionPoolMonitoringEvent {
  /** The id of the connection */
  connectionId: number | '<monitor>';
  /** The reason the connection was closed */
  reason: string;
  serviceId?: ObjectId;
  /* Excluded from this release type: name */
  /* Excluded from this release type: error */
  /* Excluded from this release type: __constructor */
}

/**
 * An event published when a connection pool creates a new connection
 * @public
 * @category Event
 */
declare class ConnectionCreatedEvent extends ConnectionPoolMonitoringEvent {
  /** A monotonically increasing, per-pool id for the newly created connection */
  connectionId: number | '<monitor>';
  /* Excluded from this release type: name */
  /* Excluded from this release type: __constructor */
}

/** @public */
declare type ConnectionEvents = {
  commandStarted(event: CommandStartedEvent): void;
  commandSucceeded(event: CommandSucceededEvent): void;
  commandFailed(event: CommandFailedEvent): void;
  clusterTimeReceived(clusterTime: Document_2): void;
  close(): void;
  pinned(pinType: string): void;
  unpinned(pinType: string): void;
};
declare type ConnectionExtraInfo = {
  is_atlas?: boolean;
  server_version?: string;
  server_os?: string;
  server_arch?: string;
  is_enterprise?: boolean;
  auth_type?: string;
  is_data_federation?: boolean;
  is_stream?: boolean;
  dl_version?: string;
  atlas_version?: string;
  is_genuine?: boolean;
  non_genuine_server_name?: string;
  node_version?: string;
  uri: string;
  is_local_atlas?: boolean;
} & HostInformation;
declare interface ConnectionInfo {
  connectionString: string;
  driverOptions: Omit<DevtoolsConnectOptions, 'productName' | 'productDocsLink'>;
}
declare interface ConnectionInfo_2 {
  buildInfo: Document_2 | null;
  resolvedHostname?: string;
  extraInfo: (ConnectionExtraInfo & {
    fcv?: string;
  }) | null;
}

/** @public */
declare interface ConnectionOptions_2 extends SupportedNodeConnectionOptions, StreamDescriptionOptions, ProxyOptions {
  id: number | '<monitor>';
  generation: number;
  hostAddress: HostAddress;
  /* Excluded from this release type: autoEncrypter */
  serverApi?: ServerApi;
  monitorCommands: boolean;
  /* Excluded from this release type: connectionType */
  credentials?: MongoCredentials;
  /* Excluded from this release type: authProviders */
  connectTimeoutMS?: number;
  tls: boolean;
  noDelay?: boolean;
  socketTimeoutMS?: number;
  cancellationToken?: CancellationToken;
  metadata: ClientMetadata;
  /* Excluded from this release type: extendedMetadata */
  /* Excluded from this release type: mongoLogger */
}

/**
 * An event published when a connection pool is cleared
 * @public
 * @category Event
 */
declare class ConnectionPoolClearedEvent extends ConnectionPoolMonitoringEvent {
  /* Excluded from this release type: serviceId */
  interruptInUseConnections?: boolean;
  /* Excluded from this release type: name */
  /* Excluded from this release type: __constructor */
}

/**
 * An event published when a connection pool is closed
 * @public
 * @category Event
 */
declare class ConnectionPoolClosedEvent extends ConnectionPoolMonitoringEvent {
  /* Excluded from this release type: name */
  /* Excluded from this release type: __constructor */
}

/**
 * An event published when a connection pool is created
 * @public
 * @category Event
 */
declare class ConnectionPoolCreatedEvent extends ConnectionPoolMonitoringEvent {
  /** The options used to create this connection pool */
  options: Pick<ConnectionPoolOptions, 'maxPoolSize' | 'minPoolSize' | 'maxConnecting' | 'maxIdleTimeMS' | 'waitQueueTimeoutMS'>;
  /* Excluded from this release type: name */
  /* Excluded from this release type: __constructor */
}

/** @public */
declare type ConnectionPoolEvents = {
  connectionPoolCreated(event: ConnectionPoolCreatedEvent): void;
  connectionPoolReady(event: ConnectionPoolReadyEvent): void;
  connectionPoolClosed(event: ConnectionPoolClosedEvent): void;
  connectionPoolCleared(event: ConnectionPoolClearedEvent): void;
  connectionCreated(event: ConnectionCreatedEvent): void;
  connectionReady(event: ConnectionReadyEvent): void;
  connectionClosed(event: ConnectionClosedEvent): void;
  connectionCheckOutStarted(event: ConnectionCheckOutStartedEvent): void;
  connectionCheckOutFailed(event: ConnectionCheckOutFailedEvent): void;
  connectionCheckedOut(event: ConnectionCheckedOutEvent): void;
  connectionCheckedIn(event: ConnectionCheckedInEvent): void;
} & Omit<ConnectionEvents, 'close' | 'message'>;

/**
 * The base export class for all monitoring events published from the connection pool
 * @public
 * @category Event
 */
declare abstract class ConnectionPoolMonitoringEvent {
  /** A timestamp when the event was created  */
  time: Date;
  /** The address (host/port pair) of the pool */
  address: string;
  /* Excluded from this release type: name */
  /* Excluded from this release type: __constructor */
}

/** @public */
declare interface ConnectionPoolOptions extends Omit<ConnectionOptions_2, 'id' | 'generation'> {
  /** The maximum number of connections that may be associated with a pool at a given time. This includes in use and available connections. */
  maxPoolSize: number;
  /** The minimum number of connections that MUST exist at any moment in a single connection pool. */
  minPoolSize: number;
  /** The maximum number of connections that may be in the process of being established concurrently by the connection pool. */
  maxConnecting: number;
  /** The maximum amount of time a connection should remain idle in the connection pool before being marked idle. */
  maxIdleTimeMS: number;
  /** The maximum amount of time operation execution should wait for a connection to become available. The default is 0 which means there is no limit. */
  waitQueueTimeoutMS: number;
  /** If we are in load balancer mode. */
  loadBalanced: boolean;
  /* Excluded from this release type: minPoolSizeCheckFrequencyMS */
}

/**
 * An event published when a connection pool is ready
 * @public
 * @category Event
 */
declare class ConnectionPoolReadyEvent extends ConnectionPoolMonitoringEvent {
  /* Excluded from this release type: name */
  /* Excluded from this release type: __constructor */
}

/**
 * An event published when a connection is ready for use
 * @public
 * @category Event
 */
declare class ConnectionReadyEvent extends ConnectionPoolMonitoringEvent {
  /** The id of the connection */
  connectionId: number | '<monitor>';
  /**
   * The time it took to establish the connection.
   * In accordance with the definition of establishment of a connection
   * specified by `ConnectionPoolOptions.maxConnecting`,
   * it is the time elapsed between emitting a `ConnectionCreatedEvent`
   * and emitting this event as part of the same checking out.
   *
   * Naturally, when establishing a connection is part of checking out,
   * this duration is not greater than
   * `ConnectionCheckedOutEvent.duration`.
   */
  durationMS: number;
  /* Excluded from this release type: name */
  /* Excluded from this release type: __constructor */
}
declare interface ConnectLogEmitter {
  on<K extends keyof ConnectEventMap>(event: K, listener: ConnectEventMap[K]): this;
  off?<K extends keyof ConnectEventMap>(event: K, listener: ConnectEventMap[K]): this;
  once<K extends keyof ConnectEventMap>(event: K, listener: ConnectEventMap[K]): this;
  emit<K extends keyof ConnectEventMap>(event: K, ...args: ConnectEventArgs<K>): unknown;
}
declare interface ConnectMissingOptionalDependencyEvent {
  name: string;
  error: Error;
}
declare interface ConnectResolveSrvErrorEvent {
  from: string;
  error: Error;
  duringLoad: boolean;
  resolutionDetails: ConnectDnsResolutionDetail[];
  durationMs: number | null;
}
declare interface ConnectResolveSrvSucceededEvent {
  from: string;
  to: string;
  resolutionDetails: ConnectDnsResolutionDetail[];
  durationMs: number | null;
}
declare interface ConnectRetryAfterTLSErrorEvent {
  error: string;
}
declare interface ConnectUsedSystemCAEvent {
  caCount: number;
  asyncFallbackError: Error | undefined;
  systemCertsError: Error | undefined;
  messages: string[];
}

/** @public */
declare interface CountDocumentsOptions extends AggregateOptions {
  /** The number of documents to skip. */
  skip?: number;
  /** The maximum amount of documents to consider. */
  limit?: number;
}

/** @public */
declare interface CountOptions extends CommandOperationOptions {
  /** The number of documents to skip. */
  skip?: number;
  /** The maximum amounts to count before aborting. */
  limit?: number;
  /**
   * Number of milliseconds to wait before aborting the query.
   */
  maxTimeMS?: number;
  /** An index name hint for the query. */
  hint?: string | Document_2;
}

/** @public */
declare interface CreateCollectionOptions extends CommandOperationOptions {
  /** Create a capped collection */
  capped?: boolean;
  /** @deprecated Create an index on the _id field of the document. This option is deprecated in MongoDB 3.2+ and will be removed once no longer supported by the server. */
  autoIndexId?: boolean;
  /** The size of the capped collection in bytes */
  size?: number;
  /** The maximum number of documents in the capped collection */
  max?: number;
  /** Available for the MMAPv1 storage engine only to set the usePowerOf2Sizes and the noPadding flag */
  flags?: number;
  /** Allows users to specify configuration to the storage engine on a per-collection basis when creating a collection */
  storageEngine?: Document_2;
  /** Allows users to specify validation rules or expressions for the collection. For more information, see Document Validation */
  validator?: Document_2;
  /** Determines how strictly MongoDB applies the validation rules to existing documents during an update */
  validationLevel?: string;
  /** Determines whether to error on invalid documents or just warn about the violations but allow invalid documents to be inserted */
  validationAction?: string;
  /** Allows users to specify a default configuration for indexes when creating a collection */
  indexOptionDefaults?: Document_2;
  /** The name of the source collection or view from which to create the view. The name is not the full namespace of the collection or view (i.e., does not include the database name and implies the same database as the view to create) */
  viewOn?: string;
  /** An array that consists of the aggregation pipeline stage. Creates the view by applying the specified pipeline to the viewOn collection or view */
  pipeline?: Document_2[];
  /** A primary key factory function for generation of custom _id keys. */
  pkFactory?: PkFactory;
  /** A document specifying configuration options for timeseries collections. */
  timeseries?: TimeSeriesCollectionOptions;
  /** A document specifying configuration options for clustered collections. For MongoDB 5.3 and above. */
  clusteredIndex?: ClusteredCollectionOptions;
  /** The number of seconds after which a document in a timeseries or clustered collection expires. */
  expireAfterSeconds?: number;
  /** @experimental */
  encryptedFields?: Document_2;
  /**
   * If set, enables pre-update and post-update document events to be included for any
   * change streams that listen on this collection.
   */
  changeStreamPreAndPostImages?: {
    enabled: boolean;
  };
}
declare interface CreateEncryptedCollectionOptions {
  provider: ClientEncryptionDataKeyProvider;
  createCollectionOptions: Omit<CreateCollectionOptions, 'encryptedFields'> & {
    encryptedFields: Document_2;
  };
  masterKey?: AWSEncryptionKeyOptions | AzureEncryptionKeyOptions | GCPEncryptionKeyOptions;
}

/** @public */
declare interface CreateIndexesOptions extends Omit<CommandOperationOptions, 'writeConcern'> {
  /** Creates the index in the background, yielding whenever possible. */
  background?: boolean;
  /** Creates an unique index. */
  unique?: boolean;
  /** Override the autogenerated index name (useful if the resulting name is larger than 128 bytes) */
  name?: string;
  /** Creates a partial index based on the given filter object (MongoDB 3.2 or higher) */
  partialFilterExpression?: Document_2;
  /** Creates a sparse index. */
  sparse?: boolean;
  /** Allows you to expire data on indexes applied to a data (MongoDB 2.2 or higher) */
  expireAfterSeconds?: number;
  /** Allows users to configure the storage engine on a per-index basis when creating an index. (MongoDB 3.0 or higher) */
  storageEngine?: Document_2;
  /** (MongoDB 4.4. or higher) Specifies how many data-bearing members of a replica set, including the primary, must complete the index builds successfully before the primary marks the indexes as ready. This option accepts the same values for the "w" field in a write concern plus "votingMembers", which indicates all voting data-bearing nodes. */
  commitQuorum?: number | string;
  /** Specifies the index version number, either 0 or 1. */
  version?: number;
  weights?: Document_2;
  default_language?: string;
  language_override?: string;
  textIndexVersion?: number;
  '2dsphereIndexVersion'?: number;
  bits?: number;
  /** For geospatial indexes set the lower bound for the co-ordinates. */
  min?: number;
  /** For geospatial indexes set the high bound for the co-ordinates. */
  max?: number;
  bucketSize?: number;
  wildcardProjection?: Document_2;
  /** Specifies that the index should exist on the target collection but should not be used by the query planner when executing operations. (MongoDB 4.4 or higher) */
  hidden?: boolean;
}

/**
 * @public
 * Configuration options for custom credential providers for KMS requests.
 */
declare interface CredentialProviders {
  aws?: AWSCredentialProvider;
}
declare interface CryptLibraryFoundEvent {
  cryptSharedLibPath: string;
  expectedVersion: {
    versionStr: string;
  };
}
declare interface CryptLibrarySkipEvent {
  cryptSharedLibPath: string;
  reason: string;
  details?: any;
}

/** @public */
declare type CSFLEKMSTlsOptions = {
  aws?: ClientEncryptionTlsOptions;
  gcp?: ClientEncryptionTlsOptions;
  kmip?: ClientEncryptionTlsOptions;
  local?: ClientEncryptionTlsOptions;
  azure?: ClientEncryptionTlsOptions;
  [key: string]: ClientEncryptionTlsOptions | undefined;
};
declare class Cursor extends AggregateOrFindCursor<ServiceProviderFindCursor> {
  _tailable: boolean;
  constructor(mongo: Mongo, cursor: ServiceProviderFindCursor);
  toJSON(): void;
  private _addFlag;
  /*
  Adds OP_QUERY wire protocol flags, such as the tailable flag, to change the behavior of queries. Accepts: DBQuery.Option fields tailable, slaveOk, noTimeout, awaitData, exhaust, partial.
  */
  addOption(optionFlagNumber: number): Cursor;
  /*
  Sets the 'allowDiskUse' option. If no argument is passed, the default is true.
  */
  allowDiskUse(allow?: boolean): Cursor;
  /*
  Sets the 'partial' option to true.
  */
  allowPartialResults(): Cursor;
  /*
  Specifies the collation for the cursor returned by the db.collection.find(). To use, append to the db.collection.find().
  */
  collation(spec: CollationOptions): Cursor;
  /*
  Adds a comment field to the query.
  */
  comment(cmt: string): Cursor;
  /*
  Counts the number of documents referenced by a cursor.
  */
  count(): number;
  /*
  cursor.hasNext() returns true if the cursor returned by the db.collection.find() query can iterate further to return more documents. NOTE: if the cursor is tailable with awaitData then hasNext will block until a document is returned. To check if a document is in the cursor's batch without waiting, use tryNext instead
  */
  hasNext(): boolean;
  /*
  Call this method on a query to override MongoDB’s default index selection and query optimization process. Use db.collection.getIndexes() to return the list of current indexes on a collection.
  */
  hint(index: string): Cursor;
  /*
  Use the limit() method on a cursor to specify the maximum number of documents the cursor will return.
  */
  limit(value: number): Cursor;
  /*
  Specifies the exclusive upper bound for a specific index in order to constrain the results of find(). max() provides a way to specify an upper bound on compound key indexes.
  */
  max(indexBounds: Document_2): Cursor;
  /*
  Set a maxAwaitTimeMS on a tailing cursor query to allow to customize the timeout value for the option awaitData (Only supported on MongoDB 3.2 or higher, ignored otherwise)
  */
  maxAwaitTimeMS(value: number): Cursor;
  /*
  Specifies the inclusive lower bound for a specific index in order to constrain the results of find(). min() provides a way to specify lower bounds on compound key indexes.
  */
  min(indexBounds: Document_2): Cursor;
  /*
  The next document in the cursor returned by the db.collection.find() method. NOTE: if the cursor is tailable with awaitData then hasNext will block until a document is returned. To check if a document is in the cursor's batch without waiting, use tryNext instead
  */
  next(): Document_2 | null;
  /*
  Instructs the server to avoid closing a cursor automatically after a period of inactivity.
  */
  noCursorTimeout(): Cursor;
  /*
  Sets oplogReplay cursor flag to true.
  */
  oplogReplay(): Cursor;
  /*
  Append readPref() to a cursor to control how the client routes the query to members of the replica set.
  */
  readPref(mode: ReadPreferenceLike, tagSet?: TagSet[], hedgeOptions?: HedgeOptions): Cursor;
  /*
  Modifies the cursor to return index keys rather than the documents.
  */
  returnKey(enabled: boolean): Cursor;
  /*
  A count of the number of documents that match the db.collection.find() query after applying any cursor.skip() and cursor.limit() methods.
  */
  size(): number;
  /*
  Marks the cursor as tailable.
  */
  tailable(opts?: {
    awaitData: boolean;
  }): Cursor;
  /*
  deprecated, non-functional
  */
  maxScan(): void;
  /*
  Modifies the output of a query by adding a field $recordId to matching documents. $recordId is the internal key which uniquely identifies a document in a collection.
  */
  showRecordId(): Cursor;
  /*
  Specify a read concern for the db.collection.find() method.
  */
  readConcern(level: ReadConcernLevel): Cursor;
}

/** @public */
declare const CURSOR_FLAGS: readonly ["tailable", "oplogReplay", "noCursorTimeout", "awaitData", "exhaust", "partial"];

/** @public */
declare type CursorFlag = (typeof CURSOR_FLAGS)[number];
declare class CursorIterationResult extends ShellApiValueClass {
  cursorHasMore: boolean;
  documents: Document_2[];
  constructor();
}

/** @public */
declare interface CursorStreamOptions {
  /** A transformation method applied to each document emitted by the stream */
  transform?(this: void, doc: Document_2): Document_2;
}

/**
 * @public
 * @experimental
 * Specifies how `timeoutMS` is applied to the cursor. Can be either `'cursorLifeTime'` or `'iteration'`
 * When set to `'iteration'`, the deadline specified by `timeoutMS` applies to each call of
 * `cursor.next()`.
 * When set to `'cursorLifetime'`, the deadline applies to the life of the entire cursor.
 *
 * Depending on the type of cursor being used, this option has different default values.
 * For non-tailable cursors, this value defaults to `'cursorLifetime'`
 * For tailable cursors, this value defaults to `'iteration'` since tailable cursors, by
 * definition can have an arbitrarily long lifetime.
 *
 * @example
 * ```ts
 * const cursor = collection.find({}, {timeoutMS: 100, timeoutMode: 'iteration'});
 * for await (const doc of cursor) {
 *  // process doc
 *  // This will throw a timeout error if any of the iterator's `next()` calls takes more than 100ms, but
 *  // will continue to iterate successfully otherwise, regardless of the number of batches.
 * }
 * ```
 *
 * @example
 * ```ts
 * const cursor = collection.find({}, { timeoutMS: 1000, timeoutMode: 'cursorLifetime' });
 * const docs = await cursor.toArray(); // This entire line will throw a timeout error if all batches are not fetched and returned within 1000ms.
 * ```
 */
declare const CursorTimeoutMode: Readonly<{
  readonly ITERATION: "iteration";
  readonly LIFETIME: "cursorLifetime";
}>;

/**
 * @public
 * @experimental
 */
declare type CursorTimeoutMode = (typeof CursorTimeoutMode)[keyof typeof CursorTimeoutMode];
declare class Database<M extends GenericServerSideSchema = GenericServerSideSchema, D extends GenericDatabaseSchema = GenericDatabaseSchema> extends ShellApiWithMongoClass {
  _mongo: Mongo<M>;
  _name: StringKey<M>;
  _collections: Record<StringKey<D>, CollectionWithSchema<M, D>>;
  _session: Session | undefined;
  _cachedCollectionNames: StringKey<D>[];
  _cachedHello: Document_2 | null;
  constructor(mongo: Mongo<M>, name: StringKey<M>, session?: Session);
  _baseOptions(): Promise<CommandOperationOptions>;
  _maybeCachedHello(): Promise<Document_2>;
  [asPrintable](): string;
  private _emitDatabaseApiCall;
  _runCommand(cmd: Document_2, options?: CommandOperationOptions): Promise<Document_2>;
  _runReadCommand(cmd: Document_2, options?: CommandOperationOptions): Promise<Document_2>;
  _runAdminCommand(cmd: Document_2, options?: CommandOperationOptions): Promise<Document_2>;
  _runAdminReadCommand(cmd: Document_2, options?: CommandOperationOptions): Promise<Document_2>;
  _runCursorCommand(cmd: Document_2, options?: CommandOperationOptions): Promise<RunCommandCursor_2>;
  _runAdminCursorCommand(cmd: Document_2, options?: CommandOperationOptions): Promise<RunCommandCursor_2>;
  _listCollections(filter: Document_2, options: ListCollectionsOptions): Promise<Document_2[]>;
  _getCollectionNames(options?: ListCollectionsOptions): Promise<string[]>;
  _getCollectionNamesWithTypes(options?: ListCollectionsOptions): Promise<CollectionNamesWithTypes[]>;
  _getCollectionNamesForCompletion(): Promise<string[]>;
  _getLastErrorObj(w?: number | string, wTimeout?: number, j?: boolean): Promise<Document_2>;
  /*
  Returns the current database connection
  */
  getMongo(): Mongo<M>;
  /*
  Returns the name of the DB
  */
  getName(): StringKey<M>;
  /*
  Returns an array containing the names of all collections in the current database.
  */
  getCollectionNames(): StringKey<D>[];
  /*
  Returns an array of documents with collection information, i.e. collection name and options, for the current database.
  */
  getCollectionInfos(filter?: Document_2, options?: ListCollectionsOptions): Document_2[];
  /*
  Runs an arbitrary command on the database.
  */
  runCommand(cmd: string | Document_2, options?: RunCommandOptions): Document_2;
  /*
  Runs an arbitrary command against the admin database.
  */
  adminCommand(cmd: string | Document_2): Document_2;
  /*
  Runs a specified admin/diagnostic pipeline which does not require an underlying collection.
  */
  aggregate(pipeline: Document_2[], options: AggregateOptions & {
    explain: ExplainVerbosityLike;
  }): Document_2;
  /*
  Runs a specified admin/diagnostic pipeline which does not require an underlying collection.
  */
  aggregate(pipeline: Document_2[], options?: AggregateOptions): AggregationCursor_2;
  /*
  Runs a specified admin/diagnostic pipeline which does not require an underlying collection.
  */
  aggregate(...stages: Document_2[]): AggregationCursor_2;
  /*
  Returns another database without modifying the db variable in the shell environment.
  */
  getSiblingDB<K extends StringKey<M>>(db: K): DatabaseWithSchema<M, M[K]>;
  /*
  Returns a collection or a view object that is functionally equivalent to using the db.<collectionName>.
  */
  getCollection<K extends StringKey<D>>(coll: K): CollectionWithSchema<M, D, D[K], K>;
  /*
  Removes the current database, deleting the associated data files.
  */
  dropDatabase(writeConcern?: WriteConcern): Document_2;
  /*
  Creates a new user for the database on which the method is run. db.createUser() returns a duplicate user error if the user already exists on the database.
  */
  createUser(user: Document_2, writeConcern?: WriteConcern): Document_2;
  /*
  Updates the user’s profile on the database on which you run the method. An update to a field completely replaces the previous field’s values. This includes updates to the user’s roles array.
  */
  updateUser(username: string, userDoc: Document_2, writeConcern?: WriteConcern): Document_2;
  /*
  Updates a user’s password. Run the method in the database where the user is defined, i.e. the database you created the user.
  */
  changeUserPassword(username: string, password: string, writeConcern?: WriteConcern): Document_2;
  /*
  Ends the current authentication session. This function has no effect if the current session is not authenticated.
  */
  logout(): Document_2;
  /*
  Removes the user from the current database.
  */
  dropUser(username: string, writeConcern?: WriteConcern): Document_2;
  /*
  Removes all users from the current database.
  */
  dropAllUsers(writeConcern?: WriteConcern): Document_2;
  /*
  Allows a user to authenticate to the database from within the shell.
  */
  auth(...args: [AuthDoc] | [string, string] | [string]): {
    ok: number;
  };
  /*
  Grants additional roles to a user.
  */
  grantRolesToUser(username: string, roles: any[], writeConcern?: WriteConcern): Document_2;
  /*
  Removes a one or more roles from a user on the current database.
  */
  revokeRolesFromUser(username: string, roles: any[], writeConcern?: WriteConcern): Document_2;
  /*
  Returns user information for a specified user. Run this method on the user’s database. The user must exist on the database on which the method runs.
  */
  getUser(username: string, options?: Document_2): Document_2 | null;
  /*
  Returns information for all the users in the database.
  */
  getUsers(options?: Document_2): Document_2;
  /*
  Create new collection
  */
  createCollection(name: string, options?: CreateCollectionOptions): {
    ok: number;
  };
  /*
  Creates a new collection with a list of encrypted fields each with unique and auto-created data encryption keys (DEKs). This is a utility function that internally utilises ClientEnryption.createEncryptedCollection.
  */
  createEncryptedCollection(name: string, options: CreateEncryptedCollectionOptions): {
    collection: Collection;
    encryptedFields: Document_2;
  };
  /*
  Create new view
  */
  createView(name: string, source: string, pipeline: Document_2[], options?: CreateCollectionOptions): {
    ok: number;
  };
  /*
  Creates a new role.
  */
  createRole(role: Document_2, writeConcern?: WriteConcern): Document_2;
  /*
  Updates the role’s profile on the database on which you run the method. An update to a field completely replaces the previous field’s values.
  */
  updateRole(rolename: string, roleDoc: Document_2, writeConcern?: WriteConcern): Document_2;
  /*
  Removes the role from the current database.
  */
  dropRole(rolename: string, writeConcern?: WriteConcern): Document_2;
  /*
  Removes all roles from the current database.
  */
  dropAllRoles(writeConcern?: WriteConcern): Document_2;
  /*
  Grants additional roles to a role.
  */
  grantRolesToRole(rolename: string, roles: any[], writeConcern?: WriteConcern): Document_2;
  /*
  Removes a one or more roles from a role on the current database.
  */
  revokeRolesFromRole(rolename: string, roles: any[], writeConcern?: WriteConcern): Document_2;
  /*
  Grants additional privileges to a role.
  */
  grantPrivilegesToRole(rolename: string, privileges: any[], writeConcern?: WriteConcern): Document_2;
  /*
  Removes a one or more privileges from a role on the current database.
  */
  revokePrivilegesFromRole(rolename: string, privileges: any[], writeConcern?: WriteConcern): Document_2;
  /*
  Returns role information for a specified role. Run this method on the role’s database. The role must exist on the database on which the method runs.
  */
  getRole(rolename: string, options?: Document_2): Document_2 | null;
  /*
  Returns information for all the roles in the database.
  */
  getRoles(options?: Document_2): Document_2;
  _getCurrentOperations(opts: Document_2 | boolean): Promise<Document_2[]>;
  /*
  Runs an aggregation using $currentOp operator. Returns a document that contains information on in-progress operations for the database instance. For further information, see $currentOp.
  */
  currentOp(opts?: Document_2 | boolean): Document_2;
  /*
  Calls the killOp command. Terminates an operation as specified by the operation ID. To find operations and their corresponding IDs, see $currentOp or db.currentOp().
  */
  killOp(opId: number | string): Document_2;
  /*
  Calls the shutdown command. Shuts down the current mongod or mongos process cleanly and safely. You must issue the db.shutdownServer() operation against the admin database.
  */
  shutdownServer(opts?: Document_2): Document_2;
  /*
  Calls the fsync command. Forces the mongod to flush all pending write operations to disk and locks the entire mongod instance to prevent additional writes until the user releases the lock with a corresponding db.fsyncUnlock() command.
  */
  fsyncLock(): Document_2;
  /*
  Calls the fsyncUnlock command. Reduces the lock taken by db.fsyncLock() on a mongod instance by 1.
  */
  fsyncUnlock(): Document_2;
  /*
  returns the db version. uses the buildinfo command
  */
  version(): string;
  /*
  returns the db serverBits. uses the buildInfo command
  */
  serverBits(): Document_2;
  /*
  Calls the isMaster command
  */
  isMaster(): Document_2;
  /*
  Calls the hello command
  */
  hello(): Document_2;
  /*
  returns the db serverBuildInfo. uses the buildInfo command
  */
  serverBuildInfo(): Document_2;
  /*
  returns the server stats. uses the serverStatus command
  */
  serverStatus(opts?: {}): Document_2;
  /*
  returns the db stats. uses the dbStats command
  */
  stats(scaleOrOptions?: number | Document_2): Document_2;
  /*
  Calls the hostInfo command
  */
  hostInfo(): Document_2;
  /*
  returns the db serverCmdLineOpts. uses the getCmdLineOpts command
  */
  serverCmdLineOpts(): Document_2;
  /*
  Calls the rotateCertificates command
  */
  rotateCertificates(message?: string): Document_2;
  /*
  Prints the collection.stats for each collection in the db.
  */
  printCollectionStats(scale?: number): Document_2;
  /*
  returns the db getProfilingStatus. uses the profile command
  */
  getProfilingStatus(): Document_2;
  /*
  returns the db setProfilingLevel. uses the profile command
  */
  setProfilingLevel(level: number, opts?: number | Document_2): Document_2;
  /*
  returns the db setLogLevel. uses the setParameter command
  */
  setLogLevel(logLevel: number, component?: Document_2 | string): Document_2;
  /*
  returns the db getLogComponents. uses the getParameter command
  */
  getLogComponents(): Document_2;
  /*
  deprecated, non-functional
  */
  cloneDatabase(): void;
  /*
  deprecated, non-functional
  */
  cloneCollection(): void;
  /*
  deprecated, non-functional
  */
  copyDatabase(): void;
  /*
  returns the db commandHelp. uses the passed in command with help: true
  */
  commandHelp(name: string): Document_2;
  /*
  Calls the listCommands command
  */
  listCommands(): CommandResult;
  /*
  Calls the getLastError command
  */
  getLastErrorObj(w?: number | string, wTimeout?: number, j?: boolean): Document_2;
  /*
  Calls the getLastError command
  */
  getLastError(w?: number | string, wTimeout?: number): Document_2 | null;
  /*
  Calls sh.status(verbose)
  */
  printShardingStatus(verbose?: boolean): CommandResult;
  /*
  Prints secondary replicaset information
  */
  printSecondaryReplicationInfo(): CommandResult;
  /*
  Returns replication information
  */
  getReplicationInfo(): Document_2;
  /*
  Formats sh.getReplicationInfo
  */
  printReplicationInfo(): CommandResult;
  /*
  DEPRECATED. Use db.printSecondaryReplicationInfo
  */
  printSlaveReplicationInfo(): never;
  /*
  This method is deprecated. Use db.getMongo().setReadPref() instead
  */
  setSecondaryOk(): void;
  /*
  Opens a change stream cursor on the database
  */
  watch(pipeline?: Document_2[] | ChangeStreamOptions, options?: ChangeStreamOptions): ChangeStreamCursor;
  /*
  (Experimental) Runs a SQL query against Atlas Data Lake. Note: this is an experimental feature that may be subject to change in future releases.
  */
  sql(sqlString: string, options?: AggregateOptions): AggregationCursor_2;
  /*
  Returns a cursor with information about metadata inconsistencies
  */
  checkMetadataConsistency(options?: CheckMetadataConsistencyOptions): RunCommandCursor_2;
}
export declare type DatabaseWithSchema<M extends GenericServerSideSchema = GenericServerSideSchema, D extends GenericDatabaseSchema = GenericDatabaseSchema> = Database<M, D> & { [k in StringKey<D>]: Collection<M, D, D[k], k> };

/**
 * @public
 * The schema for a DataKey in the key vault collection.
 */
declare interface DataKey {
  _id: UUID;
  version?: number;
  keyAltNames?: string[];
  keyMaterial: Binary;
  creationDate: Date;
  updateDate: Date;
  status: number;
  masterKey: Document_2;
}
declare type DataKeyEncryptionKeyOptions = {
  masterKey?: MasterKey;
  keyAltNames?: AltNames;
  keyMaterial?: Buffer | Binary;
};

/**
 * The **Db** class is a class that represents a MongoDB Database.
 * @public
 *
 * @example
 * ```ts
 * import { MongoClient } from 'mongodb';
 *
 * interface Pet {
 *   name: string;
 *   kind: 'dog' | 'cat' | 'fish';
 * }
 *
 * const client = new MongoClient('mongodb://localhost:27017');
 * const db = client.db();
 *
 * // Create a collection that validates our union
 * await db.createCollection<Pet>('pets', {
 *   validator: { $expr: { $in: ['$kind', ['dog', 'cat', 'fish']] } }
 * })
 * ```
 */
declare class Db {
  /* Excluded from this release type: s */
  /* Excluded from this release type: client */
  static SYSTEM_NAMESPACE_COLLECTION: string;
  static SYSTEM_INDEX_COLLECTION: string;
  static SYSTEM_PROFILE_COLLECTION: string;
  static SYSTEM_USER_COLLECTION: string;
  static SYSTEM_COMMAND_COLLECTION: string;
  static SYSTEM_JS_COLLECTION: string;
  /**
   * Creates a new Db instance.
   *
   * Db name cannot contain a dot, the server may apply more restrictions when an operation is run.
   *
   * @param client - The MongoClient for the database.
   * @param databaseName - The name of the database this instance represents.
   * @param options - Optional settings for Db construction.
   */
  constructor(client: MongoClient, databaseName: string, options?: DbOptions);
  get databaseName(): string;
  get options(): DbOptions | undefined;
  /**
   * Check if a secondary can be used (because the read preference is *not* set to primary)
   */
  get secondaryOk(): boolean;
  get readConcern(): ReadConcern | undefined;
  /**
   * The current readPreference of the Db. If not explicitly defined for
   * this Db, will be inherited from the parent MongoClient
   */
  get readPreference(): ReadPreference;
  get bsonOptions(): BSONSerializeOptions;
  get writeConcern(): WriteConcern | undefined;
  get namespace(): string;
  get timeoutMS(): number | undefined;
  /**
   * Create a new collection on a server with the specified options. Use this to create capped collections.
   * More information about command options available at https://www.mongodb.com/docs/manual/reference/command/create/
   *
   * Collection namespace validation is performed server-side.
   *
   * @param name - The name of the collection to create
   * @param options - Optional settings for the command
   */
  createCollection<TSchema extends Document_2 = Document_2>(name: string, options?: CreateCollectionOptions): Promise<Collection_2<TSchema>>;
  /**
   * Execute a command
   *
   * @remarks
   * This command does not inherit options from the MongoClient.
   *
   * The driver will ensure the following fields are attached to the command sent to the server:
   * - `lsid` - sourced from an implicit session or options.session
   * - `$readPreference` - defaults to primary or can be configured by options.readPreference
   * - `$db` - sourced from the name of this database
   *
   * If the client has a serverApi setting:
   * - `apiVersion`
   * - `apiStrict`
   * - `apiDeprecationErrors`
   *
   * When in a transaction:
   * - `readConcern` - sourced from readConcern set on the TransactionOptions
   * - `writeConcern` - sourced from writeConcern set on the TransactionOptions
   *
   * Attaching any of the above fields to the command will have no effect as the driver will overwrite the value.
   *
   * @param command - The command to run
   * @param options - Optional settings for the command
   */
  command(command: Document_2, options?: RunCommandOptions & Abortable): Promise<Document_2>;
  /**
   * Execute an aggregation framework pipeline against the database.
   *
   * @param pipeline - An array of aggregation stages to be executed
   * @param options - Optional settings for the command
   */
  aggregate<T extends Document_2 = Document_2>(pipeline?: Document_2[], options?: AggregateOptions): AggregationCursor<T>;
  /** Return the Admin db instance */
  admin(): Admin;
  /**
   * Returns a reference to a MongoDB Collection. If it does not exist it will be created implicitly.
   *
   * Collection namespace validation is performed server-side.
   *
   * @param name - the collection name we wish to access.
   * @returns return the new Collection instance
   */
  collection<TSchema extends Document_2 = Document_2>(name: string, options?: CollectionOptions): Collection_2<TSchema>;
  /**
   * Get all the db statistics.
   *
   * @param options - Optional settings for the command
   */
  stats(options?: DbStatsOptions): Promise<Document_2>;
  /**
   * List all collections of this database with optional filter
   *
   * @param filter - Query to filter collections by
   * @param options - Optional settings for the command
   */
  listCollections(filter: Document_2, options: Exclude<ListCollectionsOptions, 'nameOnly'> & {
    nameOnly: true;
  } & Abortable): ListCollectionsCursor<Pick<CollectionInfo, 'name' | 'type'>>;
  listCollections(filter: Document_2, options: Exclude<ListCollectionsOptions, 'nameOnly'> & {
    nameOnly: false;
  } & Abortable): ListCollectionsCursor<CollectionInfo>;
  listCollections<T extends Pick<CollectionInfo, 'name' | 'type'> | CollectionInfo = Pick<CollectionInfo, 'name' | 'type'> | CollectionInfo>(filter?: Document_2, options?: ListCollectionsOptions & Abortable): ListCollectionsCursor<T>;
  /**
   * Rename a collection.
   *
   * @remarks
   * This operation does not inherit options from the MongoClient.
   *
   * @param fromCollection - Name of current collection to rename
   * @param toCollection - New name of of the collection
   * @param options - Optional settings for the command
   */
  renameCollection<TSchema extends Document_2 = Document_2>(fromCollection: string, toCollection: string, options?: RenameOptions): Promise<Collection_2<TSchema>>;
  /**
   * Drop a collection from the database, removing it permanently. New accesses will create a new collection.
   *
   * @param name - Name of collection to drop
   * @param options - Optional settings for the command
   */
  dropCollection(name: string, options?: DropCollectionOptions): Promise<boolean>;
  /**
   * Drop a database, removing it permanently from the server.
   *
   * @param options - Optional settings for the command
   */
  dropDatabase(options?: DropDatabaseOptions): Promise<boolean>;
  /**
   * Fetch all collections for the current db.
   *
   * @param options - Optional settings for the command
   */
  collections(options?: ListCollectionsOptions): Promise<Collection_2[]>;
  /**
   * Creates an index on the db and collection.
   *
   * @param name - Name of the collection to create the index on.
   * @param indexSpec - Specify the field to index, or an index specification
   * @param options - Optional settings for the command
   */
  createIndex(name: string, indexSpec: IndexSpecification, options?: CreateIndexesOptions): Promise<string>;
  /**
   * Remove a user from a database
   *
   * @param username - The username to remove
   * @param options - Optional settings for the command
   */
  removeUser(username: string, options?: RemoveUserOptions): Promise<boolean>;
  /**
   * Set the current profiling level of MongoDB
   *
   * @param level - The new profiling level (off, slow_only, all).
   * @param options - Optional settings for the command
   */
  setProfilingLevel(level: ProfilingLevel, options?: SetProfilingLevelOptions): Promise<ProfilingLevel>;
  /**
   * Retrieve the current profiling Level for MongoDB
   *
   * @param options - Optional settings for the command
   */
  profilingLevel(options?: ProfilingLevelOptions): Promise<string>;
  /**
   * Retrieves this collections index info.
   *
   * @param name - The name of the collection.
   * @param options - Optional settings for the command
   */
  indexInformation(name: string, options: IndexInformationOptions & {
    full: true;
  }): Promise<IndexDescriptionInfo[]>;
  indexInformation(name: string, options: IndexInformationOptions & {
    full?: false;
  }): Promise<IndexDescriptionCompact>;
  indexInformation(name: string, options: IndexInformationOptions): Promise<IndexDescriptionCompact | IndexDescriptionInfo[]>;
  indexInformation(name: string): Promise<IndexDescriptionCompact>;
  /**
   * Create a new Change Stream, watching for new changes (insertions, updates,
   * replacements, deletions, and invalidations) in this database. Will ignore all
   * changes to system collections.
   *
   * @remarks
   * watch() accepts two generic arguments for distinct use cases:
   * - The first is to provide the schema that may be defined for all the collections within this database
   * - The second is to override the shape of the change stream document entirely, if it is not provided the type will default to ChangeStreamDocument of the first argument
   *
   * @remarks
   * When `timeoutMS` is configured for a change stream, it will have different behaviour depending
   * on whether the change stream is in iterator mode or emitter mode. In both cases, a change
   * stream will time out if it does not receive a change event within `timeoutMS` of the last change
   * event.
   *
   * Note that if a change stream is consistently timing out when watching a collection, database or
   * client that is being changed, then this may be due to the server timing out before it can finish
   * processing the existing oplog. To address this, restart the change stream with a higher
   * `timeoutMS`.
   *
   * If the change stream times out the initial aggregate operation to establish the change stream on
   * the server, then the client will close the change stream. If the getMore calls to the server
   * time out, then the change stream will be left open, but will throw a MongoOperationTimeoutError
   * when in iterator mode and emit an error event that returns a MongoOperationTimeoutError in
   * emitter mode.
   *
   * To determine whether or not the change stream is still open following a timeout, check the
   * {@link ChangeStream.closed} getter.
   *
   * @example
   * In iterator mode, if a next() call throws a timeout error, it will attempt to resume the change stream.
   * The next call can just be retried after this succeeds.
   * ```ts
   * const changeStream = collection.watch([], { timeoutMS: 100 });
   * try {
   *     await changeStream.next();
   * } catch (e) {
   *     if (e instanceof MongoOperationTimeoutError && !changeStream.closed) {
   *       await changeStream.next();
   *     }
   *     throw e;
   * }
   * ```
   *
   * @example
   * In emitter mode, if the change stream goes `timeoutMS` without emitting a change event, it will
   * emit an error event that returns a MongoOperationTimeoutError, but will not close the change
   * stream unless the resume attempt fails. There is no need to re-establish change listeners as
   * this will automatically continue emitting change events once the resume attempt completes.
   *
   * ```ts
   * const changeStream = collection.watch([], { timeoutMS: 100 });
   * changeStream.on('change', console.log);
   * changeStream.on('error', e => {
   *     if (e instanceof MongoOperationTimeoutError && !changeStream.closed) {
   *         // do nothing
   *     } else {
   *         changeStream.close();
   *     }
   * });
   * ```
   * @param pipeline - An array of {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation-pipeline/|aggregation pipeline stages} through which to pass change stream documents. This allows for filtering (using $match) and manipulating the change stream documents.
   * @param options - Optional settings for the command
   * @typeParam TSchema - Type of the data being detected by the change stream
   * @typeParam TChange - Type of the whole change stream document emitted
   */
  watch<TSchema extends Document_2 = Document_2, TChange extends Document_2 = ChangeStreamDocument<TSchema>>(pipeline?: Document_2[], options?: ChangeStreamOptions): ChangeStream<TSchema, TChange>;
  /**
   * A low level cursor API providing basic driver functionality:
   * - ClientSession management
   * - ReadPreference for server selection
   * - Running getMores automatically when a local batch is exhausted
   *
   * @param command - The command that will start a cursor on the server.
   * @param options - Configurations for running the command, bson options will apply to getMores
   */
  runCursorCommand(command: Document_2, options?: RunCursorCommandOptions): RunCommandCursor;
}

/** @public */
declare interface DbOptions extends BSONSerializeOptions, WriteConcernOptions {
  /** If the database authentication is dependent on another databaseName. */
  authSource?: string;
  /** Force server to assign _id values instead of driver. */
  forceServerObjectId?: boolean;
  /** The preferred read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED, ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST). */
  readPreference?: ReadPreferenceLike;
  /** A primary key factory object for generation of custom _id keys. */
  pkFactory?: PkFactory;
  /** Specify a read concern for the collection. (only MongoDB 3.2 or higher supported) */
  readConcern?: ReadConcern;
  /** Should retry failed writes */
  retryWrites?: boolean;
  /**
   * @experimental
   * Specifies the time an operation will run until it throws a timeout error
   */
  timeoutMS?: number;
}
declare class DBQuery extends ShellApiClass {
  _instanceState: ShellInstanceState;
  constructor(instanceState: ShellInstanceState);
  get shellBatchSize(): number | undefined;
  set shellBatchSize(value: number | undefined);
}

/** @public */
declare interface DbStatsOptions extends CommandOperationOptions {
  /** Divide the returned sizes by scale value. */
  scale?: number;
}

/** @public */
declare interface DeleteManyModel<TSchema extends Document_2 = Document_2> {
  /** The filter to limit the deleted documents. */
  filter: Filter<TSchema>;
  /** Specifies a collation. */
  collation?: CollationOptions;
  /** The index to use. If specified, then the query system will only consider plans using the hinted index. */
  hint?: Hint;
}

/** @public */
declare interface DeleteOneModel<TSchema extends Document_2 = Document_2> {
  /** The filter to limit the deleted documents. */
  filter: Filter<TSchema>;
  /** Specifies a collation. */
  collation?: CollationOptions;
  /** The index to use. If specified, then the query system will only consider plans using the hinted index. */
  hint?: Hint;
}

/** @public */
declare interface DeleteOptions extends CommandOperationOptions, WriteConcernOptions {
  /** If true, when an insert fails, don't execute the remaining writes. If false, continue with remaining inserts when one fails. */
  ordered?: boolean;
  /** Specifies the collation to use for the operation */
  collation?: CollationOptions;
  /** Specify that the update query should only consider plans using the hinted index */
  hint?: string | Document_2;
  /** Map of parameter names and values that can be accessed using $$var (requires MongoDB 5.0). */
  let?: Document_2;
}

/** @public */
declare interface DeleteResult {
  /** Indicates whether this write result was acknowledged. If not, then all other members of this result will be undefined. */
  acknowledged: boolean;
  /** The number of documents that were deleted */
  deletedCount: number;
}
declare class DeleteResult_2 extends ShellApiValueClass {
  acknowledged: boolean;
  deletedCount: number | undefined;
  constructor(acknowledged: boolean, deletedCount: number | undefined);
}

/** @public */
declare interface DeleteStatement {
  /** The query that matches documents to delete. */
  q: Document_2;
  /** The number of matching documents to delete. */
  limit: number;
  /** Specifies the collation to use for the operation. */
  collation?: CollationOptions;
  /** A document or string that specifies the index to use to support the query predicate. */
  hint?: Hint;
}

/**
 * Information that the application needs to show to users when using the
 * Device Authorization flow.
 *
 * @public
 */
declare interface DeviceFlowInformation {
  verificationUrl: string;
  userCode: string;
}
declare class DevtoolsConnectionState {
  oidcPlugin: MongoDBOIDCPlugin;
  productName: string;
  private stateShareClient;
  private stateShareServer;
  constructor(options: Pick<DevtoolsConnectOptions, 'productDocsLink' | 'productName' | 'oidc' | 'parentHandle'>, logger: ConnectLogEmitter, ca: string | undefined);
  getStateShareServer(): Promise<string>;
  destroy(): Promise<void>;
}
declare interface DevtoolsConnectOptions extends MongoClientOptions {
  productDocsLink: string;
  productName: string;
  oidc?: Omit<MongoDBOIDCPluginOptions, 'logger' | 'redirectServerRequestHandler'>;
  parentState?: DevtoolsConnectionState;
  parentHandle?: string;
  proxy?: DevtoolsProxyOptions | AgentWithInitialize;
  applyProxyToOIDC?: boolean;
}
declare interface DevtoolsProxyOptions {
  proxy?: string;
  noProxyHosts?: string;
  useEnvironmentVariableProxies?: boolean;
  sshOptions?: {
    identityKeyFile?: string;
    identityKeyPassphrase?: string;
  };
  ca?: ConnectionOptions['ca'];
  env?: Record<string, string | undefined>;
}

/** @public */
declare type DistinctOptions = CommandOperationOptions & {
  /**
   * @sinceServerVersion 7.1
   *
   * The index to use. Specify either the index name as a string or the index key pattern.
   * If specified, then the query system will only consider plans using the hinted index.
   *
   * If provided as a string, `hint` must be index name for an index on the collection.
   * If provided as an object, `hint` must be an index description for an index defined on the collection.
   *
   * See https://www.mongodb.com/docs/manual/reference/command/distinct/#command-fields.
   */
  hint?: Document_2 | string;
};

/** @public */
declare interface DriverInfo {
  name?: string;
  version?: string;
  platform?: string;
}

/** @public */
declare interface DropCollectionOptions extends CommandOperationOptions {
  /** @experimental */
  encryptedFields?: Document_2;
}

/** @public */
declare type DropDatabaseOptions = CommandOperationOptions;

/** @public */
declare type DropIndexesOptions = CommandOperationOptions;
declare interface EditorReadVscodeExtensionsDoneEvent {
  vscodeDir: string;
  hasMongodbExtension: boolean;
}
declare interface EditorReadVscodeExtensionsFailedEvent {
  vscodeDir: string;
  error: Error;
}
declare interface EditorRunEditCommandEvent {
  tmpDoc: string;
  editor: string;
  code: string;
}

/** @public */
declare interface EndSessionOptions {
  /* Excluded from this release type: error */
  force?: boolean;
  forceClear?: boolean;
  /** Specifies the time an operation will run until it throws a timeout error */
  timeoutMS?: number;
}

/** TypeScript Omit (Exclude to be specific) does not work for objects with an "any" indexed type, and breaks discriminated unions @public */
declare type EnhancedOmit<TRecordOrUnion, KeyUnion> = string extends keyof TRecordOrUnion ? TRecordOrUnion : TRecordOrUnion extends any ? Pick<TRecordOrUnion, Exclude<keyof TRecordOrUnion, KeyUnion>> : never;

/** @public */
declare interface EstimatedDocumentCountOptions extends CommandOperationOptions {
  /**
   * The maximum amount of time to allow the operation to run.
   *
   * This option is sent only if the caller explicitly provides a value. The default is to not send a value.
   */
  maxTimeMS?: number;
}
declare interface EvaluateInputEvent {
  input: string;
}
declare interface EvaluationListener extends Partial<ConfigProvider<ShellUserConfig>> {
  onPrint?: (value: ShellResult[], type: 'print' | 'printjson') => Promise<void> | void;
  onPrompt?: (question: string, type: 'password' | 'yesno') => Promise<string> | string;
  onClearCommand?: () => Promise<void> | void;
  onExit?: (exitCode?: number) => Promise<never>;
  onLoad?: (filename: string) => Promise<OnLoadResult> | OnLoadResult;
  getCryptLibraryOptions?: () => Promise<AutoEncryptionOptions['extraOptions']>;
  getLogPath?: () => string | undefined;
}

/** @public */
declare type EventEmitterWithState = {
  /* Excluded from this release type: stateChanged */
};

/**
 * Event description type
 * @public
 */
declare type EventsDescription = Record<string, GenericListener>;
declare class Explainable extends ShellApiWithMongoClass {
  _mongo: Mongo;
  _collection: CollectionWithSchema;
  _verbosity: ExplainVerbosityLike;
  constructor(mongo: Mongo, collection: CollectionWithSchema, verbosity: ExplainVerbosityLike);
  [asPrintable](): string;
  private _emitExplainableApiCall;
  /*
  Returns the explainable collection.
  */
  getCollection(): CollectionWithSchema;
  /*
  Returns the explainable verbosity.
  */
  getVerbosity(): ExplainVerbosityLike;
  /*
  Sets the explainable verbosity.
  */
  setVerbosity(verbosity: ExplainVerbosityLike): void;
  /*
  Returns information on the query plan.
  */
  find(query?: Document_2, projection?: Document_2, options?: FindOptions): ExplainableCursor_2;
  /*
  Provides information on the query plan for db.collection.aggregate() method.
  */
  aggregate(pipeline: Document_2[], options: Document_2): Document_2;
  /*
  Provides information on the query plan for db.collection.aggregate() method.
  */
  aggregate(...stages: Document_2[]): Document_2;
  /*
  Returns information on the query plan for db.collection.count().
  */
  count(query?: {}, options?: CountOptions): Document_2;
  /*
  Returns information on the query plan for db.collection.distinct().
  */
  distinct(field: string): Document_2;
  /*
  Returns information on the query plan for db.collection.distinct().
  */
  distinct(field: string, query: Document_2): Document_2;
  /*
  Returns information on the query plan for db.collection.distinct().
  */
  distinct(field: string, query: Document_2, options: DistinctOptions): Document_2;
  /*
  Returns information on the query plan for db.collection.findAndModify().
  */
  findAndModify(options: FindAndModifyMethodShellOptions): Document_2 | null;
  /*
  Returns information on the query plan for db.collection.findOneAndDelete().
  */
  findOneAndDelete(filter: Document_2, options?: FindOneAndDeleteOptions): Document_2 | null;
  /*
  Returns information on the query plan for db.collection.findOneAndReplace().
  */
  findOneAndReplace(filter: Document_2, replacement: Document_2, options?: FindAndModifyShellOptions<FindOneAndReplaceOptions>): Document_2;
  /*
  Returns information on the query plan for db.collection.findOneAndUpdate().
  */
  findOneAndUpdate(filter: Document_2, update: Document_2, options?: FindAndModifyShellOptions<FindOneAndUpdateOptions>): Document_2;
  /*
  Returns information on the query plan for db.collection.remove().
  */
  remove(query: Document_2, options?: boolean | RemoveShellOptions): Document_2;
  /*
  Returns information on the query plan for db.collection.update().
  */
  update(filter: Document_2, update: Document_2, options?: UpdateOptions): Document_2;
  /*
  Returns information on the query plan for db.collection.mapReduce().
  */
  mapReduce(map: Function | string, reduce: Function | string, optionsOrOutString: MapReduceShellOptions): Document_2;
}

/**
 * @public
 *
 * A base class for any cursors that have `explain()` methods.
 */
declare abstract class ExplainableCursor<TSchema> extends AbstractCursor<TSchema> {
  /** Execute the explain for the cursor */
  abstract explain(): Document_2;
  abstract explain(verbosity: ExplainVerbosityLike | ExplainCommandOptions): Document_2;
  abstract explain(options: {
    timeoutMS?: number;
  }): Document_2;
  abstract explain(verbosity: ExplainVerbosityLike | ExplainCommandOptions, options: {
    timeoutMS?: number;
  }): Document_2;
  abstract explain(verbosity?: ExplainVerbosityLike | ExplainCommandOptions | {
    timeoutMS?: number;
  }, options?: {
    timeoutMS?: number;
  }): Document_2;
  protected resolveExplainTimeoutOptions(verbosity?: ExplainVerbosityLike | ExplainCommandOptions | {
    timeoutMS?: number;
  }, options?: {
    timeoutMS?: number;
  }): {
    timeout?: {
      timeoutMS?: number;
    };
    explain?: ExplainVerbosityLike | ExplainCommandOptions;
  };
}
declare class ExplainableCursor_2 extends Cursor {
  _baseCursor: Cursor;
  _verbosity: ExplainVerbosityLike;
  _explained: any;
  constructor(mongo: Mongo, cursor: Cursor, verbosity: ExplainVerbosityLike);
  [asPrintable](): Promise<any>;
}

/** @public */
declare interface ExplainCommandOptions {
  /** The explain verbosity for the command. */
  verbosity: ExplainVerbosity;
  /** The maxTimeMS setting for the command. */
  maxTimeMS?: number;
}

/**
 * @public
 *
 * When set, this configures an explain command.  Valid values are boolean (for legacy compatibility,
 * see {@link ExplainVerbosityLike}), a string containing the explain verbosity, or an object containing the verbosity and
 * an optional maxTimeMS.
 *
 * Examples of valid usage:
 *
 * ```typescript
 * collection.find({ name: 'john doe' }, { explain: true });
 * collection.find({ name: 'john doe' }, { explain: false });
 * collection.find({ name: 'john doe' }, { explain: 'queryPlanner' });
 * collection.find({ name: 'john doe' }, { explain: { verbosity: 'queryPlanner' } });
 * ```
 *
 * maxTimeMS can be configured to limit the amount of time the server
 * spends executing an explain by providing an object:
 *
 * ```typescript
 * // limits the `explain` command to no more than 2 seconds
 * collection.find({ name: 'john doe' }, {
 *   explain:  {
 *    verbosity: 'queryPlanner',
 *    maxTimeMS: 2000
 *  }
 * });
 * ```
 */
declare interface ExplainOptions {
  /** Specifies the verbosity mode for the explain output. */
  explain?: ExplainVerbosityLike | ExplainCommandOptions;
}

/** @public */
declare const ExplainVerbosity: Readonly<{
  readonly queryPlanner: "queryPlanner";
  readonly queryPlannerExtended: "queryPlannerExtended";
  readonly executionStats: "executionStats";
  readonly allPlansExecution: "allPlansExecution";
}>;

/** @public */
declare type ExplainVerbosity = string;

/**
 * For backwards compatibility, true is interpreted as "allPlansExecution"
 * and false as "queryPlanner".
 * @public
 */
declare type ExplainVerbosityLike = ExplainVerbosity | boolean;
declare interface FetchingUpdateMetadataCompleteEvent {
  latest: string | null;
  currentVersion: string;
  hasGreetingCTA: boolean;
}
declare interface FetchingUpdateMetadataEvent {
  updateURL: string;
  localFilePath: string;
  currentVersion: string;
}

/** A MongoDB filter can be some portion of the schema or a set of operators @public */
declare type Filter<TSchema> = { [P in keyof WithId<TSchema>]?: Condition<WithId<TSchema>[P]> } & RootFilterOperators<WithId<TSchema>>;

/** @public */
declare type FilterOperations<T> = T extends Record<string, any> ? { [key in keyof T]?: FilterOperators<T[key]> } : FilterOperators<T>;

/** @public */
declare interface FilterOperators<TValue> extends NonObjectIdLikeDocument {
  $eq?: TValue;
  $gt?: TValue;
  $gte?: TValue;
  $in?: ReadonlyArray<TValue>;
  $lt?: TValue;
  $lte?: TValue;
  $ne?: TValue;
  $nin?: ReadonlyArray<TValue>;
  $not?: TValue extends string ? FilterOperators<TValue> | RegExp : FilterOperators<TValue>;
  /**
   * When `true`, `$exists` matches the documents that contain the field,
   * including documents where the field value is null.
   */
  $exists?: boolean;
  $type?: BSONType | BSONTypeAlias;
  $expr?: Record<string, any>;
  $jsonSchema?: Record<string, any>;
  $mod?: TValue extends number ? [number, number] : never;
  $regex?: TValue extends string ? RegExp | BSONRegExp | string : never;
  $options?: TValue extends string ? string : never;
  $geoIntersects?: {
    $geometry: Document_2;
  };
  $geoWithin?: Document_2;
  $near?: Document_2;
  $nearSphere?: Document_2;
  $maxDistance?: number;
  $all?: ReadonlyArray<any>;
  $elemMatch?: Document_2;
  $size?: TValue extends ReadonlyArray<any> ? number : never;
  $bitsAllClear?: BitwiseFilter;
  $bitsAllSet?: BitwiseFilter;
  $bitsAnyClear?: BitwiseFilter;
  $bitsAnySet?: BitwiseFilter;
  $rand?: Record<string, never>;
}
declare type FindAndModifyMethodShellOptions = {
  query: Document_2;
  sort?: (FindOneAndDeleteOptions | FindOneAndReplaceOptions | FindOneAndUpdateOptions)['sort'];
  update?: Document_2 | Document_2[];
  remove?: boolean;
  new?: boolean;
  fields?: Document_2;
  projection?: Document_2;
  upsert?: boolean;
  bypassDocumentValidation?: boolean;
  writeConcern?: Document_2;
  collation?: (FindOneAndDeleteOptions | FindOneAndReplaceOptions | FindOneAndUpdateOptions)['collation'];
  arrayFilters?: Document_2[];
  explain?: ExplainVerbosityLike;
};
declare type FindAndModifyShellOptions<BaseOptions extends FindOneAndReplaceOptions | FindOneAndUpdateOptions> = BaseOptions & {
  returnOriginal?: boolean;
  returnNewDocument?: boolean;
  new?: boolean;
};

/** @public */
declare class FindCursor<TSchema = any> extends ExplainableCursor<TSchema> {
  /* Excluded from this release type: cursorFilter */
  /* Excluded from this release type: numReturned */
  /* Excluded from this release type: findOptions */
  /* Excluded from this release type: __constructor */
  clone(): FindCursor<TSchema>;
  map<T>(transform: (doc: TSchema) => T): FindCursor<T>;
  /* Excluded from this release type: _initialize */
  /* Excluded from this release type: getMore */
  /**
   * Get the count of documents for this cursor
   * @deprecated Use `collection.estimatedDocumentCount` or `collection.countDocuments` instead
   */
  count(options?: CountOptions): Promise<number>;
  /** Execute the explain for the cursor */
  explain(): Promise<Document_2>;
  explain(verbosity: ExplainVerbosityLike | ExplainCommandOptions): Promise<Document_2>;
  explain(options: {
    timeoutMS?: number;
  }): Promise<Document_2>;
  explain(verbosity: ExplainVerbosityLike | ExplainCommandOptions, options: {
    timeoutMS?: number;
  }): Promise<Document_2>;
  /** Set the cursor query */
  filter(filter: Document_2): this;
  /**
   * Set the cursor hint
   *
   * @param hint - If specified, then the query system will only consider plans using the hinted index.
   */
  hint(hint: Hint): this;
  /**
   * Set the cursor min
   *
   * @param min - Specify a $min value to specify the inclusive lower bound for a specific index in order to constrain the results of find(). The $min specifies the lower bound for all keys of a specific index in order.
   */
  min(min: Document_2): this;
  /**
   * Set the cursor max
   *
   * @param max - Specify a $max value to specify the exclusive upper bound for a specific index in order to constrain the results of find(). The $max specifies the upper bound for all keys of a specific index in order.
   */
  max(max: Document_2): this;
  /**
   * Set the cursor returnKey.
   * If set to true, modifies the cursor to only return the index field or fields for the results of the query, rather than documents.
   * If set to true and the query does not use an index to perform the read operation, the returned documents will not contain any fields.
   *
   * @param value - the returnKey value.
   */
  returnKey(value: boolean): this;
  /**
   * Modifies the output of a query by adding a field $recordId to matching documents. $recordId is the internal key which uniquely identifies a document in a collection.
   *
   * @param value - The $showDiskLoc option has now been deprecated and replaced with the showRecordId field. $showDiskLoc will still be accepted for OP_QUERY stye find.
   */
  showRecordId(value: boolean): this;
  /**
   * Add a query modifier to the cursor query
   *
   * @param name - The query modifier (must start with $, such as $orderby etc)
   * @param value - The modifier value.
   */
  addQueryModifier(name: string, value: string | boolean | number | Document_2): this;
  /**
   * Add a comment to the cursor query allowing for tracking the comment in the log.
   *
   * @param value - The comment attached to this query.
   */
  comment(value: string): this;
  /**
   * Set a maxAwaitTimeMS on a tailing cursor query to allow to customize the timeout value for the option awaitData (Only supported on MongoDB 3.2 or higher, ignored otherwise)
   *
   * @param value - Number of milliseconds to wait before aborting the tailed query.
   */
  maxAwaitTimeMS(value: number): this;
  /**
   * Set a maxTimeMS on the cursor query, allowing for hard timeout limits on queries (Only supported on MongoDB 2.6 or higher)
   *
   * @param value - Number of milliseconds to wait before aborting the query.
   */
  maxTimeMS(value: number): this;
  /**
   * Add a project stage to the aggregation pipeline
   *
   * @remarks
   * In order to strictly type this function you must provide an interface
   * that represents the effect of your projection on the result documents.
   *
   * By default chaining a projection to your cursor changes the returned type to the generic
   * {@link Document} type.
   * You should specify a parameterized type to have assertions on your final results.
   *
   * @example
   * ```typescript
   * // Best way
   * const docs: FindCursor<{ a: number }> = cursor.project<{ a: number }>({ _id: 0, a: true });
   * // Flexible way
   * const docs: FindCursor<Document> = cursor.project({ _id: 0, a: true });
   * ```
   *
   * @remarks
   *
   * **Note for Typescript Users:** adding a transform changes the return type of the iteration of this cursor,
   * it **does not** return a new instance of a cursor. This means when calling project,
   * you should always assign the result to a new variable in order to get a correctly typed cursor variable.
   * Take note of the following example:
   *
   * @example
   * ```typescript
   * const cursor: FindCursor<{ a: number; b: string }> = coll.find();
   * const projectCursor = cursor.project<{ a: number }>({ _id: 0, a: true });
   * const aPropOnlyArray: {a: number}[] = await projectCursor.toArray();
   *
   * // or always use chaining and save the final cursor
   *
   * const cursor = coll.find().project<{ a: string }>({
   *   _id: 0,
   *   a: { $convert: { input: '$a', to: 'string' }
   * }});
   * ```
   */
  project<T extends Document_2 = Document_2>(value: Document_2): FindCursor<T>;
  /**
   * Sets the sort order of the cursor query.
   *
   * @param sort - The key or keys set for the sort.
   * @param direction - The direction of the sorting (1 or -1).
   */
  sort(sort: Sort | string, direction?: SortDirection): this;
  /**
   * Allows disk use for blocking sort operations exceeding 100MB memory. (MongoDB 3.2 or higher)
   *
   * @remarks
   * {@link https://www.mongodb.com/docs/manual/reference/command/find/#find-cmd-allowdiskuse | find command allowDiskUse documentation}
   */
  allowDiskUse(allow?: boolean): this;
  /**
   * Set the collation options for the cursor.
   *
   * @param value - The cursor collation options (MongoDB 3.4 or higher) settings for update operation (see 3.4 documentation for available fields).
   */
  collation(value: CollationOptions): this;
  /**
   * Set the limit for the cursor.
   *
   * @param value - The limit for the cursor query.
   */
  limit(value: number): this;
  /**
   * Set the skip for the cursor.
   *
   * @param value - The skip for the cursor query.
   */
  skip(value: number): this;
}

/** @public */
declare interface FindOneAndDeleteOptions extends CommandOperationOptions {
  /** An optional hint for query optimization. See the {@link https://www.mongodb.com/docs/manual/reference/command/update/#update-command-hint|update command} reference for more information.*/
  hint?: Document_2;
  /** Limits the fields to return for all matching documents. */
  projection?: Document_2;
  /** Determines which document the operation modifies if the query selects multiple documents. */
  sort?: Sort;
  /** Map of parameter names and values that can be accessed using $$var (requires MongoDB 5.0). */
  let?: Document_2;
  /**
   * Return the ModifyResult instead of the modified document. Defaults to false
   */
  includeResultMetadata?: boolean;
}

/** @public */
declare interface FindOneAndReplaceOptions extends CommandOperationOptions {
  /** Allow driver to bypass schema validation. */
  bypassDocumentValidation?: boolean;
  /** An optional hint for query optimization. See the {@link https://www.mongodb.com/docs/manual/reference/command/update/#update-command-hint|update command} reference for more information.*/
  hint?: Document_2;
  /** Limits the fields to return for all matching documents. */
  projection?: Document_2;
  /** When set to 'after', returns the updated document rather than the original. The default is 'before'.  */
  returnDocument?: ReturnDocument;
  /** Determines which document the operation modifies if the query selects multiple documents. */
  sort?: Sort;
  /** Upsert the document if it does not exist. */
  upsert?: boolean;
  /** Map of parameter names and values that can be accessed using $$var (requires MongoDB 5.0). */
  let?: Document_2;
  /**
   * Return the ModifyResult instead of the modified document. Defaults to false
   */
  includeResultMetadata?: boolean;
}

/** @public */
declare interface FindOneAndUpdateOptions extends CommandOperationOptions {
  /** Optional list of array filters referenced in filtered positional operators */
  arrayFilters?: Document_2[];
  /** Allow driver to bypass schema validation. */
  bypassDocumentValidation?: boolean;
  /** An optional hint for query optimization. See the {@link https://www.mongodb.com/docs/manual/reference/command/update/#update-command-hint|update command} reference for more information.*/
  hint?: Document_2;
  /** Limits the fields to return for all matching documents. */
  projection?: Document_2;
  /** When set to 'after', returns the updated document rather than the original. The default is 'before'.  */
  returnDocument?: ReturnDocument;
  /** Determines which document the operation modifies if the query selects multiple documents. */
  sort?: Sort;
  /** Upsert the document if it does not exist. */
  upsert?: boolean;
  /** Map of parameter names and values that can be accessed using $$var (requires MongoDB 5.0). */
  let?: Document_2;
  /**
   * Return the ModifyResult instead of the modified document. Defaults to false
   */
  includeResultMetadata?: boolean;
}

/**
 * A builder object that is returned from {@link BulkOperationBase#find}.
 * Is used to build a write operation that involves a query filter.
 *
 * @public
 */
declare class FindOperators {
  bulkOperation: BulkOperationBase;
  /* Excluded from this release type: __constructor */
  /** Add a multiple update operation to the bulk operation */
  update(updateDocument: Document_2 | Document_2[]): BulkOperationBase;
  /** Add a single update operation to the bulk operation */
  updateOne(updateDocument: Document_2 | Document_2[]): BulkOperationBase;
  /** Add a replace one operation to the bulk operation */
  replaceOne(replacement: Document_2): BulkOperationBase;
  /** Add a delete one operation to the bulk operation */
  deleteOne(): BulkOperationBase;
  /** Add a delete many operation to the bulk operation */
  delete(): BulkOperationBase;
  /** Upsert modifier for update bulk operation, noting that this operation is an upsert. */
  upsert(): this;
  /** Specifies the collation for the query condition. */
  collation(collation: CollationOptions): this;
  /** Specifies arrayFilters for UpdateOne or UpdateMany bulk operations. */
  arrayFilters(arrayFilters: Document_2[]): this;
  /** Specifies hint for the bulk operation. */
  hint(hint: Hint): this;
}

/**
 * @public
 * @typeParam TSchema - Unused schema definition, deprecated usage, only specify `FindOptions` with no generic
 */
declare interface FindOptions<TSchema extends Document_2 = Document_2> extends Omit<CommandOperationOptions, 'writeConcern' | 'explain'>, AbstractCursorOptions {
  /** Sets the limit of documents returned in the query. */
  limit?: number;
  /** Set to sort the documents coming back from the query. Array of indexes, `[['a', 1]]` etc. */
  sort?: Sort;
  /** The fields to return in the query. Object of fields to either include or exclude (one of, not both), `{'a':1, 'b': 1}` **or** `{'a': 0, 'b': 0}` */
  projection?: Document_2;
  /** Set to skip N documents ahead in your query (useful for pagination). */
  skip?: number;
  /** Tell the query to use specific indexes in the query. Object of indexes to use, `{'_id':1}` */
  hint?: Hint;
  /** Specify if the cursor can timeout. */
  timeout?: boolean;
  /** Specify if the cursor is tailable. */
  tailable?: boolean;
  /** Specify if the cursor is a tailable-await cursor. Requires `tailable` to be true */
  awaitData?: boolean;
  /** Set the batchSize for the getMoreCommand when iterating over the query results. */
  batchSize?: number;
  /** If true, returns only the index keys in the resulting documents. */
  returnKey?: boolean;
  /** The inclusive lower bound for a specific index */
  min?: Document_2;
  /** The exclusive upper bound for a specific index */
  max?: Document_2;
  /** Number of milliseconds to wait before aborting the query. */
  maxTimeMS?: number;
  /** The maximum amount of time for the server to wait on new documents to satisfy a tailable cursor query. Requires `tailable` and `awaitData` to be true */
  maxAwaitTimeMS?: number;
  /** The server normally times out idle cursors after an inactivity period (10 minutes) to prevent excess memory use. Set this option to prevent that. */
  noCursorTimeout?: boolean;
  /** Specify collation (MongoDB 3.4 or higher) settings for update operation (see 3.4 documentation for available fields). */
  collation?: CollationOptions;
  /** Allows disk use for blocking sort operations exceeding 100MB memory. (MongoDB 3.2 or higher) */
  allowDiskUse?: boolean;
  /** Determines whether to close the cursor after the first batch. Defaults to false. */
  singleBatch?: boolean;
  /** For queries against a sharded collection, allows the command (or subsequent getMore commands) to return partial results, rather than an error, if one or more queried shards are unavailable. */
  allowPartialResults?: boolean;
  /** Determines whether to return the record identifier for each document. If true, adds a field $recordId to the returned documents. */
  showRecordId?: boolean;
  /** Map of parameter names and values that can be accessed using $$var (requires MongoDB 5.0). */
  let?: Document_2;
  /**
   * Option to enable an optimized code path for queries looking for a particular range of `ts` values in the oplog. Requires `tailable` to be true.
   * @deprecated Starting from MongoDB 4.4 this flag is not needed and will be ignored.
   */
  oplogReplay?: boolean;
  /**
   * Specifies the verbosity mode for the explain output.
   * @deprecated This API is deprecated in favor of `collection.find().explain()`.
   */
  explain?: ExplainOptions['explain'];
  /* Excluded from this release type: timeoutMode */
}

/** @public */
declare type Flatten<Type> = Type extends ReadonlyArray<infer Item> ? Item : Type;

/**
 * @public
 * Configuration options for making an AWS encryption key
 */
declare interface GCPEncryptionKeyOptions {
  /**
   * GCP project ID
   */
  projectId: string;
  /**
   * Location name (e.g. "global")
   */
  location: string;
  /**
   * Key ring name
   */
  keyRing: string;
  /**
   * Key name
   */
  keyName: string;
  /**
   * Key version
   */
  keyVersion?: string | undefined;
  /**
   * KMS URL, defaults to `https://www.googleapis.com/auth/cloudkms`
   */
  endpoint?: string | undefined;
}

/** @public */
declare type GCPKMSProviderConfiguration = {
  /**
   * The service account email to authenticate
   */
  email: string;
  /**
   * A PKCS#8 encrypted key. This can either be a base64 string or a binary representation
   */
  privateKey: string | Buffer;
  /**
   * If present, a host with optional port. E.g. "example.com" or "example.com:443".
   * Defaults to "oauth2.googleapis.com"
   */
  endpoint?: string | undefined;
} | {
  /**
   * If present, an access token to authenticate with GCP.
   */
  accessToken: string;
};
declare interface GenericCollectionSchema {
  schema: Document_2;
}
declare interface GenericDatabaseSchema {
  [key: string]: GenericCollectionSchema;
}

/** @public */
declare type GenericListener = (...args: any[]) => void;
declare interface GenericServerSideSchema {
  [key: string]: GenericDatabaseSchema;
}
declare type GetShardDistributionResult = {
  Totals: {
    data: string;
    docs: number;
    chunks: number;
  } & {
    [individualShardDistribution: `Shard ${string}`]: [`${number} % data`, `${number} % docs in cluster`, `${string} avg obj size on shard`];
  };
  [individualShardResult: `Shard ${string} at ${string}`]: {
    data: string;
    docs: number;
    chunks: number;
    'estimated data per chunk': string;
    'estimated docs per chunk': number;
  };
};
declare interface GlobalConfigFileLoadEvent {
  filename: string;
  found: boolean;
}

/** @public */
declare const GSSAPICanonicalizationValue: Readonly<{
  readonly on: true;
  readonly off: false;
  readonly none: "none";
  readonly forward: "forward";
  readonly forwardAndReverse: "forwardAndReverse";
}>;

/** @public */
declare type GSSAPICanonicalizationValue = (typeof GSSAPICanonicalizationValue)[keyof typeof GSSAPICanonicalizationValue];

/** @public */
declare interface HedgeOptions {
  /** Explicitly enable or disable hedged reads. */
  enabled?: boolean;
}
declare class Help {
  private help;
  private docs;
  private attr;
  constructor(properties: HelpProperties, options?: HelpOptions);
  [asPrintable](): HelpProperties;
  get [shellApiType](): string;
}
declare type HelpOptions = {
  translate(key: string): string | undefined;
};
declare type HelpProperties = {
  help: string;
  docs?: string;
  attr?: HelpPropertiesAttr[];
};
declare type HelpPropertiesAttr = {
  name?: string;
  description: string;
};

/** @public */
declare type Hint = string | Document_2;

/** @public */
declare class HostAddress {
  host: string | undefined;
  port: number | undefined;
  socketPath: string | undefined;
  isIPv6: boolean;
  constructor(hostString: string);
  inspect(): string;
  toString(): string;
  static fromString(this: void, s: string): HostAddress;
  static fromHostPort(host: string, port: number): HostAddress;
  static fromSrvRecord({
    name,
    port
  }: SrvRecord): HostAddress;
  toHostPort(): {
    host: string;
    port: number;
  };
}
declare type HostInformation = {
  is_localhost?: boolean;
  is_atlas_url?: boolean;
  is_do_url?: boolean;
};

/** @public */
declare type HttpOptions = Partial<Pick<RequestOptions, 'agent' | 'ca' | 'cert' | 'crl' | 'headers' | 'key' | 'lookup' | 'passphrase' | 'pfx' | 'timeout'>>;

/**
 * The information returned by the server on the IDP server.
 * @public
 */
declare interface IdPInfo {
  /**
   * A URL which describes the Authentication Server. This identifier should
   * be the iss of provided access tokens, and be viable for RFC8414 metadata
   * discovery and RFC9207 identification.
   */
  issuer: string;
  /** A unique client ID for this OIDC client. */
  clientId: string;
  /** A list of additional scopes to request from IdP. */
  requestScopes?: string[];
}

/**
 * A copy of the Node.js driver's `IdPServerInfo`
 * @public
 */
declare interface IdPServerInfo {
  issuer: string;
  clientId: string;
  requestScopes?: string[];
}

/**
 * A copy of the Node.js driver's `IdPServerResponse`
 * @public
 */
declare interface IdPServerResponse {
  accessToken: string;
  expiresInSeconds?: number;
  refreshToken?: string;
}

/** @public */
declare interface IndexDescription extends Pick<CreateIndexesOptions, 'background' | 'unique' | 'partialFilterExpression' | 'sparse' | 'hidden' | 'expireAfterSeconds' | 'storageEngine' | 'version' | 'weights' | 'default_language' | 'language_override' | 'textIndexVersion' | '2dsphereIndexVersion' | 'bits' | 'min' | 'max' | 'bucketSize' | 'wildcardProjection'> {
  collation?: CollationOptions;
  name?: string;
  key: {
    [key: string]: IndexDirection;
  } | Map<string, IndexDirection>;
}

/** @public */
declare type IndexDescriptionCompact = Record<string, [name: string, direction: IndexDirection][]>;

/**
 * @public
 * The index information returned by the listIndexes command. https://www.mongodb.com/docs/manual/reference/command/listIndexes/#mongodb-dbcommand-dbcmd.listIndexes
 */
declare type IndexDescriptionInfo = Omit<IndexDescription, 'key' | 'version'> & {
  key: {
    [key: string]: IndexDirection;
  };
  v?: IndexDescription['version'];
} & Document_2;

/** @public */
declare type IndexDirection = -1 | 1 | '2d' | '2dsphere' | 'text' | 'geoHaystack' | 'hashed' | number;

/** @public */
declare interface IndexInformationOptions extends ListIndexesOptions {
  /**
   * When `true`, an array of index descriptions is returned.
   * When `false`, the driver returns an object that with keys corresponding to index names with values
   * corresponding to the entries of the indexes' key.
   *
   * For example, the given the following indexes:
   * ```
   * [ { name: 'a_1', key: { a: 1 } }, { name: 'b_1_c_1' , key: { b: 1, c: 1 } }]
   * ```
   *
   * When `full` is `true`, the above array is returned.  When `full` is `false`, the following is returned:
   * ```
   * {
   *   'a_1': [['a', 1]],
   *   'b_1_c_1': [['b', 1], ['c', 1]],
   * }
   * ```
   */
  full?: boolean;
}

/** @public */
declare type IndexSpecification = OneOrMore<string | [string, IndexDirection] | {
  [key: string]: IndexDirection;
} | Map<string, IndexDirection>>;

/** Given an object shaped type, return the type of the _id field or default to ObjectId @public */
declare type InferIdType<TSchema> = TSchema extends {
  _id: infer IdType;
} ? Record<any, never> extends IdType ? never : IdType : TSchema extends {
  _id?: infer IdType;
} ? unknown extends IdType ? ObjectId : IdType : ObjectId;

/** @public */
declare interface InsertManyResult<TSchema = Document_2> {
  /** Indicates whether this write result was acknowledged. If not, then all other members of this result will be undefined */
  acknowledged: boolean;
  /** The number of inserted documents for this operations */
  insertedCount: number;
  /** Map of the index of the inserted document to the id of the inserted document */
  insertedIds: {
    [key: number]: InferIdType<TSchema>;
  };
}
declare class InsertManyResult_2 extends ShellApiValueClass {
  acknowledged: boolean;
  insertedIds: {
    [key: number]: ObjectId;
  };
  constructor(acknowledged: boolean, insertedIds: {
    [key: number]: ObjectId;
  });
}

/** @public */
declare interface InsertOneModel<TSchema extends Document_2 = Document_2> {
  /** The document to insert. */
  document: OptionalId<TSchema>;
}

/** @public */
declare interface InsertOneOptions extends CommandOperationOptions {
  /** Allow driver to bypass schema validation. */
  bypassDocumentValidation?: boolean;
  /** Force server to assign _id values instead of driver. */
  forceServerObjectId?: boolean;
}

/** @public */
declare interface InsertOneResult<TSchema = Document_2> {
  /** Indicates whether this write result was acknowledged. If not, then all other members of this result will be undefined */
  acknowledged: boolean;
  /** The identifier that was inserted. If the server generated the identifier, this value will be null as the driver does not have access to that data */
  insertedId: InferIdType<TSchema>;
}
declare class InsertOneResult_2 extends ShellApiValueClass {
  acknowledged: boolean;
  insertedId: ObjectId | undefined;
  constructor(acknowledged: boolean, insertedId?: ObjectId);
}
declare const instanceStateSymbol: unique symbol;
declare const instanceStateSymbol_2: unique symbol;

/** @public */
declare type IntegerType = number | Int32 | Long | bigint;
declare class InterruptFlag {
  private interrupted;
  private onInterruptListeners;
  isSet(): boolean;
  checkpoint(): void;
  asPromise(): InterruptWatcher;
  set(): Promise<void>;
  reset(): void;
  withOverrideInterruptBehavior<Action extends (watcher: InterruptWatcher) => any, OnInterrupt extends () => Promise<void> | void>(fn: Action, onInterrupt: OnInterrupt): Promise<ReturnType<Action>>;
}
declare interface InterruptWatcher {
  destroy: () => void;
  promise: Promise<never>;
}

/** @public */
declare type IsAny<Type, ResultIfAny, ResultIfNotAny> = true extends false & Type ? ResultIfAny : ResultIfNotAny;

/** @public */
declare type KeysOfAType<TSchema, Type> = { [key in keyof TSchema]: NonNullable<TSchema[key]> extends Type ? key : never }[keyof TSchema];

/** @public */
declare type KeysOfOtherType<TSchema, Type> = { [key in keyof TSchema]: NonNullable<TSchema[key]> extends Type ? never : key }[keyof TSchema];
declare class KeyVault extends ShellApiWithMongoClass {
  _mongo: Mongo;
  _clientEncryption: ClientEncryption_2;
  private _keyColl;
  constructor(clientEncryption: ClientEncryption_2);
  _init(): Promise<void>;
  [asPrintable](): string;
  /*
  Creates a data encryption key for use with client-side field level encryption.
  */
  createKey(kms: 'local', keyAltNames?: string[]): Binary;
  /*
  Creates a data encryption key for use with client-side field level encryption.
  */
  createKey(kms: ClientEncryptionDataKeyProvider, legacyMasterKey: string, keyAltNames?: string[]): Binary;
  /*
  Creates a data encryption key for use with client-side field level encryption.
  */
  createKey(kms: ClientEncryptionDataKeyProvider, options: MasterKey | DataKeyEncryptionKeyOptions | undefined): Binary;
  /*
  Creates a data encryption key for use with client-side field level encryption.
  */
  createKey(kms: ClientEncryptionDataKeyProvider, options: MasterKey | DataKeyEncryptionKeyOptions | undefined, keyAltNames: string[]): Binary;
  /*
  Retreives the specified data encryption key from the key vault.
  */
  getKey(keyId: Binary): Document_2 | null;
  /*
  Retrieves keys with the specified key alternative name.
  */
  getKeyByAltName(keyAltName: string): Document_2 | null;
  /*
  Retrieves all keys in the key vault.
  */
  getKeys(): Cursor;
  /*
  Deletes the specified data encryption key from the key vault.
  */
  deleteKey(keyId: Binary): DeleteResult_2 | Document_2;
  /*
  Associates a key alternative name to the specified data encryption key.
  */
  addKeyAlternateName(keyId: Binary, keyAltName: string): Document_2 | null;
  /*
  Removes a key alternative name from the specified data encryption key.
  */
  removeKeyAlternateName(keyId: Binary, keyAltName: string): Document_2 | null;
  /*
  Re-wrap one, more, or all data keys with another KMS provider, or re-wrap using the same one.
  */
  rewrapManyDataKey(filter: Document_2, options?: Document_2): Document_2;
  /*
  Alias of KeyVault.createKey()
  */
  createDataKey(...args: Parameters<KeyVault['createKey']>): ReturnType<KeyVault['createKey']>;
  /*
  Alias of KeyVault.removeKeyAlternateName()
  */
  removeKeyAltName(...args: Parameters<KeyVault['removeKeyAlternateName']>): ReturnType<KeyVault['removeKeyAlternateName']>;
  /*
  Alias of KeyVault.addKeyAlternateName()
  */
  addKeyAltName(...args: Parameters<KeyVault['addKeyAlternateName']>): ReturnType<KeyVault['addKeyAlternateName']>;
}

/**
 * @public
 * Configuration options for making a KMIP encryption key
 */
declare interface KMIPEncryptionKeyOptions {
  /**
   * keyId is the KMIP Unique Identifier to a 96 byte KMIP Secret Data managed object.
   *
   * If keyId is omitted, a random 96 byte KMIP Secret Data managed object will be created.
   */
  keyId?: string;
  /**
   * Host with optional port.
   */
  endpoint?: string;
  /**
   * If true, this key should be decrypted by the KMIP server.
   *
   * Requires `mongodb-client-encryption>=6.0.1`.
   */
  delegated?: boolean;
}

/** @public */
declare interface KMIPKMSProviderConfiguration {
  /**
   * The output endpoint string.
   * The endpoint consists of a hostname and port separated by a colon.
   * E.g. "example.com:123". A port is always present.
   */
  endpoint?: string;
}

/**
 * @public
 * Configuration options that are used by specific KMS providers during key generation, encryption, and decryption.
 *
 * Named KMS providers _are not supported_ for automatic KMS credential fetching.
 */
declare interface KMSProviders {
  /**
   * Configuration options for using 'aws' as your KMS provider
   */
  aws?: AWSKMSProviderConfiguration | Record<string, never>;
  [key: `aws:${string}`]: AWSKMSProviderConfiguration;
  /**
   * Configuration options for using 'local' as your KMS provider
   */
  local?: LocalKMSProviderConfiguration;
  [key: `local:${string}`]: LocalKMSProviderConfiguration;
  /**
   * Configuration options for using 'kmip' as your KMS provider
   */
  kmip?: KMIPKMSProviderConfiguration;
  [key: `kmip:${string}`]: KMIPKMSProviderConfiguration;
  /**
   * Configuration options for using 'azure' as your KMS provider
   */
  azure?: AzureKMSProviderConfiguration | Record<string, never>;
  [key: `azure:${string}`]: AzureKMSProviderConfiguration;
  /**
   * Configuration options for using 'gcp' as your KMS provider
   */
  gcp?: GCPKMSProviderConfiguration | Record<string, never>;
  [key: `gcp:${string}`]: GCPKMSProviderConfiguration;
}

/** @public */
declare const LEGAL_TCP_SOCKET_OPTIONS: readonly ["autoSelectFamily", "autoSelectFamilyAttemptTimeout", "family", "hints", "localAddress", "localPort", "lookup"];

/** @public */
declare const LEGAL_TLS_SOCKET_OPTIONS: readonly ["allowPartialTrustChain", "ALPNProtocols", "ca", "cert", "checkServerIdentity", "ciphers", "crl", "ecdhCurve", "key", "minDHSize", "passphrase", "pfx", "rejectUnauthorized", "secureContext", "secureProtocol", "servername", "session"];

/** @public */
declare class ListCollectionsCursor<T extends Pick<CollectionInfo, 'name' | 'type'> | CollectionInfo = Pick<CollectionInfo, 'name' | 'type'> | CollectionInfo> extends AbstractCursor<T> {
  parent: Db;
  filter: Document_2;
  options?: ListCollectionsOptions & Abortable;
  constructor(db: Db, filter: Document_2, options?: ListCollectionsOptions & Abortable);
  clone(): ListCollectionsCursor<T>;
  /* Excluded from this release type: _initialize */
}

/** @public */
declare interface ListCollectionsOptions extends Omit<CommandOperationOptions, 'writeConcern'>, Abortable {
  /** Since 4.0: If true, will only return the collection name in the response, and will omit additional info */
  nameOnly?: boolean;
  /** Since 4.0: If true and nameOnly is true, allows a user without the required privilege (i.e. listCollections action on the database) to run the command when access control is enforced. */
  authorizedCollections?: boolean;
  /** The batchSize for the returned command cursor or if pre 2.8 the systems batch collection */
  batchSize?: number;
  /* Excluded from this release type: timeoutMode */
  /* Excluded from this release type: timeoutContext */
}

/** @public */
declare interface ListDatabasesOptions extends CommandOperationOptions {
  /** A query predicate that determines which databases are listed */
  filter?: Document_2;
  /** A flag to indicate whether the command should return just the database names, or return both database names and size information */
  nameOnly?: boolean;
  /** A flag that determines which databases are returned based on the user privileges when access control is enabled */
  authorizedDatabases?: boolean;
}

/** @public */
declare interface ListDatabasesResult {
  databases: ({
    name: string;
    sizeOnDisk?: number;
    empty?: boolean;
  } & Document_2)[];
  totalSize?: number;
  totalSizeMb?: number;
  ok: 1 | 0;
}

/** @public */
declare class ListIndexesCursor extends AbstractCursor {
  parent: Collection_2;
  options?: ListIndexesOptions;
  constructor(collection: Collection_2, options?: ListIndexesOptions);
  clone(): ListIndexesCursor;
  /* Excluded from this release type: _initialize */
}

/** @public */
declare type ListIndexesOptions = AbstractCursorOptions & {
  /* Excluded from this release type: omitMaxTimeMS */
};

/** @public */
declare class ListSearchIndexesCursor extends AggregationCursor<{
  name: string;
}> {
  /* Excluded from this release type: __constructor */
}

/** @public */
declare type ListSearchIndexesOptions = Omit<AggregateOptions, 'readConcern' | 'writeConcern'>;
declare const loadCallNestingLevelSymbol: unique symbol;

/** @public */
declare interface LocalKMSProviderConfiguration {
  /**
   * The master key used to encrypt/decrypt data keys.
   * A 96-byte long Buffer or base64 encoded string.
   */
  key: Binary | Uint8Array | string;
}

/** @public */
declare interface Log extends Record<string, any> {
  t: Date;
  c: MongoLoggableComponent;
  s: SeverityLevel;
  message?: string;
}

/** @public */
declare interface LogComponentSeveritiesClientOptions {
  /** Optional severity level for command component */
  command?: SeverityLevel;
  /** Optional severity level for topology component */
  topology?: SeverityLevel;
  /** Optional severity level for server selection component */
  serverSelection?: SeverityLevel;
  /** Optional severity level for connection component */
  connection?: SeverityLevel;
  /** Optional severity level for client component */
  client?: SeverityLevel;
  /** Optional default severity level to be used if any of the above are unset */
  default?: SeverityLevel;
}
declare type LongWithoutAccidentallyExposedMethods = Omit<typeof bson.Long, 'fromExtendedJSON'>;
declare type MapReduceShellOptions = Document_2 | string;
declare type MasterKey = AWSEncryptionKeyOptions | AzureEncryptionKeyOptions | GCPEncryptionKeyOptions;

/** @public */
declare type MatchKeysAndValues<TSchema> = Readonly<Partial<TSchema>> & Record<string, any>;

/** @public */
declare interface ModifyResult<TSchema = Document_2> {
  value: WithId<TSchema> | null;
  lastErrorObject?: Document_2;
  ok: 0 | 1;
}
export declare class Mongo<M extends GenericServerSideSchema = GenericServerSideSchema> extends ShellApiClass {
  private __serviceProvider;
  readonly _databases: Record<StringKey<M>, DatabaseWithSchema<M>>;
  _instanceState: ShellInstanceState;
  _connectionInfo: ConnectionInfo;
  private _explicitEncryptionOnly;
  private _keyVault;
  private _clientEncryption;
  private _readPreferenceWasExplicitlyRequested;
  private _cachedDatabaseNames;
  constructor(instanceState: ShellInstanceState, uri?: string | Mongo, fleOptions?: ClientSideFieldLevelEncryptionOptions, otherOptions?: {
    api?: ServerApi | ServerApiVersion;
  }, sp?: ServiceProvider);
  get _uri(): string;
  get _fleOptions(): AutoEncryptionOptions | undefined;
  get _serviceProvider(): ServiceProvider;
  set _serviceProvider(sp: ServiceProvider);
  _displayBatchSize(): Promise<number>;
  [asPrintable](): string;
  private _emitMongoApiCall;
  /*
  Creates a connection to a MongoDB instance and returns the reference to the database.
  */
  connect(username?: string, password?: string): Promise<void>;
  _getDb<K extends StringKey<M>>(name: K): DatabaseWithSchema<M, M[K]>;
  /*
  Returns the specified Database of the Mongo object.
  */
  getDB<K extends StringKey<M>>(db: K): DatabaseWithSchema<M, M[K]>;
  /*
  Returns the specified Collection of the Mongo object.
  */
  getCollection<KD extends StringKey<M>, KC extends StringKey<M[KD]>>(name: `${KD}.${KC}`): CollectionWithSchema<M, M[KD], M[KD][KC]>;
  /*
  Returns the connection string for current session
  */
  getURI(): string;
  use(db: StringKey<M>): string;
  _listDatabases(opts?: ListDatabasesOptions): Promise<{
    databases: {
      name: string;
      sizeOnDisk: number | ShellBson['Long'];
      empty: boolean;
    }[];
    ok: 1;
  }>;
  _getDatabaseNamesForCompletion(): Promise<string[]>;
  /*
  Returns information about all databases. Uses the listDatabases command.
  */
  getDBs(options?: ListDatabasesOptions): {
    databases: {
      name: string;
      sizeOnDisk: number | ShellBson['Long'];
      empty: boolean;
    }[];
    ok: 1;
  };
  /*
  Performs multiple write operations across databases and collections with controls for order of execution.
  */
  bulkWrite(models: AnyClientBulkWriteModel<Document_2>[], options?: ClientBulkWriteOptions): ClientBulkWriteResult_2;
  /*
  Returns an array of all database names. Uses the listDatabases command.
  */
  getDBNames(options?: ListDatabasesOptions): StringKey<M>[];
  show(cmd: string, arg?: string, tracked?: boolean): CommandResult;
  /*
  Closes a Mongo object, disposing of related resources and closing the underlying connection.
  */
  close(force?: boolean): Promise<void>;
  _suspend(): Promise<() => Promise<void>>;
  /*
  Returns the ReadPreference Mode set for the connection.
  */
  getReadPrefMode(): ReadPreferenceMode;
  /*
  Returns the ReadPreference TagSet set for the connection.
  */
  getReadPrefTagSet(): Record<string, string>[] | undefined;
  /*
  Returns the ReadPreference set for the connection.
  */
  getReadPref(): ReadPreference;
  _getExplicitlyRequestedReadPref(): {
    readPreference: ReadPreference;
  } | undefined;
  /*
  Returns the ReadConcern set for the connection.
  */
  getReadConcern(): string | undefined;
  /*
  Returns the WriteConcern set for the connection.
  */
  getWriteConcern(): WriteConcern | undefined;
  /*
  Sets the ReadPreference for the connection
  */
  setReadPref(mode: ReadPreferenceLike, tagSet?: Record<string, string>[], hedgeOptions?: Document_2): void;
  /*
  Sets the ReadConcern for the connection
  */
  setReadConcern(level: ReadConcernLevel): void;
  /*
  Sets the WriteConcern for the connection
  */
  setWriteConcern(concern: WriteConcern): void;
  /*
  Sets the WriteConcern for the connection
  */
  setWriteConcern(wValue: string | number, wtimeoutMSValue?: number | undefined, jValue?: boolean | undefined): void;
  /*
  Starts a session for the connection.
  */
  startSession(options?: Document_2): Session;
  /*
  This method is deprecated. It is not possible to set causal consistency for an entire connection due to driver limitations, use startSession({causalConsistency: <>}) instead.
  */
  setCausalConsistency(): void;
  /*
  This method is deprecated. Causal consistency for drivers is set via Mongo.startSession and can be checked via session.getOptions. The default value is true
  */
  isCausalConsistency(): void;
  /*
  This method is deprecated
  */
  setSlaveOk(): void;
  /*
  This method is deprecated. Use .setReadPref() instead
  */
  setSecondaryOk(): void;
  /*
  Opens a change stream cursor on the connection
  */
  watch(pipeline?: Document_2[] | ChangeStreamOptions, options?: ChangeStreamOptions): ChangeStreamCursor;
  /*
  Returns the ClientEncryption object for the current database collection. The ClientEncryption object supports explicit (manual) encryption and decryption of field values for Client-Side field level encryption.
  */
  getClientEncryption(): ClientEncryption_2;
  /*
  Returns the KeyVault object for the current database connection. The KeyVault object supports data encryption key management for Client-side field level encryption.
  */
  getKeyVault(): KeyVault;
  /*
  Returns the hashed value for the input using the same hashing function as a hashed index.
  */
  convertShardKeyToHashed(value: any): unknown;
}

/** @public */
declare const MONGO_CLIENT_EVENTS: readonly ["connectionPoolCreated", "connectionPoolReady", "connectionPoolCleared", "connectionPoolClosed", "connectionCreated", "connectionReady", "connectionClosed", "connectionCheckOutStarted", "connectionCheckOutFailed", "connectionCheckedOut", "connectionCheckedIn", "commandStarted", "commandSucceeded", "commandFailed", "serverOpening", "serverClosed", "serverDescriptionChanged", "topologyOpening", "topologyClosed", "topologyDescriptionChanged", "error", "timeout", "close", "serverHeartbeatStarted", "serverHeartbeatSucceeded", "serverHeartbeatFailed"];

/**
 * The **MongoClient** class is a class that allows for making Connections to MongoDB.
 * @public
 *
 * @remarks
 * The programmatically provided options take precedence over the URI options.
 *
 * @example
 * ```ts
 * import { MongoClient } from 'mongodb';
 *
 * // Enable command monitoring for debugging
 * const client = new MongoClient('mongodb://localhost:27017', { monitorCommands: true });
 *
 * client.on('commandStarted', started => console.log(started));
 * client.db().collection('pets');
 * await client.insertOne({ name: 'spot', kind: 'dog' });
 * ```
 */
declare class MongoClient extends TypedEventEmitter<MongoClientEvents> implements AsyncDisposable_2 {
  /* Excluded from this release type: s */
  /* Excluded from this release type: topology */
  /* Excluded from this release type: mongoLogger */
  /* Excluded from this release type: connectionLock */
  /* Excluded from this release type: closeLock */
  /**
   * The consolidate, parsed, transformed and merged options.
   */
  readonly options: Readonly<Omit<MongoOptions, 'monitorCommands' | 'ca' | 'crl' | 'key' | 'cert'>> & Pick<MongoOptions, 'monitorCommands' | 'ca' | 'crl' | 'key' | 'cert'>;
  constructor(url: string, options?: MongoClientOptions);
  /* Excluded from this release type: [Symbol.asyncDispose] */
  /* Excluded from this release type: asyncDispose */
  /* Excluded from this release type: checkForNonGenuineHosts */
  get serverApi(): Readonly<ServerApi | undefined>;
  /* Excluded from this release type: monitorCommands */
  /* Excluded from this release type: monitorCommands */
  /* Excluded from this release type: autoEncrypter */
  get readConcern(): ReadConcern | undefined;
  get writeConcern(): WriteConcern | undefined;
  get readPreference(): ReadPreference;
  get bsonOptions(): BSONSerializeOptions;
  get timeoutMS(): number | undefined;
  /**
   * Executes a client bulk write operation, available on server 8.0+.
   * @param models - The client bulk write models.
   * @param options - The client bulk write options.
   * @returns A ClientBulkWriteResult for acknowledged writes and ok: 1 for unacknowledged writes.
   */
  bulkWrite<SchemaMap extends Record<string, Document_2> = Record<string, Document_2>>(models: ReadonlyArray<ClientBulkWriteModel<SchemaMap>>, options?: ClientBulkWriteOptions): Promise<ClientBulkWriteResult>;
  /**
   * Connect to MongoDB using a url
   *
   * @remarks
   * Calling `connect` is optional since the first operation you perform will call `connect` if it's needed.
   * `timeoutMS` will bound the time any operation can take before throwing a timeout error.
   * However, when the operation being run is automatically connecting your `MongoClient` the `timeoutMS` will not apply to the time taken to connect the MongoClient.
   * This means the time to setup the `MongoClient` does not count against `timeoutMS`.
   * If you are using `timeoutMS` we recommend connecting your client explicitly in advance of any operation to avoid this inconsistent execution time.
   *
   * @remarks
   * The driver will look up corresponding SRV and TXT records if the connection string starts with `mongodb+srv://`.
   * If those look ups throw a DNS Timeout error, the driver will retry the look up once.
   *
   * @see docs.mongodb.org/manual/reference/connection-string/
   */
  connect(): Promise<this>;
  /* Excluded from this release type: _connect */
  /**
   * Cleans up client-side resources used by the MongoCLient and .  This includes:
   *
   * - Closes all open, unused connections (see note).
   * - Ends all in-use sessions with {@link ClientSession#endSession|ClientSession.endSession()}.
   * - Ends all unused sessions server-side.
   * - Cleans up any resources being used for auto encryption if auto encryption is enabled.
   *
   * @remarks Any in-progress operations are not killed and any connections used by in progress operations
   * will be cleaned up lazily as operations finish.
   *
   * @param force - Force close, emitting no events
   */
  close(force?: boolean): Promise<void>;
  private _close;
  /**
   * Create a new Db instance sharing the current socket connections.
   *
   * @param dbName - The name of the database we want to use. If not provided, use database name from connection string.
   * @param options - Optional settings for Db construction
   */
  db(dbName?: string, options?: DbOptions): Db;
  /**
   * Connect to MongoDB using a url
   *
   * @remarks
   * Calling `connect` is optional since the first operation you perform will call `connect` if it's needed.
   * `timeoutMS` will bound the time any operation can take before throwing a timeout error.
   * However, when the operation being run is automatically connecting your `MongoClient` the `timeoutMS` will not apply to the time taken to connect the MongoClient.
   * This means the time to setup the `MongoClient` does not count against `timeoutMS`.
   * If you are using `timeoutMS` we recommend connecting your client explicitly in advance of any operation to avoid this inconsistent execution time.
   *
   * @remarks
   * The programmatically provided options take precedence over the URI options.
   *
   * @remarks
   * The driver will look up corresponding SRV and TXT records if the connection string starts with `mongodb+srv://`.
   * If those look ups throw a DNS Timeout error, the driver will retry the look up once.
   *
   * @see https://www.mongodb.com/docs/manual/reference/connection-string/
   */
  static connect(url: string, options?: MongoClientOptions): Promise<MongoClient>;
  /**
   * Creates a new ClientSession. When using the returned session in an operation
   * a corresponding ServerSession will be created.
   *
   * @remarks
   * A ClientSession instance may only be passed to operations being performed on the same
   * MongoClient it was started from.
   */
  startSession(options?: ClientSessionOptions): ClientSession;
  /**
   * A convenience method for creating and handling the clean up of a ClientSession.
   * The session will always be ended when the executor finishes.
   *
   * @param executor - An executor function that all operations using the provided session must be invoked in
   * @param options - optional settings for the session
   */
  withSession<T = any>(executor: WithSessionCallback<T>): Promise<T>;
  withSession<T = any>(options: ClientSessionOptions, executor: WithSessionCallback<T>): Promise<T>;
  /**
   * Create a new Change Stream, watching for new changes (insertions, updates,
   * replacements, deletions, and invalidations) in this cluster. Will ignore all
   * changes to system collections, as well as the local, admin, and config databases.
   *
   * @remarks
   * watch() accepts two generic arguments for distinct use cases:
   * - The first is to provide the schema that may be defined for all the data within the current cluster
   * - The second is to override the shape of the change stream document entirely, if it is not provided the type will default to ChangeStreamDocument of the first argument
   *
   * @remarks
   * When `timeoutMS` is configured for a change stream, it will have different behaviour depending
   * on whether the change stream is in iterator mode or emitter mode. In both cases, a change
   * stream will time out if it does not receive a change event within `timeoutMS` of the last change
   * event.
   *
   * Note that if a change stream is consistently timing out when watching a collection, database or
   * client that is being changed, then this may be due to the server timing out before it can finish
   * processing the existing oplog. To address this, restart the change stream with a higher
   * `timeoutMS`.
   *
   * If the change stream times out the initial aggregate operation to establish the change stream on
   * the server, then the client will close the change stream. If the getMore calls to the server
   * time out, then the change stream will be left open, but will throw a MongoOperationTimeoutError
   * when in iterator mode and emit an error event that returns a MongoOperationTimeoutError in
   * emitter mode.
   *
   * To determine whether or not the change stream is still open following a timeout, check the
   * {@link ChangeStream.closed} getter.
   *
   * @example
   * In iterator mode, if a next() call throws a timeout error, it will attempt to resume the change stream.
   * The next call can just be retried after this succeeds.
   * ```ts
   * const changeStream = collection.watch([], { timeoutMS: 100 });
   * try {
   *     await changeStream.next();
   * } catch (e) {
   *     if (e instanceof MongoOperationTimeoutError && !changeStream.closed) {
   *       await changeStream.next();
   *     }
   *     throw e;
   * }
   * ```
   *
   * @example
   * In emitter mode, if the change stream goes `timeoutMS` without emitting a change event, it will
   * emit an error event that returns a MongoOperationTimeoutError, but will not close the change
   * stream unless the resume attempt fails. There is no need to re-establish change listeners as
   * this will automatically continue emitting change events once the resume attempt completes.
   *
   * ```ts
   * const changeStream = collection.watch([], { timeoutMS: 100 });
   * changeStream.on('change', console.log);
   * changeStream.on('error', e => {
   *     if (e instanceof MongoOperationTimeoutError && !changeStream.closed) {
   *         // do nothing
   *     } else {
   *         changeStream.close();
   *     }
   * });
   * ```
   * @param pipeline - An array of {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation-pipeline/|aggregation pipeline stages} through which to pass change stream documents. This allows for filtering (using $match) and manipulating the change stream documents.
   * @param options - Optional settings for the command
   * @typeParam TSchema - Type of the data being detected by the change stream
   * @typeParam TChange - Type of the whole change stream document emitted
   */
  watch<TSchema extends Document_2 = Document_2, TChange extends Document_2 = ChangeStreamDocument<TSchema>>(pipeline?: Document_2[], options?: ChangeStreamOptions): ChangeStream<TSchema, TChange>;
}

/** @public */
declare type MongoClientEvents = Pick<TopologyEvents, (typeof MONGO_CLIENT_EVENTS)[number]> & {
  open(mongoClient: MongoClient): void;
};

/**
 * Describes all possible URI query options for the mongo client
 * @public
 * @see https://www.mongodb.com/docs/manual/reference/connection-string
 */
declare interface MongoClientOptions extends BSONSerializeOptions, SupportedNodeConnectionOptions {
  /** Specifies the name of the replica set, if the mongod is a member of a replica set. */
  replicaSet?: string;
  /**
   * @experimental
   * Specifies the time an operation will run until it throws a timeout error
   */
  timeoutMS?: number;
  /** Enables or disables TLS/SSL for the connection. */
  tls?: boolean;
  /** A boolean to enable or disables TLS/SSL for the connection. (The ssl option is equivalent to the tls option.) */
  ssl?: boolean;
  /** Specifies the location of a local .pem file that contains either the client's TLS/SSL certificate and key. */
  tlsCertificateKeyFile?: string;
  /** Specifies the password to de-crypt the tlsCertificateKeyFile. */
  tlsCertificateKeyFilePassword?: string;
  /** Specifies the location of a local .pem file that contains the root certificate chain from the Certificate Authority. This file is used to validate the certificate presented by the mongod/mongos instance. */
  tlsCAFile?: string;
  /** Specifies the location of a local CRL .pem file that contains the client revokation list. */
  tlsCRLFile?: string;
  /** Bypasses validation of the certificates presented by the mongod/mongos instance */
  tlsAllowInvalidCertificates?: boolean;
  /** Disables hostname validation of the certificate presented by the mongod/mongos instance. */
  tlsAllowInvalidHostnames?: boolean;
  /** Disables various certificate validations. */
  tlsInsecure?: boolean;
  /** The time in milliseconds to attempt a connection before timing out. */
  connectTimeoutMS?: number;
  /** The time in milliseconds to attempt a send or receive on a socket before the attempt times out. */
  socketTimeoutMS?: number;
  /** An array or comma-delimited string of compressors to enable network compression for communication between this client and a mongod/mongos instance. */
  compressors?: CompressorName[] | string;
  /** An integer that specifies the compression level if using zlib for network compression. */
  zlibCompressionLevel?: 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | undefined;
  /** The maximum number of hosts to connect to when using an srv connection string, a setting of `0` means unlimited hosts */
  srvMaxHosts?: number;
  /**
   * Modifies the srv URI to look like:
   *
   * `_{srvServiceName}._tcp.{hostname}.{domainname}`
   *
   * Querying this DNS URI is expected to respond with SRV records
   */
  srvServiceName?: string;
  /** The maximum number of connections in the connection pool. */
  maxPoolSize?: number;
  /** The minimum number of connections in the connection pool. */
  minPoolSize?: number;
  /** The maximum number of connections that may be in the process of being established concurrently by the connection pool. */
  maxConnecting?: number;
  /** The maximum number of milliseconds that a connection can remain idle in the pool before being removed and closed. */
  maxIdleTimeMS?: number;
  /** The maximum time in milliseconds that a thread can wait for a connection to become available. */
  waitQueueTimeoutMS?: number;
  /** Specify a read concern for the collection (only MongoDB 3.2 or higher supported) */
  readConcern?: ReadConcernLike;
  /** The level of isolation */
  readConcernLevel?: ReadConcernLevel;
  /** Specifies the read preferences for this connection */
  readPreference?: ReadPreferenceMode | ReadPreference;
  /** Specifies, in seconds, how stale a secondary can be before the client stops using it for read operations. */
  maxStalenessSeconds?: number;
  /** Specifies the tags document as a comma-separated list of colon-separated key-value pairs.  */
  readPreferenceTags?: TagSet[];
  /** The auth settings for when connection to server. */
  auth?: Auth;
  /** Specify the database name associated with the user’s credentials. */
  authSource?: string;
  /** Specify the authentication mechanism that MongoDB will use to authenticate the connection. */
  authMechanism?: AuthMechanism;
  /** Specify properties for the specified authMechanism as a comma-separated list of colon-separated key-value pairs. */
  authMechanismProperties?: AuthMechanismProperties;
  /** The size (in milliseconds) of the latency window for selecting among multiple suitable MongoDB instances. */
  localThresholdMS?: number;
  /** Specifies how long (in milliseconds) to block for server selection before throwing an exception.  */
  serverSelectionTimeoutMS?: number;
  /** heartbeatFrequencyMS controls when the driver checks the state of the MongoDB deployment. Specify the interval (in milliseconds) between checks, counted from the end of the previous check until the beginning of the next one. */
  heartbeatFrequencyMS?: number;
  /** Sets the minimum heartbeat frequency. In the event that the driver has to frequently re-check a server's availability, it will wait at least this long since the previous check to avoid wasted effort. */
  minHeartbeatFrequencyMS?: number;
  /** The name of the application that created this MongoClient instance. MongoDB 3.4 and newer will print this value in the server log upon establishing each connection. It is also recorded in the slow query log and profile collections */
  appName?: string;
  /** Enables retryable reads. */
  retryReads?: boolean;
  /** Enable retryable writes. */
  retryWrites?: boolean;
  /** Allow a driver to force a Single topology type with a connection string containing one host */
  directConnection?: boolean;
  /** Instruct the driver it is connecting to a load balancer fronting a mongos like service */
  loadBalanced?: boolean;
  /**
   * The write concern w value
   * @deprecated Please use the `writeConcern` option instead
   */
  w?: W;
  /**
   * The write concern timeout
   * @deprecated Please use the `writeConcern` option instead
   */
  wtimeoutMS?: number;
  /**
   * The journal write concern
   * @deprecated Please use the `writeConcern` option instead
   */
  journal?: boolean;
  /**
   * A MongoDB WriteConcern, which describes the level of acknowledgement
   * requested from MongoDB for write operations.
   *
   * @see https://www.mongodb.com/docs/manual/reference/write-concern/
   */
  writeConcern?: WriteConcern | WriteConcernSettings;
  /** TCP Connection no delay */
  noDelay?: boolean;
  /** Force server to assign `_id` values instead of driver */
  forceServerObjectId?: boolean;
  /** A primary key factory function for generation of custom `_id` keys */
  pkFactory?: PkFactory;
  /** Enable command monitoring for this client */
  monitorCommands?: boolean;
  /** Server API version */
  serverApi?: ServerApi | ServerApiVersion;
  /**
   * Optionally enable in-use auto encryption
   *
   * @remarks
   *  Automatic encryption is an enterprise only feature that only applies to operations on a collection. Automatic encryption is not supported for operations on a database or view, and operations that are not bypassed will result in error
   *  (see [libmongocrypt: Auto Encryption Allow-List](https://github.com/mongodb/specifications/blob/master/source/client-side-encryption/client-side-encryption.md#libmongocrypt-auto-encryption-allow-list)). To bypass automatic encryption for all operations, set bypassAutoEncryption=true in AutoEncryptionOpts.
   *
   *  Automatic encryption requires the authenticated user to have the [listCollections privilege action](https://www.mongodb.com/docs/manual/reference/command/listCollections/#dbcmd.listCollections).
   *
   *  If a MongoClient with a limited connection pool size (i.e a non-zero maxPoolSize) is configured with AutoEncryptionOptions, a separate internal MongoClient is created if any of the following are true:
   *  - AutoEncryptionOptions.keyVaultClient is not passed.
   *  - AutoEncryptionOptions.bypassAutomaticEncryption is false.
   *
   * If an internal MongoClient is created, it is configured with the same options as the parent MongoClient except minPoolSize is set to 0 and AutoEncryptionOptions is omitted.
   */
  autoEncryption?: AutoEncryptionOptions;
  /** Allows a wrapping driver to amend the client metadata generated by the driver to include information about the wrapping driver */
  driverInfo?: DriverInfo;
  /** Configures a Socks5 proxy host used for creating TCP connections. */
  proxyHost?: string;
  /** Configures a Socks5 proxy port used for creating TCP connections. */
  proxyPort?: number;
  /** Configures a Socks5 proxy username when the proxy in proxyHost requires username/password authentication. */
  proxyUsername?: string;
  /** Configures a Socks5 proxy password when the proxy in proxyHost requires username/password authentication. */
  proxyPassword?: string;
  /** Instructs the driver monitors to use a specific monitoring mode */
  serverMonitoringMode?: ServerMonitoringMode;
  /**
   * @public
   * Specifies the destination of the driver's logging. The default is stderr.
   */
  mongodbLogPath?: 'stderr' | 'stdout' | MongoDBLogWritable;
  /**
   * @public
   * Enable logging level per component or use `default` to control any unset components.
   */
  mongodbLogComponentSeverities?: LogComponentSeveritiesClientOptions;
  /**
   * @public
   * All BSON documents are stringified to EJSON. This controls the maximum length of those strings.
   * It is defaulted to 1000.
   */
  mongodbLogMaxDocumentLength?: number;
  /* Excluded from this release type: srvPoller */
  /* Excluded from this release type: connectionType */
  /* Excluded from this release type: __skipPingOnConnect */
}

/**
 * A representation of the credentials used by MongoDB
 * @public
 */
declare class MongoCredentials {
  /** The username used for authentication */
  readonly username: string;
  /** The password used for authentication */
  readonly password: string;
  /** The database that the user should authenticate against */
  readonly source: string;
  /** The method used to authenticate */
  readonly mechanism: AuthMechanism;
  /** Special properties used by some types of auth mechanisms */
  readonly mechanismProperties: AuthMechanismProperties;
  constructor(options: MongoCredentialsOptions);
  /** Determines if two MongoCredentials objects are equivalent */
  equals(other: MongoCredentials): boolean;
  /**
   * If the authentication mechanism is set to "default", resolves the authMechanism
   * based on the server version and server supported sasl mechanisms.
   *
   * @param hello - A hello response from the server
   */
  resolveAuthMechanism(hello: Document_2 | null): MongoCredentials;
  validate(): void;
  static merge(creds: MongoCredentials | undefined, options: Partial<MongoCredentialsOptions>): MongoCredentials;
}

/** @public */
declare interface MongoCredentialsOptions {
  username?: string;
  password: string;
  source: string;
  db?: string;
  mechanism?: AuthMechanism;
  mechanismProperties: AuthMechanismProperties;
}

/**
 * @public
 *
 * A class representing a collection's namespace.  This class enforces (through Typescript) that
 * the `collection` portion of the namespace is defined and should only be
 * used in scenarios where this can be guaranteed.
 */
declare class MongoDBCollectionNamespace extends MongoDBNamespace {
  collection: string;
  constructor(db: string, collection: string);
  static fromString(namespace?: string): MongoDBCollectionNamespace;
}

/**
 * @public
 *
 * A custom destination for structured logging messages.
 */
declare interface MongoDBLogWritable {
  /**
   * This function will be called for every enabled log message.
   *
   * It can be sync or async:
   * - If it is synchronous it will block the driver from proceeding until this method returns.
   * - If it is asynchronous the driver will not await the returned promise. It will attach fulfillment handling (`.then`).
   *   If the promise rejects the logger will write an error message to stderr and stop functioning.
   *   If the promise resolves the driver proceeds to the next log message (or waits for new ones to occur).
   *
   * Tips:
   * - We recommend writing an async `write` function that _never_ rejects.
   *   Instead handle logging errors as necessary to your use case and make the write function a noop, until it can be recovered.
   * - The Log messages are structured but **subject to change** since the intended purpose is informational.
   *   Program against this defensively and err on the side of stringifying whatever is passed in to write in some form or another.
   *
   */
  write(log: Log): PromiseLike<unknown> | unknown;
}

/** @public */
declare class MongoDBNamespace {
  db: string;
  collection?: string | undefined;
  /**
   * Create a namespace object
   *
   * @param db - database name
   * @param collection - collection name
   */
  constructor(db: string, collection?: string | undefined);
  toString(): string;
  withCollection(collection: string): MongoDBCollectionNamespace;
  static fromString(namespace?: string): MongoDBNamespace;
}

/** @public */
declare interface MongoDBOIDCLogEventsMap {
  'mongodb-oidc-plugin:deserialization-failed': (event: {
    error: string;
  }) => void;
  'mongodb-oidc-plugin:state-updated': (event: {
    updateId: number;
    timerDuration: number | undefined;
  }) => void;
  'mongodb-oidc-plugin:local-redirect-accessed': (event: {
    id: string;
  }) => void;
  'mongodb-oidc-plugin:oidc-callback-accepted': (event: {
    method: string;
    hasBody: boolean;
    errorCode?: string;
  }) => void;
  'mongodb-oidc-plugin:oidc-callback-rejected': (event: {
    method: string;
    hasBody: boolean;
    errorCode: string;
    isAcceptedOIDCResponse: boolean;
  }) => void;
  'mongodb-oidc-plugin:unknown-url-accessed': (event: {
    method: string;
    path: string;
  }) => void;
  'mongodb-oidc-plugin:local-listen-started': (event: {
    url: string;
    urlPort: number;
  }) => void;
  'mongodb-oidc-plugin:local-listen-resolved-hostname': (event: {
    url: string;
    urlPort: number;
    hostname: string;
    interfaces: {
      family: number;
      address: string;
    }[];
  }) => void;
  'mongodb-oidc-plugin:local-listen-failed': (event: {
    url: string;
    error: string;
  }) => void;
  'mongodb-oidc-plugin:local-listen-succeeded': (event: {
    url: string;
    interfaces: {
      family: number;
      address: string;
    }[];
  }) => void;
  'mongodb-oidc-plugin:local-server-close': (event: {
    url: string;
  }) => void;
  'mongodb-oidc-plugin:open-browser': (event: {
    customOpener: boolean;
  }) => void;
  'mongodb-oidc-plugin:open-browser-complete': () => void;
  'mongodb-oidc-plugin:notify-device-flow': () => void;
  'mongodb-oidc-plugin:auth-attempt-started': (event: {
    flow: string;
  }) => void;
  'mongodb-oidc-plugin:auth-attempt-succeeded': () => void;
  'mongodb-oidc-plugin:auth-attempt-failed': (event: {
    error: string;
  }) => void;
  'mongodb-oidc-plugin:refresh-skipped': (event: {
    triggeringUpdateId: number;
    expectedRefreshToken: string | null;
    actualRefreshToken: string | null;
  }) => void;
  'mongodb-oidc-plugin:refresh-started': (event: {
    triggeringUpdateId: number;
    refreshToken: string | null;
  }) => void;
  'mongodb-oidc-plugin:refresh-succeeded': (event: {
    triggeringUpdateId: number;
    refreshToken: string | null;
  }) => void;
  'mongodb-oidc-plugin:refresh-failed': (event: {
    error: string;
    triggeringUpdateId: number;
    refreshToken: string | null;
  }) => void;
  'mongodb-oidc-plugin:skip-auth-attempt': (event: {
    reason: string;
  }) => void;
  'mongodb-oidc-plugin:auth-failed': (event: {
    error: string;
  }) => void;
  'mongodb-oidc-plugin:auth-succeeded': (event: {
    tokenType: string | null;
    refreshToken: string | null;
    expiresAt: string | null;
    passIdTokenAsAccessToken: boolean;
    tokens: {
      accessToken: string | undefined;
      idToken: string | undefined;
      refreshToken: string | undefined;
    };
  }) => void;
  'mongodb-oidc-plugin:destroyed': () => void;
  'mongodb-oidc-plugin:missing-id-token': () => void;
  'mongodb-oidc-plugin:outbound-http-request': (event: {
    url: string;
  }) => void;
  'mongodb-oidc-plugin:inbound-http-request': (event: {
    url: string;
  }) => void;
  'mongodb-oidc-plugin:received-server-params': (event: {
    params: OIDCCallbackParams_2;
  }) => void;
}

/** @public */
declare interface MongoDBOIDCPlugin {
  /**
   * A subset of MongoClientOptions that need to be set in order
   * for the MongoClient to an instance of this plugin.
   *
   * This object should be deep-merged with other, pre-existing
   * MongoClient driver options.
   *
   * @public
   */
  readonly mongoClientOptions: MongoDBOIDCPluginMongoClientOptions;
  /**
   * The logger instance passed in the options, or a default one otherwise.
   */
  readonly logger: TypedEventEmitter_2<MongoDBOIDCLogEventsMap>;
  /**
   * Create a serialized representation of this plugin's state. The result
   * can be stored and be later passed to new plugin instances to make
   * that instance behave as a resumed version of this instance.
   *
   * Be aware that this string contains OIDC tokens in plaintext! Do not
   * store it without appropriate security mechanisms in place.
   */
  serialize(): Promise<string>;
  /**
   * Destroy this plugin instance. Currently, this only clears timers
   * for automatic token refreshing.
   */
  destroy(): Promise<void>;
}

/** @public */
declare interface MongoDBOIDCPluginMongoClientOptions {
  readonly authMechanismProperties: {
    readonly OIDC_HUMAN_CALLBACK: OIDCCallbackFunction_2;
  };
}

/** @public */
declare interface MongoDBOIDCPluginOptions {
  /**
   * A local URL to listen on. If this is not provided, a default URL
   * standardized for MongoDB applications is used.
   *
   * This is only used when the Authorization Code flow is enabled,
   * and when it is possible to open a browser.
   */
  redirectURI?: string;
  /**
   * A function that opens an URL in a browser window. If this is `false`,
   * then all flows involving automatic browser operation (currently
   * Authorization Code flow) are disabled.
   *
   * If a `{ command: string }` object is provided, `command` will be spawned
   * inside a shell and receive the target URL as an argument. If `abortable`
   * is set, then a possible AbortSignal will be passed on and the child
   * process will be killed once that is reached. (This does not typically
   * make sense for GUI browsers, but can for command-line browsers.)
   *
   * If this option is missing or undefined, the default behavior is to use
   * `shell.openExternal()` if this is running inside of electron, and
   * the `open` package otherwise.
   */
  openBrowser?: undefined | false | {
    command: string;
    abortable?: boolean;
  } | ((options: OpenBrowserOptions) => Promise<OpenBrowserReturnType>);
  /**
   * The maximum time that the plugin waits for an opened browser to access
   * the URL that was passed to it, in milliseconds. The default is 10 seconds.
   * Passing a value of zero will disable the timeout altogether.
   */
  openBrowserTimeout?: number;
  /**
   * A callback to provide users with the information required to operate
   * the Device Authorization flow.
   */
  notifyDeviceFlow?: (information: DeviceFlowInformation) => Promise<void> | void;
  /**
   * Restrict possible OIDC authorization flows to a subset.
   *
   * The default value is `['auth-code']`, i.e. the Device Authorization Grant
   * flow is not enabled by default and needs to be enabled explicitly.
   *
   * Order of the entries is not relevant. The Authorization Code Flow always
   * takes precedence over the Device Authorization Grant flow.
   *
   * This can either be a static list of supported flows or a function which
   * returns such a list. In the latter case, the function will be called
   * for each authentication attempt. The AbortSignal argument can be used
   * to get insight into when the auth attempt is being aborted, by the
   * driver or through some other means. (For example, this callback
   * could be used to inform a user about the fact that re-authentication
   * is required, and reject if they decline to do so.)
   */
  allowedFlows?: AuthFlowType[] | ((options: {
    signal: AbortSignal;
  }) => Promise<AuthFlowType[]> | AuthFlowType[]);
  /**
   * An optional EventEmitter that can be used for recording log events.
   */
  logger?: TypedEventEmitter_2<MongoDBOIDCLogEventsMap>;
  /**
   * An AbortSignal that can be used to explicitly cancel authentication
   * attempts, for example if a user intentionally aborts a connection
   * attempt.
   *
   * Note that the driver also registers its own AbortSignal with individual
   * authentication attempts in order to enforce a timeout, which has the
   * same effect for authentication attempts from that driver MongoClient
   * instance (but does not prevent other MongoClients from using this
   * plugin instance to authenticate).
   */
  signal?: OIDCAbortSignal;
  /**
   * A custom handler for providing HTTP responses for requests to the
   * redirect HTTP server used in the Authorization Code Flow.
   *
   * The default handler serves simple text/plain messages.
   */
  redirectServerRequestHandler?: RedirectServerRequestHandler;
  /**
   * A serialized representation of a previous plugin instance's state
   * as returned by `.serialize()`.
   *
   * This option should only be passed if it comes from a trusted source,
   * since it contains access tokens that will be sent to MongoDB servers.
   */
  serializedState?: string;
  /**
   * If set to true, creating the plugin will throw an exception when
   * `serializedState` is provided but cannot be deserialized.
   * If set to false, invalid serialized state will result in a log
   * message being emitted but otherwise be ignored.
   */
  throwOnIncompatibleSerializedState?: boolean;
  /**
   * Provide custom HTTP options for individual HTTP calls.
   */
  customHttpOptions?: HttpOptions | ((url: string, options: Readonly<HttpOptions>) => HttpOptions);
  /**
   * Pass ID tokens in place of access tokens. For debugging/working around
   * broken identity providers.
   */
  passIdTokenAsAccessToken?: boolean;
  /**
   * Skip the nonce parameter in the Authorization Code request. This could
   * be used to work with providers that don't support the nonce parameter.
   *
   * Default is `false`.
   */
  skipNonceInAuthCodeRequest?: boolean;
}

/**
 * @public
 * @category Error
 *
 * @privateRemarks
 * mongodb-client-encryption has a dependency on this error, it uses the constructor with a string argument
 */
declare class MongoError extends Error {
  /* Excluded from this release type: errorLabelSet */
  get errorLabels(): string[];
  /**
   * This is a number in MongoServerError and a string in MongoDriverError
   * @privateRemarks
   * Define the type override on the subclasses when we can use the override keyword
   */
  code?: number | string;
  topologyVersion?: TopologyVersion;
  connectionGeneration?: number;
  cause?: Error;
  /**
   * **Do not use this constructor!**
   *
   * Meant for internal use only.
   *
   * @remarks
   * This class is only meant to be constructed within the driver. This constructor is
   * not subject to semantic versioning compatibility guarantees and may change at any time.
   *
   * @public
   **/
  constructor(message: string, options?: {
    cause?: Error;
  });
  /* Excluded from this release type: buildErrorMessage */
  get name(): string;
  /** Legacy name for server error responses */
  get errmsg(): string;
  /**
   * Checks the error to see if it has an error label
   *
   * @param label - The error label to check for
   * @returns returns true if the error has the provided error label
   */
  hasErrorLabel(label: string): boolean;
  addErrorLabel(label: string): void;
}

/** @public */
declare const MongoLoggableComponent: Readonly<{
  readonly COMMAND: "command";
  readonly TOPOLOGY: "topology";
  readonly SERVER_SELECTION: "serverSelection";
  readonly CONNECTION: "connection";
  readonly CLIENT: "client";
}>;

/** @public */
declare type MongoLoggableComponent = (typeof MongoLoggableComponent)[keyof typeof MongoLoggableComponent];

/**
 * Parsed Mongo Client Options.
 *
 * User supplied options are documented by `MongoClientOptions`.
 *
 * **NOTE:** The client's options parsing is subject to change to support new features.
 * This type is provided to aid with inspection of options after parsing, it should not be relied upon programmatically.
 *
 * Options are sourced from:
 * - connection string
 * - options object passed to the MongoClient constructor
 * - file system (ex. tls settings)
 * - environment variables
 * - DNS SRV records and TXT records
 *
 * Not all options may be present after client construction as some are obtained from asynchronous operations.
 *
 * @public
 */
declare interface MongoOptions extends Required<Pick<MongoClientOptions, 'autoEncryption' | 'connectTimeoutMS' | 'directConnection' | 'driverInfo' | 'forceServerObjectId' | 'minHeartbeatFrequencyMS' | 'heartbeatFrequencyMS' | 'localThresholdMS' | 'maxConnecting' | 'maxIdleTimeMS' | 'maxPoolSize' | 'minPoolSize' | 'monitorCommands' | 'noDelay' | 'pkFactory' | 'raw' | 'replicaSet' | 'retryReads' | 'retryWrites' | 'serverSelectionTimeoutMS' | 'socketTimeoutMS' | 'srvMaxHosts' | 'srvServiceName' | 'tlsAllowInvalidCertificates' | 'tlsAllowInvalidHostnames' | 'tlsInsecure' | 'waitQueueTimeoutMS' | 'zlibCompressionLevel'>>, SupportedNodeConnectionOptions {
  appName?: string;
  hosts: HostAddress[];
  srvHost?: string;
  credentials?: MongoCredentials;
  readPreference: ReadPreference;
  readConcern: ReadConcern;
  loadBalanced: boolean;
  directConnection: boolean;
  serverApi: ServerApi;
  compressors: CompressorName[];
  writeConcern: WriteConcern;
  dbName: string;
  metadata: ClientMetadata;
  /* Excluded from this release type: extendedMetadata */
  /* Excluded from this release type: autoEncrypter */
  /* Excluded from this release type: tokenCache */
  proxyHost?: string;
  proxyPort?: number;
  proxyUsername?: string;
  proxyPassword?: string;
  serverMonitoringMode: ServerMonitoringMode;
  /* Excluded from this release type: connectionType */
  /* Excluded from this release type: authProviders */
  /* Excluded from this release type: encrypter */
  /* Excluded from this release type: userSpecifiedAuthSource */
  /* Excluded from this release type: userSpecifiedReplicaSet */
  /**
   * # NOTE ABOUT TLS Options
   *
   * If `tls` is provided as an option, it is equivalent to setting the `ssl` option.
   *
   * NodeJS native TLS options are passed through to the socket and retain their original types.
   *
   * ### Additional options:
   *
   * | nodejs native option  | driver spec equivalent option name            | driver option type |
   * |:----------------------|:----------------------------------------------|:-------------------|
   * | `ca`                  | `tlsCAFile`                                   | `string`           |
   * | `crl`                 | `tlsCRLFile`                                  | `string`           |
   * | `cert`                | `tlsCertificateKeyFile`                       | `string`           |
   * | `key`                 | `tlsCertificateKeyFile`                       | `string`           |
   * | `passphrase`          | `tlsCertificateKeyFilePassword`               | `string`           |
   * | `rejectUnauthorized`  | `tlsAllowInvalidCertificates`                 | `boolean`          |
   * | `checkServerIdentity` | `tlsAllowInvalidHostnames`                    | `boolean`          |
   * | see note below        | `tlsInsecure`                                 | `boolean`          |
   *
   * If `tlsInsecure` is set to `true`, then it will set the node native options `checkServerIdentity`
   * to a no-op and `rejectUnauthorized` to `false`.
   *
   * If `tlsInsecure` is set to `false`, then it will set the node native options `checkServerIdentity`
   * to a no-op and `rejectUnauthorized` to the inverse value of `tlsAllowInvalidCertificates`. If
   * `tlsAllowInvalidCertificates` is not set, then `rejectUnauthorized` will be set to `true`.
   *
   * ### Note on `tlsCAFile`, `tlsCertificateKeyFile` and `tlsCRLFile`
   *
   * The files specified by the paths passed in to the `tlsCAFile`, `tlsCertificateKeyFile` and `tlsCRLFile`
   * fields are read lazily on the first call to `MongoClient.connect`. Once these files have been read and
   * the `ca`, `cert`, `crl` and `key` fields are populated, they will not be read again on subsequent calls to
   * `MongoClient.connect`. As a result, until the first call to `MongoClient.connect`, the `ca`,
   * `cert`, `crl` and `key` fields will be undefined.
   */
  tls: boolean;
  tlsCAFile?: string;
  tlsCRLFile?: string;
  tlsCertificateKeyFile?: string;
  /* Excluded from this release type: mongoLoggerOptions */
  /* Excluded from this release type: mongodbLogPath */
  timeoutMS?: number;
  /* Excluded from this release type: __skipPingOnConnect */
}
declare interface MongoshBus {
  on<K extends keyof MongoshBusEventsMap>(event: K, listener: MongoshBusEventsMap[K]): this;
  once<K extends keyof MongoshBusEventsMap>(event: K, listener: MongoshBusEventsMap[K]): this;
  emit<K extends keyof MongoshBusEventsMap>(event: K, ...args: MongoshBusEventsMap[K] extends ((...args: infer P) => any) ? P : never): unknown;
}
declare interface MongoshBusEventsMap extends ConnectEventMap {
  'mongosh:connect': (ev: ConnectEvent) => void;
  'mongosh:start-session': (ev: SessionStartedEvent) => void;
  'mongosh:new-user': (identity: {
    userId: string;
    anonymousId: string;
  }) => void;
  'mongosh:update-user': (identity: {
    userId: string;
    anonymousId?: string;
  }) => void;
  'mongosh:error': (error: Error, component: string) => void;
  'mongosh:evaluate-input': (ev: EvaluateInputEvent) => void;
  'mongosh:evaluate-started': () => void;
  'mongosh:evaluate-finished': () => void;
  'mongosh:use': (ev: UseEvent) => void;
  'mongosh:getDB': (ev: UseEvent) => void;
  'mongosh:show': (ev: ShowEvent) => void;
  'mongosh:setCtx': (ev: ApiEventWithArguments) => void;
  'mongosh:api-call-with-arguments': (ev: ApiEventWithArguments) => void;
  'mongosh:api-call': (ev: ApiEvent) => void;
  'mongosh:warn': (ev: ApiWarning) => void;
  'mongosh:api-load-file': (ev: ScriptLoadFileEvent) => void;
  'mongosh:start-loading-cli-scripts': (event: StartLoadingCliScriptsEvent) => void;
  'mongosh:write-custom-log': (ev: WriteCustomLogEvent) => void;
  'mongosh:start-mongosh-repl': (ev: StartMongoshReplEvent) => void;
  'mongosh:mongoshrc-load': () => void;
  'mongosh:globalconfig-load': (ev: GlobalConfigFileLoadEvent) => void;
  'mongosh:mongoshrc-mongorc-warn': () => void;
  'mongosh:eval-cli-script': () => void;
  'mongosh:eval-interrupted': () => void;
  'mongosh:crypt-library-load-skip': (ev: CryptLibrarySkipEvent) => void;
  'mongosh:crypt-library-load-found': (ev: CryptLibraryFoundEvent) => void;
  'mongosh:closed': () => void;
  'mongosh:eval-complete': () => void;
  'mongosh:autocompletion-complete': () => void;
  'mongosh:interrupt-complete': () => void;
  'mongosh-snippets:loaded': (ev: SnippetsLoadedEvent) => void;
  'mongosh-snippets:npm-lookup': (ev: SnippetsNpmLookupEvent) => void;
  'mongosh-snippets:npm-lookup-stopped': () => void;
  'mongosh-snippets:npm-download-failed': (ev: SnippetsNpmDownloadFailedEvent) => void;
  'mongosh-snippets:npm-download-active': (ev: SnippetsNpmDownloadActiveEvent) => void;
  'mongosh-snippets:fetch-index': (ev: SnippetsFetchIndexEvent) => void;
  'mongosh-snippets:fetch-cache-invalid': () => void;
  'mongosh-snippets:fetch-index-error': (ev: SnippetsFetchIndexErrorEvent) => void;
  'mongosh-snippets:fetch-index-done': () => void;
  'mongosh-snippets:package-json-edit-error': (ev: SnippetsErrorEvent) => void;
  'mongosh-snippets:spawn-child': (ev: SnippetsRunNpmEvent) => void;
  'mongosh-snippets:load-snippet': (ev: SnippetsLoadSnippetEvent) => void;
  'mongosh-snippets:snippet-command': (ev: SnippetsCommandEvent) => void;
  'mongosh-snippets:transform-error': (ev: SnippetsTransformErrorEvent) => void;
  'mongosh-sp:reset-connection-options': () => void;
  'mongosh-editor:run-edit-command': (ev: EditorRunEditCommandEvent) => void;
  'mongosh-editor:read-vscode-extensions-done': (ev: EditorReadVscodeExtensionsDoneEvent) => void;
  'mongosh-editor:read-vscode-extensions-failed': (ev: EditorReadVscodeExtensionsFailedEvent) => void;
  'mongosh:fetching-update-metadata': (ev: FetchingUpdateMetadataEvent) => void;
  'mongosh:fetching-update-metadata-complete': (ev: FetchingUpdateMetadataCompleteEvent) => void;
  'mongosh:log-initialized': () => void;
}
declare interface Namespace {
  db: string;
  collection: string;
}
declare const namespaceInfo: unique symbol;

/**
 * @public
 * A type that extends Document but forbids anything that "looks like" an object id.
 */
declare type NonObjectIdLikeDocument = { [key in keyof ObjectIdLike]?: never } & Document_2;

/** It avoids using fields with not acceptable types @public */
declare type NotAcceptedFields<TSchema, FieldType> = { readonly [key in KeysOfOtherType<TSchema, FieldType>]?: never };

/** @public */
declare type NumericType = IntegerType | Decimal128 | Double;

/** @public */
declare type OIDCAbortSignal = {
  aborted: boolean;
  reason?: unknown;
  addEventListener(type: 'abort', callback: () => void, options?: {
    once: boolean;
  }): void;
  removeEventListener(type: 'abort', callback: () => void): void;
};

/**
 * The signature of the human or machine callback functions.
 * @public
 */
declare type OIDCCallbackFunction = (params: OIDCCallbackParams) => Promise<OIDCResponse>;

/**
 * A copy of the Node.js driver's `OIDCRefreshFunction`
 * @public
 */
declare type OIDCCallbackFunction_2 = (params: OIDCCallbackParams_2) => Promise<IdPServerResponse>;

/**
 * The parameters that the driver provides to the user supplied
 * human or machine callback.
 *
 * The version number is used to communicate callback API changes that are not breaking but that
 * users may want to know about and review their implementation. Users may wish to check the version
 * number and throw an error if their expected version number and the one provided do not match.
 * @public
 */
declare interface OIDCCallbackParams {
  /** Optional username. */
  username?: string;
  /** The context in which to timeout the OIDC callback. */
  timeoutContext: AbortSignal;
  /** The current OIDC API version. */
  version: 1;
  /** The IdP information returned from the server. */
  idpInfo?: IdPInfo;
  /** The refresh token, if applicable, to be used by the callback to request a new token from the issuer. */
  refreshToken?: string;
}

/**
 * A copy of the Node.js driver's `OIDCCallbackParams` using `OIDCAbortSignal` instead of `AbortSignal`
 * @public
 */
declare interface OIDCCallbackParams_2 {
  refreshToken?: string;
  timeoutContext?: OIDCAbortSignal;
  version: 1;
  username?: string;
  idpInfo?: IdPServerInfo;
}

/**
 * The response required to be returned from the machine or
 * human callback workflows' callback.
 * @public
 */
declare interface OIDCResponse {
  /** The OIDC access token. */
  accessToken: string;
  /** The time when the access token expires. For future use. */
  expiresInSeconds?: number;
  /** The refresh token, if applicable, to be used by the callback to request a new token from the issuer. */
  refreshToken?: string;
}

/** @public */
declare type OneOrMore<T> = T | ReadonlyArray<T>;
declare interface OnLoadResult {
  resolvedFilename: string;
  evaluate(): Promise<void>;
}

/** @public */
declare type OnlyFieldsOfType<TSchema, FieldType = any, AssignableType = FieldType> = IsAny<TSchema[keyof TSchema], AssignableType extends FieldType ? Record<string, FieldType> : Record<string, AssignableType>, AcceptedFields<TSchema, FieldType, AssignableType> & NotAcceptedFields<TSchema, FieldType> & Record<string, AssignableType>>;

/** @public */
declare interface OpenBrowserOptions {
  /**
   * The URL to open the browser with.
   */
  url: string;
  /**
   * A signal that is aborted when the user or the driver abort
   * an authentication attempt.
   */
  signal: AbortSignal;
}

/** @public */
declare type OpenBrowserReturnType = void | undefined | (TypedEventEmitter_2<{
  exit(exitCode: number): void;
  error(err: unknown): void;
}> & {
  spawnargs?: string[];
});

/** @public */
declare interface OperationOptions extends BSONSerializeOptions {
  /** Specify ClientSession for this command */
  session?: ClientSession;
  willRetryWrite?: boolean;
  /** The preferred read preference (ReadPreference.primary, ReadPreference.primary_preferred, ReadPreference.secondary, ReadPreference.secondary_preferred, ReadPreference.nearest). */
  readPreference?: ReadPreferenceLike;
  /* Excluded from this release type: bypassPinningCheck */
  omitReadPreference?: boolean;
  /* Excluded from this release type: omitMaxTimeMS */
  /**
   * @experimental
   * Specifies the time an operation will run until it throws a timeout error
   */
  timeoutMS?: number;
}

/**
 * Represents a specific point in time on a server. Can be retrieved by using `db.command()`
 * @public
 * @see https://www.mongodb.com/docs/manual/reference/method/db.runCommand/#response
 */
declare type OperationTime = Timestamp;

/**
 * Add an optional _id field to an object shaped type
 * @public
 */
declare type OptionalId<TSchema> = EnhancedOmit<TSchema, '_id'> & {
  _id?: InferIdType<TSchema>;
};

/**
 * Adds an optional _id field to an object shaped type, unless the _id field is required on that type.
 * In the case _id is required, this method continues to require_id.
 *
 * @public
 *
 * @privateRemarks
 * `ObjectId extends TSchema['_id']` is a confusing ordering at first glance. Rather than ask
 * `TSchema['_id'] extends ObjectId` which translated to "Is the _id property ObjectId?"
 * we instead ask "Does ObjectId look like (have the same shape) as the _id?"
 */
declare type OptionalUnlessRequiredId<TSchema> = TSchema extends {
  _id: any;
} ? TSchema : OptionalId<TSchema>;

/** @public */
declare class OrderedBulkOperation extends BulkOperationBase {
  /* Excluded from this release type: __constructor */
  addToOperationsList(batchType: BatchType, document: Document_2 | UpdateStatement | DeleteStatement): this;
}

/** @public */
declare interface PkFactory {
  createPk(): any;
}
declare class PlanCache extends ShellApiWithMongoClass {
  _collection: CollectionWithSchema;
  constructor(collection: CollectionWithSchema);
  get _mongo(): Mongo;
  [asPrintable](): string;
  /*
  Removes cached query plan(s) for a collection.
  */
  clear(): Document_2;
  /*
  Removes cached query plan(s) for a collection of the specified query shape.
  */
  clearPlansByQuery(query: Document_2, projection?: Document_2, sort?: Document_2): Document_2;
  /*
  Lists cached query plan(s) for a collection.
  */
  list(pipeline?: Document_2[]): Document_2[];
  /*
  Deprecated. Please use PlanCache.list instead
  */
  listQueryShapes(): never;
  /*
  Deprecated. Please use PlanCache.list instead
  */
  getPlansByQuery(): never;
}

/** @public */
declare const ProfilingLevel: Readonly<{
  readonly off: "off";
  readonly slowOnly: "slow_only";
  readonly all: "all";
}>;

/** @public */
declare type ProfilingLevel = (typeof ProfilingLevel)[keyof typeof ProfilingLevel];

/** @public */
declare type ProfilingLevelOptions = CommandOperationOptions;
declare type ProxyEventArgs<K extends keyof ProxyEventMap> = ProxyEventMap[K] extends ((...args: infer P) => any) ? P : never;
declare interface ProxyEventMap {
  'socks5:authentication-complete': (ev: {
    success: boolean;
  }) => void;
  'socks5:skip-auth-setup': () => void;
  'socks5:start-listening': (ev: {
    proxyHost: string;
    proxyPort: number;
  }) => void;
  'socks5:forwarding-error': (ev: {
    error: string;
  } & Partial<BaseSocks5RequestMetadata>) => void;
  'socks5:agent-initialized': () => void;
  'socks5:closing-tunnel': () => void;
  'socks5:got-forwarding-request': (ev: BaseSocks5RequestMetadata) => void;
  'socks5:accepted-forwarding-request': (ev: BaseSocks5RequestMetadata) => void;
  'socks5:failed-forwarding-request': (ev: {
    error: string;
  } & Partial<BaseSocks5RequestMetadata>) => void;
  'socks5:forwarded-socket-closed': (ev: BaseSocks5RequestMetadata) => void;
  'ssh:client-closed': () => void;
  'ssh:establishing-conection': (ev: {
    host: string | undefined;
    port: number | undefined;
    password: boolean;
    passphrase: boolean;
    privateKey: boolean;
  }) => void;
  'ssh:failed-connection': (ev: {
    error: string;
  }) => void;
  'ssh:established-connection': () => void;
  'ssh:failed-forward': (ev: {
    error: string;
    host: string;
    retryableError: boolean;
    retriesLeft: number;
  }) => void;
}
declare interface ProxyLogEmitter {
  on<K extends keyof ProxyEventMap>(event: K, listener: ProxyEventMap[K]): this;
  off?<K extends keyof ProxyEventMap>(event: K, listener: ProxyEventMap[K]): this;
  once<K extends keyof ProxyEventMap>(event: K, listener: ProxyEventMap[K]): this;
  emit<K extends keyof ProxyEventMap>(event: K, ...args: ProxyEventArgs<K>): unknown;
}

/** @public */
declare interface ProxyOptions {
  proxyHost?: string;
  proxyPort?: number;
  proxyUsername?: string;
  proxyPassword?: string;
}

/** @public */
declare type PullAllOperator<TSchema> = ({ readonly [key in KeysOfAType<TSchema, ReadonlyArray<any>>]?: TSchema[key] } & NotAcceptedFields<TSchema, ReadonlyArray<any>>) & {
  readonly [key: string]: ReadonlyArray<any>;
};

/** @public */
declare type PullOperator<TSchema> = ({ readonly [key in KeysOfAType<TSchema, ReadonlyArray<any>>]?: Partial<Flatten<TSchema[key]>> | FilterOperations<Flatten<TSchema[key]>> } & NotAcceptedFields<TSchema, ReadonlyArray<any>>) & {
  readonly [key: string]: FilterOperators<any> | any;
};

/** @public */
declare type PushOperator<TSchema> = ({ readonly [key in KeysOfAType<TSchema, ReadonlyArray<any>>]?: Flatten<TSchema[key]> | ArrayOperator<Array<Flatten<TSchema[key]>>> } & NotAcceptedFields<TSchema, ReadonlyArray<any>>) & {
  readonly [key: string]: ArrayOperator<any> | any;
};

/**
 * @public
 * RangeOptions specifies index options for a Queryable Encryption field supporting "range" queries.
 * min, max, sparsity, trimFactor and range must match the values set in the encryptedFields of the destination collection.
 * For double and decimal128, min/max/precision must all be set, or all be unset.
 */
declare interface RangeOptions {
  /** min is the minimum value for the encrypted index. Required if precision is set. */
  min?: any;
  /** max is the minimum value for the encrypted index. Required if precision is set. */
  max?: any;
  /** sparsity may be used to tune performance. must be non-negative. When omitted, a default value is used. */
  sparsity?: Long | bigint;
  /** trimFactor may be used to tune performance. must be non-negative. When omitted, a default value is used. */
  trimFactor?: Int32 | number;
  precision?: number;
}
declare interface Readable_2 {
  aggregate(database: string, collection: string, pipeline: Document_2[], options?: AggregateOptions, dbOptions?: DbOptions): ServiceProviderAggregationCursor;
  aggregateDb(database: string, pipeline: Document_2[], options?: AggregateOptions, dbOptions?: DbOptions): ServiceProviderAggregationCursor;
  count(db: string, coll: string, query?: Document_2, options?: CountOptions, dbOptions?: DbOptions): Promise<number>;
  countDocuments(database: string, collection: string, filter?: Document_2, options?: CountDocumentsOptions, dbOptions?: DbOptions): Promise<number>;
  distinct(database: string, collection: string, fieldName: string, filter?: Document_2, options?: DistinctOptions, dbOptions?: DbOptions): Promise<Document_2>;
  estimatedDocumentCount(database: string, collection: string, options?: EstimatedDocumentCountOptions, dbOptions?: DbOptions): Promise<number>;
  find(database: string, collection: string, filter?: Document_2, options?: FindOptions, dbOptions?: DbOptions): ServiceProviderFindCursor;
  getTopology(): any;
  getIndexes(database: string, collection: string, options: ListIndexesOptions, dbOptions?: DbOptions): Promise<Document_2[]>;
  listCollections(database: string, filter?: Document_2, options?: ListCollectionsOptions, dbOptions?: DbOptions): Promise<Document_2[]>;
  readPreferenceFromOptions(options?: Omit<ReadPreferenceFromOptions, 'session'>): ReadPreferenceLike | undefined;
  watch(pipeline: Document_2[], options: ChangeStreamOptions, dbOptions?: DbOptions, db?: string, coll?: string): ServiceProviderChangeStream;
  getSearchIndexes(database: string, collection: string, indexName?: string, options?: Document_2, dbOptions?: DbOptions): Promise<Document_2[]>;
}

/**
 * The MongoDB ReadConcern, which allows for control of the consistency and isolation properties
 * of the data read from replica sets and replica set shards.
 * @public
 *
 * @see https://www.mongodb.com/docs/manual/reference/read-concern/index.html
 */
declare class ReadConcern {
  level: ReadConcernLevel | string;
  /** Constructs a ReadConcern from the read concern level.*/
  constructor(level: ReadConcernLevel);
  /**
   * Construct a ReadConcern given an options object.
   *
   * @param options - The options object from which to extract the write concern.
   */
  static fromOptions(options?: {
    readConcern?: ReadConcernLike;
    level?: ReadConcernLevel;
  }): ReadConcern | undefined;
  static get MAJORITY(): 'majority';
  static get AVAILABLE(): 'available';
  static get LINEARIZABLE(): 'linearizable';
  static get SNAPSHOT(): 'snapshot';
  toJSON(): Document_2;
}

/** @public */
declare const ReadConcernLevel: Readonly<{
  readonly local: "local";
  readonly majority: "majority";
  readonly linearizable: "linearizable";
  readonly available: "available";
  readonly snapshot: "snapshot";
}>;

/** @public */
declare type ReadConcernLevel = (typeof ReadConcernLevel)[keyof typeof ReadConcernLevel];

/** @public */
declare type ReadConcernLike = ReadConcern | {
  level: ReadConcernLevel;
} | ReadConcernLevel;

/**
 * The **ReadPreference** class is a class that represents a MongoDB ReadPreference and is
 * used to construct connections.
 * @public
 *
 * @see https://www.mongodb.com/docs/manual/core/read-preference/
 */
declare class ReadPreference {
  mode: ReadPreferenceMode;
  tags?: TagSet[];
  hedge?: HedgeOptions;
  maxStalenessSeconds?: number;
  minWireVersion?: number;
  static PRIMARY: "primary";
  static PRIMARY_PREFERRED: "primaryPreferred";
  static SECONDARY: "secondary";
  static SECONDARY_PREFERRED: "secondaryPreferred";
  static NEAREST: "nearest";
  static primary: ReadPreference;
  static primaryPreferred: ReadPreference;
  static secondary: ReadPreference;
  static secondaryPreferred: ReadPreference;
  static nearest: ReadPreference;
  /**
   * @param mode - A string describing the read preference mode (primary|primaryPreferred|secondary|secondaryPreferred|nearest)
   * @param tags - A tag set used to target reads to members with the specified tag(s). tagSet is not available if using read preference mode primary.
   * @param options - Additional read preference options
   */
  constructor(mode: ReadPreferenceMode, tags?: TagSet[], options?: ReadPreferenceOptions);
  get preference(): ReadPreferenceMode;
  static fromString(mode: string): ReadPreference;
  /**
   * Construct a ReadPreference given an options object.
   *
   * @param options - The options object from which to extract the read preference.
   */
  static fromOptions(options?: ReadPreferenceFromOptions): ReadPreference | undefined;
  /**
   * Replaces options.readPreference with a ReadPreference instance
   */
  static translate(options: ReadPreferenceLikeOptions): ReadPreferenceLikeOptions;
  /**
   * Validate if a mode is legal
   *
   * @param mode - The string representing the read preference mode.
   */
  static isValid(mode: string): boolean;
  /**
   * Validate if a mode is legal
   *
   * @param mode - The string representing the read preference mode.
   */
  isValid(mode?: string): boolean;
  /**
   * Indicates that this readPreference needs the "SecondaryOk" bit when sent over the wire
   * @see https://www.mongodb.com/docs/manual/reference/mongodb-wire-protocol/#op-query
   */
  secondaryOk(): boolean;
  /**
   * Check if the two ReadPreferences are equivalent
   *
   * @param readPreference - The read preference with which to check equality
   */
  equals(readPreference: ReadPreference): boolean;
  /** Return JSON representation */
  toJSON(): Document_2;
}

/** @public */
declare interface ReadPreferenceFromOptions extends ReadPreferenceLikeOptions {
  session?: ClientSession;
  readPreferenceTags?: TagSet[];
  hedge?: HedgeOptions;
}

/** @public */
declare type ReadPreferenceLike = ReadPreference | ReadPreferenceMode;

/** @public */
declare interface ReadPreferenceLikeOptions extends ReadPreferenceOptions {
  readPreference?: ReadPreferenceLike | {
    mode?: ReadPreferenceMode;
    preference?: ReadPreferenceMode;
    tags?: TagSet[];
    maxStalenessSeconds?: number;
  };
}

/** @public */
declare const ReadPreferenceMode: Readonly<{
  readonly primary: "primary";
  readonly primaryPreferred: "primaryPreferred";
  readonly secondary: "secondary";
  readonly secondaryPreferred: "secondaryPreferred";
  readonly nearest: "nearest";
}>;

/** @public */
declare type ReadPreferenceMode = (typeof ReadPreferenceMode)[keyof typeof ReadPreferenceMode];

/** @public */
declare interface ReadPreferenceOptions {
  /** Max secondary read staleness in seconds, Minimum value is 90 seconds.*/
  maxStalenessSeconds?: number;
  /** Server mode in which the same query is dispatched in parallel to multiple replica set members. */
  hedge?: HedgeOptions;
}

/** @public */
declare type RedirectServerRequestHandler = (data: RedirectServerRequestInfo) => void;

/** @public */
declare type RedirectServerRequestInfo = {
  /** The incoming HTTP request. */
  req: IncomingMessage;
  /** The outgoing HTTP response. */
  res: ServerResponse;
  /** The suggested HTTP status code. For unknown-url, this is 404. */
  status: number;
} & ({
  result: 'redirecting';
  location: string;
} | {
  result: 'rejected';
  /** Error information reported by the IdP as defined in RFC6749 section 4.1.2.1 */
  error?: string;
  /** Error information reported by the IdP as defined in RFC6749 section 4.1.2.1 */
  errorDescription?: string;
  /** Error information reported by the IdP as defined in RFC6749 section 4.1.2.1 */
  errorURI?: string;
} | {
  result: 'accepted';
} | {
  result: 'unknown-url';
});

/** @public */
declare type RegExpOrString<T> = T extends string ? BSONRegExp | RegExp | T : T;
declare type RemoveShellOptions = DeleteOptions & {
  justOne?: boolean;
};

/** @public */
declare type RemoveUserOptions = CommandOperationOptions;

/** @public */
declare interface RenameOptions extends CommandOperationOptions {
  /** Drop the target name collection if it previously exists. */
  dropTarget?: boolean;
  /** Unclear */
  new_collection?: boolean;
}

/** @public */
declare interface ReplaceOneModel<TSchema extends Document_2 = Document_2> {
  /** The filter to limit the replaced document. */
  filter: Filter<TSchema>;
  /** The document with which to replace the matched document. */
  replacement: WithoutId<TSchema>;
  /** Specifies a collation. */
  collation?: CollationOptions;
  /** The index to use. If specified, then the query system will only consider plans using the hinted index. */
  hint?: Hint;
  /** When true, creates a new document if no document matches the query. */
  upsert?: boolean;
}

/** @public */
declare interface ReplaceOptions extends CommandOperationOptions {
  /** If true, allows the write to opt-out of document level validation */
  bypassDocumentValidation?: boolean;
  /** Specifies a collation */
  collation?: CollationOptions;
  /** Specify that the update query should only consider plans using the hinted index */
  hint?: string | Document_2;
  /** When true, creates a new document if no document matches the query */
  upsert?: boolean;
  /** Map of parameter names and values that can be accessed using $$var (requires MongoDB 5.0). */
  let?: Document_2;
}
export declare class ReplicaSet<M extends GenericServerSideSchema = GenericServerSideSchema, D extends GenericDatabaseSchema = GenericDatabaseSchema> extends ShellApiWithMongoClass {
  _database: DatabaseWithSchema<M, D>;
  constructor(database: DatabaseWithSchema<M, D> | Database<M, D>);
  get _mongo(): Mongo<M>;
  /*
  Initiates the replica set.
  */
  initiate(config?: Partial<ReplSetConfig>): Document_2;
  _getConfig(): Promise<ReplSetConfig>;
  /*
  Returns a document that contains the current replica set configuration.
  */
  config(): ReplSetConfig;
  /*
  Calls replSetConfig
  */
  conf(): ReplSetConfig;
  /*
  Reconfigures an existing replica set, overwriting the existing replica set configuration.
  */
  reconfig(config: Partial<ReplSetConfig>, options?: {}): Document_2;
  /*
  Reconfigures an existing replica set, overwriting the existing replica set configuration, if the reconfiguration is a transition from a Primary-Arbiter to a Primary-Secondary-Arbiter set.
  */
  reconfigForPSASet(newMemberIndex: number, config: Partial<ReplSetConfig>, options?: {}): Document_2;
  /*
  Calls replSetGetStatus
  */
  status(): Document_2;
  /*
  Calls isMaster
  */
  isMaster(): Document_2;
  /*
  Calls hello
  */
  hello(): Document_2;
  /*
  Calls db.printSecondaryReplicationInfo
  */
  printSecondaryReplicationInfo(): CommandResult;
  /*
  DEPRECATED. Use rs.printSecondaryReplicationInfo
  */
  printSlaveReplicationInfo(): never;
  /*
  Calls db.printReplicationInfo
  */
  printReplicationInfo(): CommandResult;
  /*
  Adds replica set member to replica set.
  */
  add(hostport: string | Partial<ReplSetMemberConfig>, arb?: boolean): Document_2;
  /*
  Calls rs.add with arbiterOnly=true
  */
  addArb(hostname: string): Document_2;
  /*
  Removes a replica set member.
  */
  remove(hostname: string): Document_2;
  /*
  Prevents the current member from seeking election as primary for a period of time. Uses the replSetFreeze command
  */
  freeze(secs: number): Document_2;
  /*
  Causes the current primary to become a secondary which forces an election. If no stepDownSecs is provided, uses 60 seconds. Uses the replSetStepDown command
  */
  stepDown(stepdownSecs?: number, catchUpSecs?: number): Document_2;
  /*
  Sets the member that this replica set member will sync from, overriding the default sync target selection logic.
  */
  syncFrom(host: string): Document_2;
  /*
  This method is deprecated. Use db.getMongo().setReadPref() instead
  */
  secondaryOk(): void;
  [asPrintable](): string;
  private _emitReplicaSetApiCall;
}
declare type ReplPlatform = 'CLI' | 'Browser' | 'Compass' | 'JavaShell';
declare type ReplSetConfig = {
  version: number;
  _id: string;
  members: ReplSetMemberConfig[];
  protocolVersion: number;
};
declare type ReplSetMemberConfig = {
  _id: number;
  host: string;
  priority?: number;
  votes?: number;
  arbiterOnly?: boolean;
};

/**
 * Represents the logical starting point for a new ChangeStream or resuming a ChangeStream on the server.
 * @see https://www.mongodb.com/docs/manual/changeStreams/#std-label-change-stream-resume
 * @public
 */
declare type ResumeToken = unknown;

/** @public */
declare const ReturnDocument: Readonly<{
  readonly BEFORE: "before";
  readonly AFTER: "after";
}>;

/** @public */
declare type ReturnDocument = (typeof ReturnDocument)[keyof typeof ReturnDocument];

/** @public */
declare interface RootFilterOperators<TSchema> extends Document_2 {
  $and?: Filter<TSchema>[];
  $nor?: Filter<TSchema>[];
  $or?: Filter<TSchema>[];
  $text?: {
    $search: string;
    $language?: string;
    $caseSensitive?: boolean;
    $diacriticSensitive?: boolean;
  };
  $where?: string | ((this: TSchema) => boolean);
  $comment?: string | Document_2;
}

/** @public */
declare class RunCommandCursor extends AbstractCursor {
  readonly command: Readonly<Record<string, any>>;
  readonly getMoreOptions: {
    comment?: any;
    maxAwaitTimeMS?: number;
    batchSize?: number;
  };
  /**
   * Controls the `getMore.comment` field
   * @param comment - any BSON value
   */
  setComment(comment: any): this;
  /**
   * Controls the `getMore.maxTimeMS` field. Only valid when cursor is tailable await
   * @param maxTimeMS - the number of milliseconds to wait for new data
   */
  setMaxTimeMS(maxTimeMS: number): this;
  /**
   * Controls the `getMore.batchSize` field
   * @param batchSize - the number documents to return in the `nextBatch`
   */
  setBatchSize(batchSize: number): this;
  /** Unsupported for RunCommandCursor */
  clone(): never;
  /** Unsupported for RunCommandCursor: readConcern must be configured directly on command document */
  withReadConcern(_: ReadConcernLike): never;
  /** Unsupported for RunCommandCursor: various cursor flags must be configured directly on command document */
  addCursorFlag(_: string, __: boolean): never;
  /**
   * Unsupported for RunCommandCursor: maxTimeMS must be configured directly on command document
   */
  /*
  Specifies a cumulative time limit in milliseconds for processing operations on a cursor.
  */
  maxTimeMS(_: number): never;
  /** Unsupported for RunCommandCursor: batchSize must be configured directly on command document */
  /*
  Specifies the number of documents to return in each batch of the response from the MongoDB instance.
  */
  batchSize(_: number): never;
  /* Excluded from this release type: db */
  /* Excluded from this release type: __constructor */
  /* Excluded from this release type: _initialize */
  /* Excluded from this release type: getMore */
}
declare class RunCommandCursor_2 extends AbstractCursor_2<ServiceProviderRunCommandCursor> {
  constructor(mongo: Mongo, cursor: ServiceProviderRunCommandCursor);
}

/** @public */
declare type RunCommandOptions = {
  /** Specify ClientSession for this command */
  session?: ClientSession;
  /** The read preference */
  readPreference?: ReadPreferenceLike;
  /**
   * @experimental
   * Specifies the time an operation will run until it throws a timeout error
   */
  timeoutMS?: number;
  /* Excluded from this release type: omitMaxTimeMS */
} & BSONSerializeOptions;

/** @public */
declare type RunCursorCommandOptions = {
  readPreference?: ReadPreferenceLike;
  session?: ClientSession;
  /**
   * @experimental
   * Specifies the time an operation will run until it throws a timeout error. Note that if
   * `maxTimeMS` is provided in the command in addition to setting `timeoutMS` in the options, then
   * the original value of `maxTimeMS` will be overwritten.
   */
  timeoutMS?: number;
  /**
   * @public
   * @experimental
   * Specifies how `timeoutMS` is applied to the cursor. Can be either `'cursorLifeTime'` or `'iteration'`
   * When set to `'iteration'`, the deadline specified by `timeoutMS` applies to each call of
   * `cursor.next()`.
   * When set to `'cursorLifetime'`, the deadline applies to the life of the entire cursor.
   *
   * Depending on the type of cursor being used, this option has different default values.
   * For non-tailable cursors, this value defaults to `'cursorLifetime'`
   * For tailable cursors, this value defaults to `'iteration'` since tailable cursors, by
   * definition can have an arbitrarily long lifetime.
   *
   * @example
   * ```ts
   * const cursor = collection.find({}, {timeoutMS: 100, timeoutMode: 'iteration'});
   * for await (const doc of cursor) {
   *  // process doc
   *  // This will throw a timeout error if any of the iterator's `next()` calls takes more than 100ms, but
   *  // will continue to iterate successfully otherwise, regardless of the number of batches.
   * }
   * ```
   *
   * @example
   * ```ts
   * const cursor = collection.find({}, { timeoutMS: 1000, timeoutMode: 'cursorLifetime' });
   * const docs = await cursor.toArray(); // This entire line will throw a timeout error if all batches are not fetched and returned within 1000ms.
   * ```
   */
  timeoutMode?: CursorTimeoutMode;
  tailable?: boolean;
  awaitData?: boolean;
} & BSONSerializeOptions;
declare interface ScriptLoadFileEvent {
  nested: boolean;
  filename: string;
}
declare type SearchIndexDefinition = Document_2;

/**
 * @public
 */
declare interface SearchIndexDescription extends Document_2 {
  /** The name of the index. */
  name?: string;
  /** The index definition. */
  definition: Document_2;
  /** The type of the index.  Currently `search` or `vectorSearch` are supported. */
  type?: string;
}

/** @public */
declare interface ServerApi {
  version: ServerApiVersion;
  strict?: boolean;
  deprecationErrors?: boolean;
}

/** @public */
declare const ServerApiVersion: Readonly<{
  readonly v1: "1";
}>;

/** @public */
declare type ServerApiVersion = (typeof ServerApiVersion)[keyof typeof ServerApiVersion];

/**
 * Emitted when server is closed.
 * @public
 * @category Event
 */
declare class ServerClosedEvent {
  /** A unique identifier for the topology */
  topologyId: number;
  /** The address (host/port pair) of the server */
  address: string;
  /* Excluded from this release type: name */
  /* Excluded from this release type: __constructor */
}

/**
 * The client's view of a single server, based on the most recent hello outcome.
 *
 * Internal type, not meant to be directly instantiated
 * @public
 */
declare class ServerDescription {
  address: string;
  type: ServerType;
  hosts: string[];
  passives: string[];
  arbiters: string[];
  tags: TagSet;
  error: MongoError | null;
  topologyVersion: TopologyVersion | null;
  minWireVersion: number;
  maxWireVersion: number;
  roundTripTime: number;
  /** The minimum measurement of the last 10 measurements of roundTripTime that have been collected */
  minRoundTripTime: number;
  lastUpdateTime: number;
  lastWriteDate: number;
  me: string | null;
  primary: string | null;
  setName: string | null;
  setVersion: number | null;
  electionId: ObjectId | null;
  logicalSessionTimeoutMinutes: number | null;
  /** The max message size in bytes for the server. */
  maxMessageSizeBytes: number | null;
  /** The max number of writes in a bulk write command. */
  maxWriteBatchSize: number | null;
  /** The max bson object size. */
  maxBsonObjectSize: number | null;
  /** Indicates server is a mongocryptd instance. */
  iscryptd: boolean;
  $clusterTime?: ClusterTime;
  /* Excluded from this release type: __constructor */
  get hostAddress(): HostAddress;
  get allHosts(): string[];
  /** Is this server available for reads*/
  get isReadable(): boolean;
  /** Is this server data bearing */
  get isDataBearing(): boolean;
  /** Is this server available for writes */
  get isWritable(): boolean;
  get host(): string;
  get port(): number;
  /**
   * Determines if another `ServerDescription` is equal to this one per the rules defined in the SDAM specification.
   * @see https://github.com/mongodb/specifications/blob/master/source/server-discovery-and-monitoring/server-discovery-and-monitoring.md
   */
  equals(other?: ServerDescription | null): boolean;
}

/**
 * Emitted when server description changes, but does NOT include changes to the RTT.
 * @public
 * @category Event
 */
declare class ServerDescriptionChangedEvent {
  /** A unique identifier for the topology */
  topologyId: number;
  /** The address (host/port pair) of the server */
  address: string;
  /** The previous server description */
  previousDescription: ServerDescription;
  /** The new server description */
  newDescription: ServerDescription;
  name: "serverDescriptionChanged";
  /* Excluded from this release type: __constructor */
}

/** @public */
declare type ServerEvents = {
  serverHeartbeatStarted(event: ServerHeartbeatStartedEvent): void;
  serverHeartbeatSucceeded(event: ServerHeartbeatSucceededEvent): void;
  serverHeartbeatFailed(event: ServerHeartbeatFailedEvent): void;
  /* Excluded from this release type: connect */
  descriptionReceived(description: ServerDescription): void;
  closed(): void;
  ended(): void;
} & ConnectionPoolEvents & EventEmitterWithState;

/**
 * Emitted when the server monitor’s hello fails, either with an “ok: 0” or a socket exception.
 * @public
 * @category Event
 */
declare class ServerHeartbeatFailedEvent {
  /** The connection id for the command */
  connectionId: string;
  /** The execution time of the event in ms */
  duration: number;
  /** The command failure */
  failure: Error;
  /** Is true when using the streaming protocol */
  awaited: boolean;
  /* Excluded from this release type: name */
  /* Excluded from this release type: __constructor */
}

/**
 * Emitted when the server monitor’s hello command is started - immediately before
 * the hello command is serialized into raw BSON and written to the socket.
 *
 * @public
 * @category Event
 */
declare class ServerHeartbeatStartedEvent {
  /** The connection id for the command */
  connectionId: string;
  /** Is true when using the streaming protocol */
  awaited: boolean;
  /* Excluded from this release type: name */
  /* Excluded from this release type: __constructor */
}

/**
 * Emitted when the server monitor’s hello succeeds.
 * @public
 * @category Event
 */
declare class ServerHeartbeatSucceededEvent {
  /** The connection id for the command */
  connectionId: string;
  /** The execution time of the event in ms */
  duration: number;
  /** The command reply */
  reply: Document_2;
  /** Is true when using the streaming protocol */
  awaited: boolean;
  /* Excluded from this release type: name */
  /* Excluded from this release type: __constructor */
}

/** @public */
declare const ServerMonitoringMode: Readonly<{
  readonly auto: "auto";
  readonly poll: "poll";
  readonly stream: "stream";
}>;

/** @public */
declare type ServerMonitoringMode = (typeof ServerMonitoringMode)[keyof typeof ServerMonitoringMode];

/**
 * Emitted when server is initialized.
 * @public
 * @category Event
 */
declare class ServerOpeningEvent {
  /** A unique identifier for the topology */
  topologyId: number;
  /** The address (host/port pair) of the server */
  address: string;
  /* Excluded from this release type: name */
  /* Excluded from this release type: __constructor */
}

/**
 * Reflects the existence of a session on the server. Can be reused by the session pool.
 * WARNING: not meant to be instantiated directly. For internal use only.
 * @public
 */
declare class ServerSession {
  id: ServerSessionId;
  lastUse: number;
  txnNumber: number;
  isDirty: boolean;
  /* Excluded from this release type: __constructor */
  /**
   * Determines if the server session has timed out.
   *
   * @param sessionTimeoutMinutes - The server's "logicalSessionTimeoutMinutes"
   */
  hasTimedOut(sessionTimeoutMinutes: number): boolean;
}

/** @public */
declare type ServerSessionId = {
  id: Binary;
};

/**
 * An enumeration of server types we know about
 * @public
 */
declare const ServerType: Readonly<{
  readonly Standalone: "Standalone";
  readonly Mongos: "Mongos";
  readonly PossiblePrimary: "PossiblePrimary";
  readonly RSPrimary: "RSPrimary";
  readonly RSSecondary: "RSSecondary";
  readonly RSArbiter: "RSArbiter";
  readonly RSOther: "RSOther";
  readonly RSGhost: "RSGhost";
  readonly Unknown: "Unknown";
  readonly LoadBalancer: "LoadBalancer";
}>;

/** @public */
declare type ServerType = (typeof ServerType)[keyof typeof ServerType];
declare interface ServiceProvider extends Readable_2, Writable, Closable, Admin_2 {}
declare interface ServiceProviderAbstractCursor<TSchema = Document_2> extends ServiceProviderBaseCursor<TSchema> {
  batchSize(number: number): void;
  maxTimeMS(value: number): void;
  bufferedCount(): number;
  readBufferedDocuments(number?: number): TSchema[];
  toArray(): Promise<TSchema[]>;
}
declare interface ServiceProviderAggregationCursor<TSchema = Document_2> extends ServiceProviderAggregationOrFindCursor<TSchema> {}
declare interface ServiceProviderAggregationOrFindCursor<TSchema = Document_2> extends ServiceProviderAbstractCursor<TSchema> {
  project($project: Document_2): void;
  skip($skip: number): void;
  sort($sort: Document_2): void;
  explain(verbosity?: ExplainVerbosityLike): Promise<Document_2>;
  addCursorFlag(flag: CursorFlag, value: boolean): void;
  withReadPreference(readPreference: ReadPreferenceLike): this;
  withReadConcern(readConcern: ReadConcernLike): this;
}
declare interface ServiceProviderBaseCursor<TSchema = Document_2> {
  close(): Promise<void>;
  hasNext(): Promise<boolean>;
  next(): Promise<TSchema | null>;
  tryNext(): Promise<TSchema | null>;
  readonly closed: boolean;
  [Symbol.asyncIterator](): AsyncGenerator<TSchema, void, void>;
}
declare interface ServiceProviderChangeStream<TSchema = Document_2> extends ServiceProviderBaseCursor<TSchema> {
  next(): Promise<TSchema>;
  readonly resumeToken: ResumeToken;
}
declare interface ServiceProviderFindCursor<TSchema = Document_2> extends ServiceProviderAggregationOrFindCursor<TSchema> {
  allowDiskUse(allow?: boolean): void;
  collation(value: CollationOptions): void;
  comment(value: string): void;
  maxAwaitTimeMS(value: number): void;
  count(options?: CountOptions): Promise<number>;
  hint(hint: string | Document_2): void;
  max(max: Document_2): void;
  min(min: Document_2): void;
  limit(value: number): void;
  skip(value: number): void;
  returnKey(value: boolean): void;
  showRecordId(value: boolean): void;
}
declare interface ServiceProviderRunCommandCursor<TSchema = Document_2> extends ServiceProviderAbstractCursor<TSchema> {}
declare class Session<M extends GenericServerSideSchema = GenericServerSideSchema> extends ShellApiWithMongoClass {
  id: ServerSessionId | undefined;
  _session: ClientSession;
  _options: ClientSessionOptions;
  _mongo: Mongo<M>;
  private _databases;
  constructor(mongo: Mongo<M>, options: ClientSessionOptions, session: ClientSession);
  [asPrintable](): ServerSessionId | undefined;
  /*
  Returns a database class that will pass the session to the server with every command
  */
  getDatabase<K extends StringKey<M>>(name: K): DatabaseWithSchema<M, M[K]>;
  /*
  Updates the operation time
  */
  advanceOperationTime(ts: Timestamp): void;
  /*
  Advances the clusterTime for a Session to the provided clusterTime.
  */
  advanceClusterTime(clusterTime: ClusterTime): void;
  /*
  Ends the session
  */
  endSession(): void;
  /*
  Returns a boolean that specifies whether the session has ended.
  */
  hasEnded(): boolean | undefined;
  /*
  Returns the most recent cluster time as seen by the session. Applicable for replica sets and sharded clusters only.
  */
  getClusterTime(): ClusterTime | undefined;
  /*
  Returns the timestamp of the last acknowledged operation for the session.
  */
  getOperationTime(): Timestamp | undefined;
  /*
  Returns the options object passed to startSession
  */
  getOptions(): ClientSessionOptions;
  /*
  Starts a multi-document transaction for the session.
  */
  startTransaction(options?: TransactionOptions): void;
  /*
  Commits the session’s transaction.
  */
  commitTransaction(): void;
  /*
  Aborts the session’s transaction.
  */
  abortTransaction(): void;
  /*
  Run a function within a transaction context.
  */
  withTransaction<T extends (...args: any) => any>(fn: T, options?: TransactionOptions): ReturnType<T>;
}
declare interface SessionStartedEvent {
  isInteractive: boolean;
  jsContext: string;
  timings: {
    [category: string]: number;
  };
}

/** @public */
declare type SetFields<TSchema> = ({ readonly [key in KeysOfAType<TSchema, ReadonlyArray<any> | undefined>]?: OptionalId<Flatten<TSchema[key]>> | AddToSetOperators<Array<OptionalId<Flatten<TSchema[key]>>>> } & IsAny<TSchema[keyof TSchema], object, NotAcceptedFields<TSchema, ReadonlyArray<any> | undefined>>) & {
  readonly [key: string]: AddToSetOperators<any> | any;
};

/** @public */
declare type SetProfilingLevelOptions = CommandOperationOptions;

/**
 * @public
 * Severity levels align with unix syslog.
 * Most typical driver functions will log to debug.
 */
declare const SeverityLevel: Readonly<{
  readonly EMERGENCY: "emergency";
  readonly ALERT: "alert";
  readonly CRITICAL: "critical";
  readonly ERROR: "error";
  readonly WARNING: "warn";
  readonly NOTICE: "notice";
  readonly INFORMATIONAL: "info";
  readonly DEBUG: "debug";
  readonly TRACE: "trace";
  readonly OFF: "off";
}>;

/** @public */
declare type SeverityLevel = (typeof SeverityLevel)[keyof typeof SeverityLevel];
export declare class Shard<M extends GenericServerSideSchema = GenericServerSideSchema, D extends GenericDatabaseSchema = GenericDatabaseSchema> extends ShellApiWithMongoClass {
  _database: DatabaseWithSchema<M, D>;
  constructor(database: DatabaseWithSchema<M, D> | Database<M, D>);
  get _mongo(): Mongo<M>;
  [asPrintable](): string;
  private _emitShardApiCall;
  /*
  Enables sharding on a specific database. Uses the enableSharding command
  */
  enableSharding(database: string, primaryShard?: string): Document_2;
  /*
  Commits the current reshardCollection on a given collection
  */
  commitReshardCollection(namespace: string): Document_2;
  /*
  Abort the current reshardCollection on a given collection
  */
  abortReshardCollection(namespace: string): Document_2;
  /*
  Enables sharding for a collection. Uses the shardCollection command
  */
  shardCollection(namespace: string, key: Document_2, unique?: boolean | Document_2, options?: Document_2): Document_2;
  /*
  Enables sharding for a collection. Uses the reshardCollection command
  */
  reshardCollection(namespace: string, key: Document_2, unique?: boolean | Document_2, options?: Document_2): Document_2;
  _runShardCollection(command: 'shardCollection' | 'reshardCollection', namespace: string, key: Document_2, unique?: boolean | Document_2, options?: Document_2): Promise<Document_2>;
  /*
  Prints a formatted report of the sharding configuration and the information regarding existing chunks in a sharded cluster. The default behavior suppresses the detailed chunk information if the total number of chunks is greater than or equal to 20.
  */
  status(verbose?: boolean, configDB?: DatabaseWithSchema<M, D>): CommandResult<ShardingStatusResult>;
  /*
  Adds a shard to a sharded cluster. Uses the addShard command
  */
  addShard(url: string): Document_2;
  /*
  Associates a shard to a zone. Uses the addShardToZone command
  */
  addShardToZone(shard: string, zone: string): Document_2;
  /*
  3.4+ only. Calls addShardTag for a sharded DB. Aliases to sh.addShardToZone().
  */
  addShardTag(shard: string, tag: string): Document_2;
  /*
  Associates a range of shard keys to a zone. Uses the updateZoneKeyRange command
  */
  updateZoneKeyRange(namespace: string, min: Document_2, max: Document_2, zone: string | null): Document_2;
  /*
  3.4+ only. Adds a tag range for a sharded DB. This method aliases to sh.updateZoneKeyRange()
  */
  addTagRange(namespace: string, min: Document_2, max: Document_2, zone: string): Document_2;
  /*
  3.4+ only. Removes an association between a range of shard keys and a zone.
  */
  removeRangeFromZone(ns: string, min: Document_2, max: Document_2): Document_2;
  /*
  3.4+ only. Removes tag range for a sharded DB. Aliases to sh.removeRangeFromZone
  */
  removeTagRange(ns: string, min: Document_2, max: Document_2): Document_2;
  /*
  3.4+ only. Removes the association between a shard and a zone. Uses the removeShardFromZone command
  */
  removeShardFromZone(shard: string, zone: string): Document_2;
  /*
  3.4+ only. Removes a shard tag for a sharded DB. Aliases to sh.removeShardFromZone
  */
  removeShardTag(shard: string, tag: string): Document_2;
  /*
  Enables auto-splitting for the sharded cluster. Calls update on the config.settings collection
  */
  enableAutoSplit(): UpdateResult_2;
  /*
  Disables auto-splitting for the sharded cluster. Calls update on the config.settings collection
  */
  disableAutoSplit(): UpdateResult_2;
  /*
  Divides an existing chunk into two chunks using a specific value of the shard key as the dividing point. Uses the split command
  */
  splitAt(ns: string, query: Document_2): Document_2;
  /*
  Splits a chunk at the shard key value specified by the query at the median. Uses the split command
  */
  splitFind(ns: string, query: Document_2): Document_2;
  /*
  Moves the chunk that contains the document specified by the query to the destination shard. Uses the moveChunk command
  */
  moveChunk(ns: string, query: Document_2, destination: string): Document_2;
  /*
  Moves a range of documents specified by the min and max keys to the destination shard. Uses the moveRange command
  */
  moveRange(ns: string, toShard: string, min?: Document_2, max?: Document_2): Document_2;
  /*
  Returns information on whether the chunks of a sharded collection are balanced. Uses the balancerCollectionStatus command
  */
  balancerCollectionStatus(ns: string): Document_2;
  /*
  Activates the sharded collection balancer process.
  */
  enableBalancing(ns: string): UpdateResult_2;
  /*
  Disable balancing on a single collection in a sharded database. Does not affect balancing of other collections in a sharded cluster.
  */
  disableBalancing(ns: string): UpdateResult_2;
  /*
  Returns true when the balancer is enabled and false if the balancer is disabled. This does not reflect the current state of balancing operations: use sh.isBalancerRunning() to check the balancer’s current state.
  */
  getBalancerState(): boolean;
  /*
  Returns true if the balancer process is currently running and migrating chunks and false if the balancer process is not running. Uses the balancerStatus command
  */
  isBalancerRunning(): Document_2;
  /*
  Enables the balancer. Uses the balancerStart command
  */
  startBalancer(timeout?: number): Document_2;
  /*
  Disables the balancer. uses the balancerStop command
  */
  stopBalancer(timeout?: number): Document_2;
  /*
  Calls sh.startBalancer if state is true, otherwise calls sh.stopBalancer
  */
  setBalancerState(state: boolean): Document_2;
  /*
  Returns data-size distribution information for all existing sharded collections
  */
  getShardedDataDistribution(options?: {}): AggregationCursor_2;
  /*
  Globally enable auto-merger (active only if balancer is up)
  */
  startAutoMerger(): UpdateResult_2;
  /*
  Globally disable auto-merger
  */
  stopAutoMerger(): UpdateResult_2;
  /*
  Returns whether the auto-merger is enabled
  */
  isAutoMergerEnabled(): boolean;
  /*
  Disable auto-merging on one collection
  */
  disableAutoMerger(ns: string): UpdateResult_2;
  /*
  Re-enable auto-merge on one collection
  */
  enableAutoMerger(ns: string): UpdateResult_2;
  /*
  Returns a cursor with information about metadata inconsistencies
  */
  checkMetadataConsistency(options?: CheckMetadataConsistencyOptions): RunCommandCursor_2;
  /*
  Shards a collection and then immediately reshards the collection to the same shard key.
  */
  shardAndDistributeCollection(ns: string, key: Document_2, unique?: boolean | Document_2, options?: Document_2): Document_2;
  /*
  Moves a single unsharded collection to a different shard.
  */
  moveCollection(ns: string, toShard: string): Document_2;
  /*
  Abort the current moveCollection operation on a given collection
  */
  abortMoveCollection(ns: string): Document_2;
  /*
  Unshard the given collection and move all data to the given shard.
  */
  unshardCollection(ns: string, toShard: string): Document_2;
  /*
  Abort the current unshardCollection operation on a given collection
  */
  abortUnshardCollection(ns: string): Document_2;
  /*
  Returns a list of the configured shards in a sharded cluster
  */
  listShards(): ShardInfo[];
  /*
  Returns a document with an `enabled: <boolean>` field indicating whether the cluster is configured as embedded config server cluster. If it is, then the config shard host and tags are also returned.
  */
  isConfigShardEnabled(): Document_2;
}
declare type ShardedDataDistribution = {
  ns: string;
  shards: {
    shardName: string;
    numOrphanedDocs: number;
    numOwnedDocuments: number;
    orphanedSizeBytes: number;
    ownedSizeBytes: number;
  }[];
}[];
declare type ShardInfo = {
  _id: string;
  host: string;
  state: number;
  tags?: string[];
  topologyTime: Timestamp;
  replSetConfigVersion: Long;
};
declare type ShardingStatusResult = {
  shardingVersion: {
    _id: number;
    clusterId: ObjectId;
    currentVersion?: number;
  };
  shards: ShardInfo[];
  [mongoses: `${string} mongoses`]: 'none' | {
    [version: string]: number | {
      up: number;
      waiting: boolean;
    };
  }[];
  autosplit: {
    'Currently enabled': 'yes' | 'no';
  };
  automerge?: {
    'Currently enabled': 'yes' | 'no';
  };
  balancer: {
    'Currently enabled': 'yes' | 'no';
    'Currently running': 'yes' | 'no' | 'unknown';
    'Failed balancer rounds in last 5 attempts': number;
    'Migration Results for the last 24 hours': 'No recent migrations' | {
      [count: number]: 'Success' | `Failed with error '${string}', from ${string} to ${string}`;
    };
    'Balancer active window is set between'?: `${string} and ${string} server local time`;
    'Last reported error'?: string;
    'Time of Reported error'?: string;
    'Collections with active migrations'?: `${string} started at ${string}`[];
  };
  shardedDataDistribution?: ShardedDataDistribution;
  databases: {
    database: Document_2;
    collections: Document_2;
  }[];
};
export declare class ShellApi extends ShellApiClass {
  [instanceStateSymbol]: ShellInstanceState;
  [loadCallNestingLevelSymbol]: number;
  DBQuery: DBQuery;
  config: ShellConfig;
  constructor(instanceState: ShellInstanceState);
  /*
  'log.info(<msg>)': Write a custom info/warn/error/fatal/debug message to the log file
  'log.getPath()': Gets a path to the current log file
  
  */
  get log(): ShellLog;
  get _instanceState(): ShellInstanceState;
  get loadCallNestingLevel(): number;
  set loadCallNestingLevel(value: number);
  /*
  Set current database
  */
  use(db: string): any;
  /*
  'show databases'/'show dbs': Print a list of all available databases
  'show collections'/'show tables': Print a list of all collections for current database
  'show profile': Prints system.profile information
  'show users': Print a list of all users for current database
  'show roles': Print a list of all roles for current database
  'show log <type>': log for current connection, if type is not set uses 'global'
  'show logs': Print all logs
  */
  show(cmd: string, arg?: string): CommandResult;
  _untrackedShow(cmd: string, arg?: string): Promise<CommandResult>;
  /*
  Quit the MongoDB shell with exit/exit()/.exit
  */
  exit(exitCode?: number): never;
  /*
  Quit the MongoDB shell with quit/quit()
  */
  quit(exitCode?: number): never;
  /*
  Create a new connection and return the Mongo object. Usage: new Mongo(URI, options [optional])
  */
  Mongo(uri?: string, fleOptions?: ClientSideFieldLevelEncryptionOptions, otherOptions?: {
    api?: ServerApi | ServerApiVersion;
  }): Mongo;
  /*
  Create a new connection and return the Database object. Usage: connect(URI, username [optional], password [optional])
  */
  connect(uri: string, user?: string, pwd?: string): DatabaseWithSchema;
  /*
  result of the last line evaluated; use to further iterate
  */
  it(): any;
  /*
  Shell version
  */
  version(): string;
  /*
  Loads and runs a JavaScript file into the current shell environment
  */
  load(filename: string): true;
  /*
  Enables collection of anonymous usage data to improve the mongosh CLI
  */
  enableTelemetry(): any;
  /*
  Disables collection of anonymous usage data to improve the mongosh CLI
  */
  disableTelemetry(): any;
  /*
  Prompts the user for a password
  */
  passwordPrompt(): string;
  /*
  Sleep for the specified number of milliseconds
  */
  sleep(ms: number): void;
  private _print;
  /*
  Prints the contents of an object to the output
  */
  print(...origArgs: any[]): void;
  /*
  Alias for print()
  */
  printjson(...origArgs: any[]): void;
  /*
  Returns the hashed value for the input using the same hashing function as a hashed index.
  */
  convertShardKeyToHashed(value: any): unknown;
  /*
  Clears the screen like console.clear()
  */
  cls(): void;
  /*
  Returns whether the shell will enter or has entered interactive mode
  */
  isInteractive(): boolean;
}
declare abstract class ShellApiClass {
  help: any;
  abstract get _instanceState(): ShellInstanceState;
  get [shellApiType](): string;
  set [shellApiType](value: string);
  [asPrintable](): any;
}
declare const shellApiType: unique symbol;
declare abstract class ShellApiValueClass extends ShellApiClass {
  get _mongo(): never;
  get _instanceState(): never;
}
declare abstract class ShellApiWithMongoClass extends ShellApiClass {
  abstract get _mongo(): Mongo;
  get _instanceState(): ShellInstanceState;
}
declare interface ShellAuthOptions {
  user: string;
  pwd: string;
  mechanism?: string;
  digestPassword?: boolean;
  authDb?: string;
}
export declare type ShellBson = WithHelp<ShellBsonBase>;
declare interface ShellBsonBase {
  DBRef: (namespace: string, oid: any, db?: string, fields?: Document_2) => typeof bson.DBRef.prototype;
  bsonsize: (object: any) => number;
  MaxKey: () => typeof bson.MaxKey.prototype;
  MinKey: () => typeof bson.MinKey.prototype;
  ObjectId: (id?: string | number | typeof bson.ObjectId.prototype | Buffer) => typeof bson.ObjectId.prototype;
  Timestamp: (t?: number | typeof bson.Long.prototype | {
    t: number;
    i: number;
  }, i?: number) => typeof bson.Timestamp.prototype;
  Code: (c?: string | Function, s?: any) => typeof bson.Code.prototype;
  NumberDecimal: (s?: string) => typeof bson.Decimal128.prototype;
  NumberInt: (v?: string) => typeof bson.Int32.prototype;
  NumberLong: (s?: string | number) => typeof bson.Long.prototype;
  ISODate: (input?: string) => Date;
  BinData: (subtype: number, b64string: string) => Binary;
  HexData: (subtype: number, hexstr: string) => Binary;
  UUID: (hexstr?: string) => Binary;
  MD5: (hexstr: string) => Binary;
  Decimal128: typeof bson.Decimal128;
  BSONSymbol: typeof bson.BSONSymbol;
  Int32: typeof bson.Int32;
  Long: LongWithoutAccidentallyExposedMethods;
  Binary: typeof bson.Binary;
  Double: typeof bson.Double;
  EJSON: typeof bson.EJSON;
  BSONRegExp: typeof bson.BSONRegExp;
}
declare interface ShellCliOptions {
  nodb?: boolean;
}
declare class ShellConfig extends ShellApiClass {
  _instanceState: ShellInstanceState;
  defaults: Readonly<ShellUserConfig>;
  constructor(instanceState: ShellInstanceState);
  /*
  Change a configuration value with config.set(key, value)
  */
  set<K extends keyof ShellUserConfig>(key: K, value: ShellUserConfig[K]): string;
  /*
  Get a configuration value with config.get(key)
  */
  get<K extends keyof ShellUserConfig>(key: K): ShellUserConfig[K];
  /*
  Reset a configuration value to its default value with config.reset(key)
  */
  reset<K extends keyof ShellUserConfig>(key: K): string;
  _allKeys(): Promise<(keyof ShellUserConfig)[]>;
  [asPrintable](): Promise<Map<keyof ShellUserConfig, ShellUserConfig[keyof ShellUserConfig]>>;
}
declare class ShellInstanceState {
  currentCursor: Cursor | AggregationCursor_2 | ChangeStreamCursor | RunCommandCursor_2 | null;
  currentDb: DatabaseWithSchema;
  messageBus: MongoshBus;
  initialServiceProvider: ServiceProvider;
  private connectionInfoCache;
  context: any;
  mongos: Mongo[];
  shellApi: ShellApi;
  shellLog: ShellLog;
  shellBson: ShellBson;
  cliOptions: ShellCliOptions;
  evaluationListener: EvaluationListener;
  displayBatchSizeFromDBQuery: number | undefined;
  isInteractive: boolean;
  apiCallDepth: number;
  private warningsShown;
  readonly interrupted: InterruptFlag;
  resumeMongosAfterInterrupt: Array<{
    mongo: Mongo;
    resume: (() => Promise<void>) | null;
  }> | undefined;
  private plugins;
  private alreadyTransformedErrors;
  private preFetchCollectionAndDatabaseNames;
  constructor(initialServiceProvider: ServiceProvider, messageBus?: any, cliOptions?: ShellCliOptions);
  fetchConnectionInfo(): Promise<ConnectionInfo_2 | undefined>;
  cachedConnectionInfo(): ConnectionInfo_2 | undefined;
  close(force: boolean): Promise<void>;
  setPreFetchCollectionAndDatabaseNames(value: boolean): void;
  setDbFunc(newDb: any): DatabaseWithSchema;
  setCtx(contextObject: any): void;
  get currentServiceProvider(): ServiceProvider;
  emitApiCallWithArgs(event: ApiEventWithArguments): void;
  emitApiCall(event: Omit<ApiEvent, 'callDepth'>): void;
  setEvaluationListener(listener: EvaluationListener): void;
  getAutocompleteParameters(): AutocompleteParameters;
  apiVersionInfo(): Required<ServerApi> | undefined;
  onInterruptExecution(): Promise<boolean>;
  onResumeExecution(): Promise<boolean>;
  getDefaultPrompt(): Promise<string>;
  private getDefaultPromptPrefix;
  private getTopologySpecificPrompt;
  private getTopologySinglePrompt;
  registerPlugin(plugin: ShellPlugin): void;
  transformError(err: any): any;
  printDeprecationWarning(message: string): Promise<void>;
  printWarning(message: string): Promise<void>;
}
declare class ShellLog extends ShellApiClass {
  [instanceStateSymbol_2]: ShellInstanceState;
  get _instanceState(): ShellInstanceState;
  constructor(instanceState: ShellInstanceState);
  /*
  Gets a path to the current log file
  */
  getPath(): string | undefined;
  /*
  Writes a custom info message to the log file
  */
  info(message: string, attr?: unknown): void;
  /*
  Writes a custom warning message to the log file
  */
  warn(message: string, attr?: unknown): void;
  /*
  Writes a custom error message to the log file
  */
  error(message: string, attr?: unknown): void;
  /*
  Writes a custom fatal message to the log file
  */
  fatal(message: string, attr?: unknown): void;
  /*
  Writes a custom debug message to the log file
  */
  debug(message: string, attr?: unknown, level?: 1 | 2 | 3 | 4 | 5): void;
}
declare interface ShellPlugin {
  transformError?: (err: Error) => Error;
}
declare interface ShellResult {
  rawValue: any;
  printable: any;
  type: string | null;
  source?: ShellResultSourceInformation;
}
declare interface ShellResultSourceInformation {
  namespace: Namespace;
}
declare class ShellUserConfig {
  displayBatchSize: number;
  maxTimeMS: number | null;
  enableTelemetry: boolean;
  editor: string | null;
  logLocation: string | undefined;
}
declare interface ShowEvent {
  method: string;
}
declare interface SnippetsCommandEvent {
  args: string[];
}
declare interface SnippetsErrorEvent {
  error: string;
}
declare interface SnippetsFetchIndexErrorEvent {
  action: string;
  url?: string;
  status?: number;
  error?: string;
}
declare interface SnippetsFetchIndexEvent {
  refreshMode: string;
}
declare interface SnippetsLoadedEvent {
  installdir: string;
}
declare interface SnippetsLoadSnippetEvent {
  source: string;
  name: string;
}
declare interface SnippetsNpmDownloadActiveEvent {
  npmMetadataURL: string;
  npmTarballURL: string;
}
declare interface SnippetsNpmDownloadFailedEvent {
  npmMetadataURL: string;
  npmTarballURL?: string;
  status?: number;
}
declare interface SnippetsNpmLookupEvent {
  existingVersion: string;
}
declare interface SnippetsRunNpmEvent {
  args: string[];
}
declare interface SnippetsTransformErrorEvent {
  error: string;
  addition: string;
  name: string;
}

/** @public */
declare type Sort = string | Exclude<SortDirection, {
  $meta: string;
}> | string[] | {
  [key: string]: SortDirection;
} | Map<string, SortDirection> | [string, SortDirection][] | [string, SortDirection];

/** @public */
declare type SortDirection = 1 | -1 | 'asc' | 'desc' | 'ascending' | 'descending' | {
  $meta: string;
};
declare interface StartLoadingCliScriptsEvent {
  usesShellOption: boolean;
}
declare interface StartMongoshReplEvent {
  version: string;
}

/** @public */
declare interface StreamDescriptionOptions {
  compressors?: CompressorName[];
  logicalSessionTimeoutMinutes?: number;
  loadBalanced: boolean;
}
declare class StreamProcessor extends ShellApiWithMongoClass {
  _streams: Streams;
  name: string;
  constructor(_streams: Streams, name: string);
  get _mongo(): Mongo;
  [asPrintable](): string;
  /*
  Start a named stream processor.
  */
  start(options?: Document_2): Document_2;
  /*
  Stop a named stream processor.
  */
  stop(options?: Document_2): Document_2;
  /*
  Drop a named stream processor.
  */
  drop(options?: Document_2): Document_2;
  _drop(options?: Document_2): Promise<Document_2>;
  /*
  Return stats captured from a named stream processor.
  */
  stats(options?: Document_2): Document_2;
  /*
  Modify a stream processor definition.
  */
  modify(options: Document_2): Document_2;
  /*
  Modify a stream processor definition.
  */
  modify(pipeline: Document_2[], options?: Document_2): Document_2;
  /*
  Return a sample of the results from a named stream processor.
  */
  sample(options?: Document_2): Document_2 | undefined;
  _sampleFrom(cursorId: number): Promise<Document_2 | undefined>;
}
export declare class Streams<M extends GenericServerSideSchema = GenericServerSideSchema, D extends GenericDatabaseSchema = GenericDatabaseSchema> extends ShellApiWithMongoClass {
  static newInstance<M extends GenericServerSideSchema = GenericServerSideSchema, D extends GenericDatabaseSchema = GenericDatabaseSchema>(database: DatabaseWithSchema<M, D>): Streams<M, D>;
  private _database;
  constructor(database: DatabaseWithSchema<M, D> | Database<M, D>);
  get _mongo(): Mongo<M>;
  [asPrintable](): string;
  /*
  Get a stream processor with specified name.
  */
  getProcessor(name: string): StreamProcessor;
  /*
  Allows a user to process streams of data in the shell interactively and quickly iterate building a stream processor as they go.
  */
  process(pipeline: Document_2[], options?: Document_2): void | Document_2;
  /*
  Create a named stream processor.
  */
  createStreamProcessor(name: string, pipeline: Document_2[], options?: Document_2): Document_2 | StreamProcessor;
  /*
  Show a list of all the named stream processors.
  */
  listStreamProcessors(filter: Document_2): any;
  /*
  Show a list of all the named connections for this instance from the Connection Registry.
  */
  listConnections(filter: Document_2): any;
  _runStreamCommand(cmd: Document_2, options?: Document_2): Promise<Document_2>;
}
declare type StringKey<T> = keyof T & string;

/** @public */
declare type SupportedNodeConnectionOptions = SupportedTLSConnectionOptions & SupportedTLSSocketOptions & SupportedSocketOptions;

/** @public */
declare type SupportedSocketOptions = Pick<TcpNetConnectOpts & {
  autoSelectFamily?: boolean;
  autoSelectFamilyAttemptTimeout?: number;
}, (typeof LEGAL_TCP_SOCKET_OPTIONS)[number]>;

/** @public */
declare type SupportedTLSConnectionOptions = Pick<ConnectionOptions & {
  allowPartialTrustChain?: boolean;
}, (typeof LEGAL_TLS_SOCKET_OPTIONS)[number]>;

/** @public */
declare type SupportedTLSSocketOptions = Pick<TLSSocketOptions, Extract<keyof TLSSocketOptions, (typeof LEGAL_TLS_SOCKET_OPTIONS)[number]>>;

/** @public */
declare type TagSet = {
  [key: string]: string;
};

/** @public
 * Configuration options for timeseries collections
 * @see https://www.mongodb.com/docs/manual/core/timeseries-collections/
 */
declare interface TimeSeriesCollectionOptions extends Document_2 {
  timeField: string;
  metaField?: string;
  granularity?: 'seconds' | 'minutes' | 'hours' | string;
  bucketMaxSpanSeconds?: number;
  bucketRoundingSeconds?: number;
}
declare enum Topologies {
  ReplSet = "ReplSet",
  Standalone = "Standalone",
  Sharded = "Sharded",
  LoadBalanced = "LoadBalanced",
}

/**
 * Emitted when topology is closed.
 * @public
 * @category Event
 */
declare class TopologyClosedEvent {
  /** A unique identifier for the topology */
  topologyId: number;
  /* Excluded from this release type: name */
  /* Excluded from this release type: __constructor */
}

/**
 * Representation of a deployment of servers
 * @public
 */
declare class TopologyDescription {
  type: TopologyType;
  setName: string | null;
  maxSetVersion: number | null;
  maxElectionId: ObjectId | null;
  servers: Map<string, ServerDescription>;
  stale: boolean;
  compatible: boolean;
  compatibilityError?: string;
  logicalSessionTimeoutMinutes: number | null;
  heartbeatFrequencyMS: number;
  localThresholdMS: number;
  commonWireVersion: number;
  /**
   * Create a TopologyDescription
   */
  constructor(topologyType: TopologyType, serverDescriptions?: Map<string, ServerDescription> | null, setName?: string | null, maxSetVersion?: number | null, maxElectionId?: ObjectId | null, commonWireVersion?: number | null, options?: TopologyDescriptionOptions | null);
  /* Excluded from this release type: updateFromSrvPollingEvent */
  /* Excluded from this release type: update */
  get error(): MongoError | null;
  /**
   * Determines if the topology description has any known servers
   */
  get hasKnownServers(): boolean;
  /**
   * Determines if this topology description has a data-bearing server available.
   */
  get hasDataBearingServers(): boolean;
  /* Excluded from this release type: hasServer */
  /**
   * Returns a JSON-serializable representation of the TopologyDescription.  This is primarily
   * intended for use with JSON.stringify().
   *
   * This method will not throw.
   */
  toJSON(): Document_2;
}

/**
 * Emitted when topology description changes.
 * @public
 * @category Event
 */
declare class TopologyDescriptionChangedEvent {
  /** A unique identifier for the topology */
  topologyId: number;
  /** The old topology description */
  previousDescription: TopologyDescription;
  /** The new topology description */
  newDescription: TopologyDescription;
  /* Excluded from this release type: name */
  /* Excluded from this release type: __constructor */
}

/** @public */
declare interface TopologyDescriptionOptions {
  heartbeatFrequencyMS?: number;
  localThresholdMS?: number;
}

/** @public */
declare type TopologyEvents = {
  /* Excluded from this release type: connect */
  serverOpening(event: ServerOpeningEvent): void;
  serverClosed(event: ServerClosedEvent): void;
  serverDescriptionChanged(event: ServerDescriptionChangedEvent): void;
  topologyClosed(event: TopologyClosedEvent): void;
  topologyOpening(event: TopologyOpeningEvent): void;
  topologyDescriptionChanged(event: TopologyDescriptionChangedEvent): void;
  error(error: Error): void;
  /* Excluded from this release type: open */
  close(): void;
  timeout(): void;
} & Omit<ServerEvents, 'connect'> & ConnectionPoolEvents & ConnectionEvents & EventEmitterWithState;

/**
 * Emitted when topology is initialized.
 * @public
 * @category Event
 */
declare class TopologyOpeningEvent {
  /** A unique identifier for the topology */
  topologyId: number;
  /* Excluded from this release type: name */
  /* Excluded from this release type: __constructor */
}

/**
 * An enumeration of topology types we know about
 * @public
 */
declare const TopologyType: Readonly<{
  readonly Single: "Single";
  readonly ReplicaSetNoPrimary: "ReplicaSetNoPrimary";
  readonly ReplicaSetWithPrimary: "ReplicaSetWithPrimary";
  readonly Sharded: "Sharded";
  readonly Unknown: "Unknown";
  readonly LoadBalanced: "LoadBalanced";
}>;

/** @public */
declare type TopologyType = (typeof TopologyType)[keyof typeof TopologyType];

/** @public */
declare interface TopologyVersion {
  processId: ObjectId;
  counter: Long;
}

/**
 * @public
 * A class maintaining state related to a server transaction. Internal Only
 */
declare class Transaction {
  /* Excluded from this release type: state */
  options: TransactionOptions;
  /* Excluded from this release type: _pinnedServer */
  /* Excluded from this release type: _recoveryToken */
  /* Excluded from this release type: __constructor */
  /* Excluded from this release type: server */
  get recoveryToken(): Document_2 | undefined;
  get isPinned(): boolean;
  /** @returns Whether the transaction has started */
  get isStarting(): boolean;
  /**
   * @returns Whether this session is presently in a transaction
   */
  get isActive(): boolean;
  get isCommitted(): boolean;
  /* Excluded from this release type: transition */
  /* Excluded from this release type: pinServer */
  /* Excluded from this release type: unpinServer */
}

/**
 * Configuration options for a transaction.
 * @public
 */
declare interface TransactionOptions extends Omit<CommandOperationOptions, 'timeoutMS'> {
  /** A default read concern for commands in this transaction */
  readConcern?: ReadConcernLike;
  /** A default writeConcern for commands in this transaction */
  writeConcern?: WriteConcern;
  /** A default read preference for commands in this transaction */
  readPreference?: ReadPreferenceLike;
  /** Specifies the maximum amount of time to allow a commit action on a transaction to run in milliseconds */
  maxCommitTimeMS?: number;
}

/**
 * Typescript type safe event emitter
 * @public
 */
declare interface TypedEventEmitter<Events extends EventsDescription> extends EventEmitter {
  addListener<EventKey extends keyof Events>(event: EventKey, listener: Events[EventKey]): this;
  addListener(event: CommonEvents, listener: (eventName: string | symbol, listener: GenericListener) => void): this;
  addListener(event: string | symbol, listener: GenericListener): this;
  on<EventKey extends keyof Events>(event: EventKey, listener: Events[EventKey]): this;
  on(event: CommonEvents, listener: (eventName: string | symbol, listener: GenericListener) => void): this;
  on(event: string | symbol, listener: GenericListener): this;
  once<EventKey extends keyof Events>(event: EventKey, listener: Events[EventKey]): this;
  once(event: CommonEvents, listener: (eventName: string | symbol, listener: GenericListener) => void): this;
  once(event: string | symbol, listener: GenericListener): this;
  removeListener<EventKey extends keyof Events>(event: EventKey, listener: Events[EventKey]): this;
  removeListener(event: CommonEvents, listener: (eventName: string | symbol, listener: GenericListener) => void): this;
  removeListener(event: string | symbol, listener: GenericListener): this;
  off<EventKey extends keyof Events>(event: EventKey, listener: Events[EventKey]): this;
  off(event: CommonEvents, listener: (eventName: string | symbol, listener: GenericListener) => void): this;
  off(event: string | symbol, listener: GenericListener): this;
  removeAllListeners<EventKey extends keyof Events>(event?: EventKey | CommonEvents | symbol | string): this;
  listeners<EventKey extends keyof Events>(event: EventKey | CommonEvents | symbol | string): Events[EventKey][];
  rawListeners<EventKey extends keyof Events>(event: EventKey | CommonEvents | symbol | string): Events[EventKey][];
  emit<EventKey extends keyof Events>(event: EventKey | symbol, ...args: Parameters<Events[EventKey]>): boolean;
  listenerCount<EventKey extends keyof Events>(type: EventKey | CommonEvents | symbol | string): number;
  prependListener<EventKey extends keyof Events>(event: EventKey, listener: Events[EventKey]): this;
  prependListener(event: CommonEvents, listener: (eventName: string | symbol, listener: GenericListener) => void): this;
  prependListener(event: string | symbol, listener: GenericListener): this;
  prependOnceListener<EventKey extends keyof Events>(event: EventKey, listener: Events[EventKey]): this;
  prependOnceListener(event: CommonEvents, listener: (eventName: string | symbol, listener: GenericListener) => void): this;
  prependOnceListener(event: string | symbol, listener: GenericListener): this;
  eventNames(): string[];
  getMaxListeners(): number;
  setMaxListeners(n: number): this;
}

/**
 * Typescript type safe event emitter
 * @public
 */
declare class TypedEventEmitter<Events extends EventsDescription> extends EventEmitter {
  /* Excluded from this release type: mongoLogger */
  /* Excluded from this release type: component */
  /* Excluded from this release type: emitAndLog */
  /* Excluded from this release type: emitAndLogHeartbeat */
  /* Excluded from this release type: emitAndLogCommand */
}

/** @public */
declare interface TypedEventEmitter_2<EventMap extends object> {
  on<K extends keyof EventMap>(event: K, listener: EventMap[K]): this;
  off?<K extends keyof EventMap>(event: K, listener: EventMap[K]): this;
  once<K extends keyof EventMap>(event: K, listener: EventMap[K]): this;
  emit<K extends keyof EventMap>(event: K, ...args: EventMap[K] extends ((...args: infer P) => any) ? P : never): unknown;
}

/** @public */
declare class UnorderedBulkOperation extends BulkOperationBase {
  /* Excluded from this release type: __constructor */
  handleWriteError(writeResult: BulkWriteResult): void;
  addToOperationsList(batchType: BatchType, document: Document_2 | UpdateStatement | DeleteStatement): this;
}

/** @public */
declare interface UpdateDescription<TSchema extends Document_2 = Document_2> {
  /**
   * A document containing key:value pairs of names of the fields that were
   * changed, and the new value for those fields.
   */
  updatedFields?: Partial<TSchema>;
  /**
   * An array of field names that were removed from the document.
   */
  removedFields?: string[];
  /**
   * An array of documents which record array truncations performed with pipeline-based updates using one or more of the following stages:
   * - $addFields
   * - $set
   * - $replaceRoot
   * - $replaceWith
   */
  truncatedArrays?: Array<{
    /** The name of the truncated field. */
    field: string;
    /** The number of elements in the truncated array. */
    newSize: number;
  }>;
  /**
   * A document containing additional information about any ambiguous update paths from the update event.  The document
   * maps the full ambiguous update path to an array containing the actual resolved components of the path.  For example,
   * given a document shaped like `{ a: { '0': 0 } }`, and an update of `{ $inc: 'a.0' }`, disambiguated paths would look like
   * the following:
   *
   * ```
   *   {
   *     'a.0': ['a', '0']
   *   }
   * ```
   *
   * This field is only present when there are ambiguous paths that are updated as a part of the update event.
   *
   * On \<8.2.0 servers, this field is only present when `showExpandedEvents` is set to true.
   * is enabled for the change stream.
   *
   * On 8.2.0+ servers, this field is present for update events regardless of whether `showExpandedEvents` is enabled.
   * @sinceServerVersion 6.1.0
   */
  disambiguatedPaths?: Document_2;
}

/** @public */
declare type UpdateFilter<TSchema> = {
  $currentDate?: OnlyFieldsOfType<TSchema, Date | Timestamp, true | {
    $type: 'date' | 'timestamp';
  }>;
  $inc?: OnlyFieldsOfType<TSchema, NumericType | undefined>;
  $min?: MatchKeysAndValues<TSchema>;
  $max?: MatchKeysAndValues<TSchema>;
  $mul?: OnlyFieldsOfType<TSchema, NumericType | undefined>;
  $rename?: Record<string, string>;
  $set?: MatchKeysAndValues<TSchema>;
  $setOnInsert?: MatchKeysAndValues<TSchema>;
  $unset?: OnlyFieldsOfType<TSchema, any, '' | true | 1>;
  $addToSet?: SetFields<TSchema>;
  $pop?: OnlyFieldsOfType<TSchema, ReadonlyArray<any>, 1 | -1>;
  $pull?: PullOperator<TSchema>;
  $push?: PushOperator<TSchema>;
  $pullAll?: PullAllOperator<TSchema>;
  $bit?: OnlyFieldsOfType<TSchema, NumericType | undefined, {
    and: IntegerType;
  } | {
    or: IntegerType;
  } | {
    xor: IntegerType;
  }>;
} & Document_2;

/** @public */
declare interface UpdateManyModel<TSchema extends Document_2 = Document_2> {
  /** The filter to limit the updated documents. */
  filter: Filter<TSchema>;
  /**
   * The modifications to apply. The value can be either:
   * UpdateFilter<TSchema> - A document that contains update operator expressions,
   * Document[] - an aggregation pipeline.
   */
  update: UpdateFilter<TSchema> | Document_2[];
  /** A set of filters specifying to which array elements an update should apply. */
  arrayFilters?: Document_2[];
  /** Specifies a collation. */
  collation?: CollationOptions;
  /** The index to use. If specified, then the query system will only consider plans using the hinted index. */
  hint?: Hint;
  /** When true, creates a new document if no document matches the query. */
  upsert?: boolean;
}

/** @public */
declare interface UpdateOneModel<TSchema extends Document_2 = Document_2> {
  /** The filter to limit the updated documents. */
  filter: Filter<TSchema>;
  /**
   * The modifications to apply. The value can be either:
   * UpdateFilter<TSchema> - A document that contains update operator expressions,
   * Document[] - an aggregation pipeline.
   */
  update: UpdateFilter<TSchema> | Document_2[];
  /** A set of filters specifying to which array elements an update should apply. */
  arrayFilters?: Document_2[];
  /** Specifies a collation. */
  collation?: CollationOptions;
  /** The index to use. If specified, then the query system will only consider plans using the hinted index. */
  hint?: Hint;
  /** When true, creates a new document if no document matches the query. */
  upsert?: boolean;
}

/** @public */
declare interface UpdateOptions extends CommandOperationOptions {
  /** A set of filters specifying to which array elements an update should apply */
  arrayFilters?: Document_2[];
  /** If true, allows the write to opt-out of document level validation */
  bypassDocumentValidation?: boolean;
  /** Specifies a collation */
  collation?: CollationOptions;
  /** Specify that the update query should only consider plans using the hinted index */
  hint?: Hint;
  /** When true, creates a new document if no document matches the query */
  upsert?: boolean;
  /** Map of parameter names and values that can be accessed using $$var (requires MongoDB 5.0). */
  let?: Document_2;
}

/**
 * @public
 * `TSchema` is the schema of the collection
 */
declare interface UpdateResult<TSchema extends Document_2 = Document_2> {
  /** Indicates whether this write result was acknowledged. If not, then all other members of this result will be undefined */
  acknowledged: boolean;
  /** The number of documents that matched the filter */
  matchedCount: number;
  /** The number of documents that were modified */
  modifiedCount: number;
  /** The number of documents that were upserted */
  upsertedCount: number;
  /** The identifier of the inserted document if an upsert took place */
  upsertedId: InferIdType<TSchema> | null;
}
declare class UpdateResult_2 extends ShellApiValueClass {
  acknowledged: boolean;
  insertedId: ObjectId | null;
  matchedCount: number;
  modifiedCount: number;
  upsertedCount: number;
  constructor(acknowledged: boolean, matchedCount: number, modifiedCount: number, upsertedCount: number, insertedId: ObjectId | null);
}

/** @public */
declare interface UpdateStatement {
  /** The query that matches documents to update. */
  q: Document_2;
  /** The modifications to apply. */
  u: Document_2 | Document_2[];
  /**  If true, perform an insert if no documents match the query. */
  upsert?: boolean;
  /** If true, updates all documents that meet the query criteria. */
  multi?: boolean;
  /** Specifies the collation to use for the operation. */
  collation?: CollationOptions;
  /** An array of filter documents that determines which array elements to modify for an update operation on an array field. */
  arrayFilters?: Document_2[];
  /** A document or string that specifies the index to use to support the query predicate. */
  hint?: Hint;
}
declare interface UseEvent {
  db: string;
}

/** @public */
declare interface ValidateCollectionOptions extends CommandOperationOptions {
  /** Validates a collection in the background, without interrupting read or write traffic (only in MongoDB 4.4+) */
  background?: boolean;
}

/** @public */
declare type W = number | 'majority';
declare type WithHelp<T> = { [prop in keyof T]: T[prop] & {
  help?: () => Help;
} };

/** Add an _id field to an object shaped type @public */
declare type WithId<TSchema> = EnhancedOmit<TSchema, '_id'> & {
  _id: InferIdType<TSchema>;
};

/** Remove the _id field from an object shaped type @public */
declare type WithoutId<TSchema> = Omit<TSchema, '_id'>;

/** @public */
declare type WithSessionCallback<T = unknown> = (session: ClientSession) => Promise<T>;

/** @public */
declare type WithTransactionCallback<T = any> = (session: ClientSession) => Promise<T>;
declare interface Writable {
  runCommand(db: string, spec: Document_2, options: RunCommandOptions, dbOptions?: DbOptions): Promise<Document_2>;
  runCommandWithCheck(db: string, spec: Document_2, options: RunCommandOptions, dbOptions?: DbOptions): Promise<Document_2>;
  runCursorCommand(db: string, spec: Document_2, options: RunCursorCommandOptions, dbOptions?: DbOptions): ServiceProviderRunCommandCursor;
  dropDatabase(database: string, options: DropDatabaseOptions, dbOptions?: DbOptions): Promise<Document_2>;
  bulkWrite(database: string, collection: string, requests: AnyBulkWriteOperation[], options: BulkWriteOptions, dbOptions?: DbOptions): Promise<BulkWriteResult>;
  clientBulkWrite(models: AnyClientBulkWriteModel<Document_2>[], options: ClientBulkWriteOptions): Promise<ClientBulkWriteResult>;
  deleteMany(database: string, collection: string, filter: Document_2, options: DeleteOptions, dbOptions?: DbOptions): Promise<DeleteResult>;
  deleteOne(database: string, collection: string, filter: Document_2, options: DeleteOptions, dbOptions?: DbOptions): Promise<DeleteResult>;
  findOneAndDelete(database: string, collection: string, filter: Document_2, options: FindOneAndDeleteOptions, dbOptions?: DbOptions): Promise<Document_2 | null>;
  findOneAndReplace(database: string, collection: string, filter: Document_2, replacement: Document_2, options: FindOneAndReplaceOptions, dbOptions?: DbOptions): Promise<Document_2>;
  findOneAndUpdate(database: string, collection: string, filter: Document_2, update: Document_2 | Document_2[], options: FindOneAndUpdateOptions, dbOptions?: DbOptions): Promise<Document_2>;
  insertMany(database: string, collection: string, docs: Document_2[], options: BulkWriteOptions, dbOptions?: DbOptions): Promise<InsertManyResult>;
  insertOne(database: string, collection: string, doc: Document_2, options: InsertOneOptions, dbOptions?: DbOptions): Promise<InsertOneResult>;
  replaceOne(database: string, collection: string, filter: Document_2, replacement: Document_2, options?: ReplaceOptions, dbOptions?: DbOptions): Promise<UpdateResult>;
  updateMany(database: string, collection: string, filter: Document_2, update: Document_2, options?: UpdateOptions, dbOptions?: DbOptions): Promise<UpdateResult>;
  updateOne(database: string, collection: string, filter: Document_2, update: Document_2, options?: UpdateOptions, dbOptions?: DbOptions): Promise<UpdateResult>;
  createIndexes(database: string, collection: string, indexSpecs: Document_2[], options?: CreateIndexesOptions, dbOptions?: DbOptions): Promise<string[]>;
  dropCollection(database: string, collection: string, options: DropCollectionOptions, dbOptions?: DbOptions): Promise<boolean>;
  renameCollection(database: string, oldName: string, newName: string, options?: RenameOptions, dbOptions?: DbOptions): Promise<Collection_2>;
  initializeBulkOp(dbName: string, collName: string, ordered: boolean, options?: BulkWriteOptions, dbOptions?: DbOptions): Promise<OrderedBulkOperation | UnorderedBulkOperation>;
  createSearchIndexes(database: string, collection: string, descriptions: SearchIndexDescription[], dbOptions?: DbOptions): Promise<string[]>;
  dropSearchIndex(database: string, collection: string, index: string, dbOptions?: DbOptions): Promise<void>;
  updateSearchIndex(database: string, collection: string, index: string, definition: Document_2, dbOptions?: DbOptions): Promise<void>;
}

/**
 * A MongoDB WriteConcern, which describes the level of acknowledgement
 * requested from MongoDB for write operations.
 * @public
 *
 * @see https://www.mongodb.com/docs/manual/reference/write-concern/
 */
declare class WriteConcern {
  /**
   * Request acknowledgment that the write operation has propagated to a specified number of mongod instances or to mongod instances with specified tags.
   * If w is 0 and is set on a write operation, the server will not send a response.
   */
  readonly w?: W;
  /** Request acknowledgment that the write operation has been written to the on-disk journal */
  readonly journal?: boolean;
  /**
   * Specify a time limit to prevent write operations from blocking indefinitely.
   */
  readonly wtimeoutMS?: number;
  /**
   * Specify a time limit to prevent write operations from blocking indefinitely.
   * @deprecated Will be removed in the next major version. Please use wtimeoutMS.
   */
  wtimeout?: number;
  /**
   * Request acknowledgment that the write operation has been written to the on-disk journal.
   * @deprecated Will be removed in the next major version. Please use journal.
   */
  j?: boolean;
  /**
   * Equivalent to the j option.
   * @deprecated Will be removed in the next major version. Please use journal.
   */
  fsync?: boolean | 1;
  /**
   * Constructs a WriteConcern from the write concern properties.
   * @param w - request acknowledgment that the write operation has propagated to a specified number of mongod instances or to mongod instances with specified tags.
   * @param wtimeoutMS - specify a time limit to prevent write operations from blocking indefinitely
   * @param journal - request acknowledgment that the write operation has been written to the on-disk journal
   * @param fsync - equivalent to the j option. Is deprecated and will be removed in the next major version.
   */
  constructor(w?: W, wtimeoutMS?: number, journal?: boolean, fsync?: boolean | 1);
  /**
   * Apply a write concern to a command document. Will modify and return the command.
   */
  static apply(command: Document_2, writeConcern: WriteConcern): Document_2;
  /** Construct a WriteConcern given an options object. */
  static fromOptions(options?: WriteConcernOptions | WriteConcern | W, inherit?: WriteConcernOptions | WriteConcern): WriteConcern | undefined;
}

/**
 * An error representing a failure by the server to apply the requested write concern to the bulk operation.
 * @public
 * @category Error
 */
declare class WriteConcernError {
  /* Excluded from this release type: serverError */
  constructor(error: WriteConcernErrorData);
  /** Write concern error code. */
  get code(): number | undefined;
  /** Write concern error message. */
  get errmsg(): string | undefined;
  /** Write concern error info. */
  get errInfo(): Document_2 | undefined;
  toJSON(): WriteConcernErrorData;
  toString(): string;
}

/** @public */
declare interface WriteConcernErrorData {
  code: number;
  errmsg: string;
  errInfo?: Document_2;
}

/** @public */
declare interface WriteConcernOptions {
  /** Write Concern as an object */
  writeConcern?: WriteConcern | WriteConcernSettings;
}

/** @public */
declare interface WriteConcernSettings {
  /** The write concern */
  w?: W;
  /**
   * The write concern timeout.
   */
  wtimeoutMS?: number;
  /** The journal write concern */
  journal?: boolean;
  /**
   * The journal write concern.
   * @deprecated Will be removed in the next major version. Please use the journal option.
   */
  j?: boolean;
  /**
   * The write concern timeout.
   */
  wtimeout?: number;
  /**
   * The file sync write concern.
   * @deprecated Will be removed in the next major version. Please use the journal option.
   */
  fsync?: boolean | 1;
}
declare interface WriteCustomLogEvent {
  method: 'info' | 'error' | 'warn' | 'fatal' | 'debug';
  message: string;
  attr?: unknown;
  level?: 1 | 2 | 3 | 4 | 5;
}

/**
 * An error that occurred during a BulkWrite on the server.
 * @public
 * @category Error
 */
declare class WriteError {
  err: BulkWriteOperationError;
  constructor(err: BulkWriteOperationError);
  /** WriteError code. */
  get code(): number;
  /** WriteError original bulk operation index. */
  get index(): number;
  /** WriteError message. */
  get errmsg(): string | undefined;
  /** WriteError details. */
  get errInfo(): Document_2 | undefined;
  /** Returns the underlying operation that caused the error */
  getOperation(): Document_2;
  toJSON(): {
    code: number;
    index: number;
    errmsg?: string;
    op: Document_2;
  };
  toString(): string;
}
export {};
declare global {
  const use: ShellApi['use'];
  const show: ShellApi['show'];
  const exit: ShellApi['exit'];
  const quit: ShellApi['quit'];
  const Mongo: ShellApi['Mongo'];
  const connect: ShellApi['connect'];
  const it: ShellApi['it'];
  const version: ShellApi['version'];
  const load: ShellApi['load'];
  const enableTelemetry: ShellApi['enableTelemetry'];
  const disableTelemetry: ShellApi['disableTelemetry'];
  const passwordPrompt: ShellApi['passwordPrompt'];
  const sleep: ShellApi['sleep'];
  const print: ShellApi['print'];
  const printjson: ShellApi['printjson'];
  const convertShardKeyToHashed: ShellApi['convertShardKeyToHashed'];
  const cls: ShellApi['cls'];
  const isInteractive: ShellApi['isInteractive'];

  const DBRef: ShellBson['DBRef'];
  const bsonsize: ShellBson['bsonsize'];
  const MaxKey: ShellBson['MaxKey'];
  const MinKey: ShellBson['MinKey'];
  const ObjectId: ShellBson['ObjectId'];
  const Timestamp: ShellBson['Timestamp'];
  const Code: ShellBson['Code'];
  const NumberDecimal: ShellBson['NumberDecimal'];
  const NumberInt: ShellBson['NumberInt'];
  const NumberLong: ShellBson['NumberLong'];
  const ISODate: ShellBson['ISODate'];
  const BinData: ShellBson['BinData'];
  const HexData: ShellBson['HexData'];
  const UUID: ShellBson['UUID'];
  const MD5: ShellBson['MD5'];
  const Decimal128: ShellBson['Decimal128'];
  const BSONSymbol: ShellBson['BSONSymbol'];
  const Int32: ShellBson['Int32'];
  const Long: ShellBson['Long'];
  const Binary: ShellBson['Binary'];
  const Double: ShellBson['Double'];
  const EJSON: ShellBson['EJSON'];
  const BSONRegExp: ShellBson['BSONRegExp'];
}
