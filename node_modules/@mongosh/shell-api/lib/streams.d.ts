import type { Document } from 'bson';
import { ShellApiWithMongoClass } from './decorators';
import StreamProcessor from './stream-processor';
import { asPrintable } from './enums';
import type { Database, DatabaseWithSchema } from './database';
import type Mongo from './mongo';
import type { GenericDatabaseSchema, GenericServerSideSchema } from './helpers';
export declare class Streams<M extends GenericServerSideSchema = GenericServerSideSchema, D extends GenericDatabaseSchema = GenericDatabaseSchema> extends ShellApiWithMongoClass {
    static newInstance<M extends GenericServerSideSchema = GenericServerSideSchema, D extends GenericDatabaseSchema = GenericDatabaseSchema>(database: DatabaseWithSchema<M, D>): Streams<M, D>;
    private _database;
    constructor(database: DatabaseWithSchema<M, D> | Database<M, D>);
    get _mongo(): Mongo<M>;
    [asPrintable](): string;
    getProcessor(name: string): StreamProcessor;
    process(pipeline: Document[], options?: Document): Promise<void | Document>;
    createStreamProcessor(name: string, pipeline: Document[], options?: Document): Promise<Document | StreamProcessor>;
    listStreamProcessors(filter: Document): Promise<any>;
    listConnections(filter: Document): Promise<any>;
    _runStreamCommand(cmd: Document, options?: Document): Promise<Document>;
}
