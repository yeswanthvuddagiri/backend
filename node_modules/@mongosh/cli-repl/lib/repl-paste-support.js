"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.installPasteSupport = installPasteSupport;
function* prototypeChain(obj) {
    if (!obj)
        return;
    yield obj;
    yield* prototypeChain(Object.getPrototypeOf(obj));
}
function installPasteSupport(repl) {
    if (!repl.terminal || process.env.TERM === 'dumb')
        return '';
    repl.output.write('\x1b[?2004h');
    const onEnd = '\x1b[?2004l';
    const ttyWriteKey = [...prototypeChain(repl)]
        .flatMap((proto) => Object.getOwnPropertySymbols(proto))
        .find((s) => String(s).includes('(_ttyWrite)'));
    if (!ttyWriteKey)
        throw new Error('Could not find _ttyWrite key on readline instance');
    repl.input.on('keypress', (s, key) => {
        if (key.name === 'paste-start') {
            if (Object.prototype.hasOwnProperty.call(repl, ttyWriteKey))
                throw new Error('Unexpected existing own _ttyWrite key on readline instance');
            const origTtyWrite = repl[ttyWriteKey];
            Object.defineProperty(repl, ttyWriteKey, {
                value: function (s, key) {
                    var _a;
                    if (key.ctrl || key.meta || key.code) {
                        return;
                    }
                    if (key.name &&
                        key.name !== ((_a = key.sequence) === null || _a === void 0 ? void 0 : _a.toLowerCase()) &&
                        !['tab', 'return', 'enter', 'space'].includes(key.name)) {
                        return;
                    }
                    return origTtyWrite.call(this, s, key);
                },
                enumerable: false,
                writable: true,
                configurable: true,
            });
        }
        else if (key.name === 'paste-end') {
            delete repl[ttyWriteKey];
        }
    });
    return onEnd;
}
//# sourceMappingURL=repl-paste-support.js.map